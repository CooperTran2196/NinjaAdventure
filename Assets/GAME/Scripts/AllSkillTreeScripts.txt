// ----- File: ST_Manager.cs -----
using UnityEngine;
using TMPro;

[DisallowMultipleComponent]
public class ST_Manager : MonoBehaviour
{
    [Header("Refs")]
    public ST_Slot[] skillSlots;
    public TMP_Text pointsText;
    public P_Exp p_Exp;
    public P_StatsChanged p_StatsChanged;

    [Header("UI Toggle")]
    public CanvasGroup panel;     // assign your SkillTree panel CanvasGroup
    public bool startClosed = true;

    private P_InputActions input;
    private bool isOpen;

    void Awake()
    {
        p_Exp ??= FindFirstObjectByType<P_Exp>();
        p_StatsChanged ??= FindFirstObjectByType<P_StatsChanged>();
        panel ??= GetComponent<CanvasGroup>();
        pointsText ??= GetComponentInChildren<TMP_Text>();

        if (!p_Exp) Debug.LogError($"{name}: P_Exp not found for ST_Manager.", this);
        if (!p_StatsChanged) Debug.LogError($"{name}: P_StatsChanged not found for ST_Manager.", this);
        if (!panel) Debug.LogError($"{name}: CanvasGroup (panel) missing.", this);
        if (!pointsText) Debug.LogWarning($"{name}: pointsText missing.", this);

        input = new P_InputActions();
        input.UI.ToggleSkillTree.Enable(); // K per your action map

        SetOpen(!startClosed);
    }

    void OnEnable()
    {
        p_Exp.OnSkillPointsChanged += HandleSPChanged;
        p_Exp.OnLevelUp += HandleLevelUp;

        ST_Slot.OnSkillUpgraded += HandleSkillUpgraded;
        ST_Slot.OnSkillMaxed += HandleSkillMaxed;
    }

    void OnDisable()
    {
        p_Exp.OnSkillPointsChanged -= HandleSPChanged;
        p_Exp.OnLevelUp -= HandleLevelUp;

        ST_Slot.OnSkillUpgraded -= HandleSkillUpgraded;
        ST_Slot.OnSkillMaxed -= HandleSkillMaxed;
    }

    void Start()
    {
        foreach (var slot in skillSlots)
        {
            var s = slot;
            s.skillButton.onClick.AddListener(() => TryToUpgrade(s));
        }

        HandleSPChanged(p_Exp ? p_Exp.skillPoints : 0);
    }

    void Update()
    {
        if (input.UI.ToggleSkillTree.WasPressedThisFrame())
            SetOpen(!isOpen);
    }

    void SetOpen(bool open)
    {
        isOpen = open;

        if (panel)
        {
            panel.alpha = open ? 1f : 0f;
            panel.interactable = open;
            panel.blocksRaycasts = open;
        }

        // Matches your Stats UI behavior
        Time.timeScale = open ? 0f : 1f;
    }

    void TryToUpgrade(ST_Slot slot)
    {
        if (!slot.isUnlocked) return;
        if (slot.currentLevel >= slot.skillSO.maxLevel) return;

        if (p_Exp.TrySpendSkillPoints(1))
            slot.UpgradeTheSkill();
    }

    void HandleSkillUpgraded(ST_Slot slot)
    {
        var so = slot.skillSO;
        if (!so) return;

        switch (so.kind)
        {
            case ST_SkillSO.Kind.Stat:
                p_StatsChanged.ApplyStat(so.stat, so.pointPerLv);
                break;

            case ST_SkillSO.Kind.Lifesteal:
                {
                    // Total lifesteal scales with current level
                    float totalPercent = slot.currentLevel * so.lifestealPercentPerLevel;
                    p_StatsChanged.SetLifestealPercent(totalPercent);
                    break;
                }
        }
    }

    void HandleSkillMaxed(ST_Slot _)
    {
        // Unlock children that now satisfy prerequisites
        for (int i = 0; i < skillSlots.Length; i++)
        {
            var s = skillSlots[i];
            if (!s.isUnlocked && s.CanUnlockSkill())
                s.Unlock();
        }
    }

    void HandleSPChanged(int sp)
    {
        pointsText.text = "SKILL POINTS: " + sp;
    }

    void HandleLevelUp(int newLevel)
    {
        HandleSPChanged(p_Exp.skillPoints);
    }
}

// ----- File: ST_SkillSO.cs -----
using UnityEngine;

[CreateAssetMenu(fileName = "NewSkill", menuName = "SkillTree")]
public class ST_SkillSO : ScriptableObject
{
    public enum Kind { Stat, Lifesteal }
    public enum Stat { AD, AP, MS, MaxHP, AR, MR, KR }

    [Header("Meta")]
    public string skillName = "Auto Filled";
    public Sprite skillIcon;
    [Min(1)] public int maxLevel = 1;

    [Header("Effect")]
    public Kind kind = Kind.Stat;

    [Header("Only Used when Kind = Stat")]
    public Stat stat = Stat.AD;

    [Header("Added to the chosen stat per level")]
    public int pointPerLv = 1;

    [Header("ONLY Used when Kind = Lifesteal (total % at current level)")]
    [Range(0f, 1f)] public float lifestealPercentPerLevel = 0f;

    private void OnValidate()
    {
        if (skillName != name)
            skillName = name;
    }
}

// ----- File: ST_Slot.cs -----
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System;
using System.Collections.Generic;

public class ST_Slot : MonoBehaviour
{
    [Header("Gate")]
    public List<ST_Slot> prerequisiteSkillSlots;

    [Header("Data")]
    public ST_SkillSO skillSO;

    [Header("State")]
    public int  currentLevel;
    public bool isUnlocked;

    [Header("UI")]
    public Image   SkillIcon;
    public Button  skillButton;
    public TMP_Text skillLevelText;

    public static event Action<ST_Slot> OnSkillUpgraded;
    public static event Action<ST_Slot> OnSkillMaxed;

    void Awake()
    {
        // Auto-wire UI components if not assigned in inspector
        SkillIcon ??= GetComponentInChildren<Image>();
        skillButton ??= GetComponent<Button>();
        skillLevelText ??= GetComponentInChildren<TMP_Text>();

        if (!skillSO) Debug.LogError($"{name}: ST_SkillSO is not assigned on {GetType().Name}.", this);
        if (!SkillIcon) Debug.LogWarning($"{name}: SkillIcon is not assigned.", this);
        if (!skillButton) Debug.LogWarning($"{name}: skillButton is not assigned.", this);
        if (!skillLevelText) Debug.LogWarning($"{name}: skillLevelText is not assigned.", this);

        prerequisiteSkillSlots ??= new List<ST_Slot>();

        UpdateUI();
    }

    void OnValidate()
    {
        if (skillSO != null && skillLevelText != null) UpdateUI();
    }

    // Called by SkillTreeManager after it successfully spends a point
    public void UpgradeTheSkill()
    {
        // Only for safety, SkillTreeManager should check these first
        // Will use for cheat/debug buttons
        if (!isUnlocked) return;
        if (currentLevel >= skillSO.maxLevel) return;

        currentLevel++;
        OnSkillUpgraded?.Invoke(this);
        if (currentLevel >= skillSO.maxLevel) OnSkillMaxed?.Invoke(this);

        UpdateUI();
    }

    public bool CanUnlockSkill()
    {
        foreach (var slot in prerequisiteSkillSlots)
        {
            if (!slot.isUnlocked || slot.currentLevel < slot.skillSO.maxLevel)
                return false;
        }
        return true;
    }

    public void Unlock()
    {
        isUnlocked = true;
        UpdateUI();
    }

    void UpdateUI()
    {
        if (SkillIcon && skillSO) SkillIcon.sprite = skillSO.skillIcon;

        if (isUnlocked)
        {
            skillButton.interactable = true;
            skillLevelText.text = currentLevel + "/" + skillSO.maxLevel;
            SkillIcon.color = Color.white;
        }
        else
        {
            skillButton.interactable = false;
            skillLevelText.text = "Locked";
            SkillIcon.color = Color.gray;
        }
    }
}

