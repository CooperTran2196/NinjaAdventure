// ----- File: SYS_ConfinerFinder.cs -----
// </summary>
// Automatically finds and assigns the confiner collider for CinemachineConfiner2D on scene load.
// </summary>

using Unity.Cinemachine;
using UnityEngine;
using UnityEngine.SceneManagement;
public class SYS_ConfinerFinder : MonoBehaviour
{
    void OnEnable() => SceneManager.sceneLoaded += OnSceneLoaded;
    void OnDisable() => SceneManager.sceneLoaded -= OnSceneLoaded;

    // Update the confiner when a new scene is loaded
    void OnSceneLoaded(Scene scene, LoadSceneMode mode)
    {
        CinemachineConfiner2D confiner = GetComponent<CinemachineConfiner2D>();
        confiner.BoundingShape2D = GameObject.FindWithTag("Confiner").GetComponent<PolygonCollider2D>();
    }
}

// ----- File: SYS_Fader.cs -----
// <summary>
// Manages screen fade in/out transitions using an Animator.
// </summary>

using System.Collections;
using UnityEngine;
using UnityEngine.SceneManagement;
public class SYS_Fader : MonoBehaviour
{
    public Animator animator;
    public float fadeTime = 0.5f;

    void Awake()
    {
        animator ??= GetComponentInChildren<Animator>(true);
        if (!animator) Debug.LogError("SYS_Fader: Animator is missing.");
    }

    public void FadeToScene(string sceneName)
    {
        StartCoroutine(DoFadeToScene(sceneName));
    }

    IEnumerator DoFadeToScene(string sceneName)
    {
        animator.Play("FadeOut");
        yield return new WaitForSeconds(fadeTime);
        // Load the scene
        SceneManager.LoadScene(sceneName, LoadSceneMode.Single);
        yield return new WaitForSeconds(fadeTime);
        animator.Play("FadeIn");      // reveal
    }
}

// ----- File: SYS_GameManager.cs -----
using UnityEngine;

public class SYS_GameManager : MonoBehaviour
{
    public static SYS_GameManager Instance;

    [Header("References")]
    public D_Manager d_Manager;
    public D_HistoryTracker d_HistoryTracker;
    public SYS_Fader sys_Fader; // Centralized reference to Fader
    public SHOP_Manager shop_Manager;

    [Header("Audio")]
    [SerializeField] private AudioSource audioSource;

    [Header("Persistent Objects")]
    public GameObject[] persistentObjects; // Objects to persist across scenes

    // Ensure only one instance of the GameManager exists
    void Awake()
    {
        // If an instance already exists, destroy this one
        if (Instance != null)
        {
            CleanUpAndDestroy();
            return;
        }
        else
        {
            // Set the instance and mark this object to not be destroyed on load
            Instance = this;
            DontDestroyOnLoad(gameObject);
            MarkPersistentObjects();

            // Fallback
            d_Manager ??= FindFirstObjectByType<D_Manager>();
            sys_Fader ??= FindFirstObjectByType<SYS_Fader>();
            shop_Manager ??= FindFirstObjectByType<SHOP_Manager>();
            audioSource ??= GetComponent<AudioSource>();

            if (!sys_Fader) Debug.LogWarning("SYS_GameManager: Fader is missing.");
            if (!audioSource) Debug.LogWarning("SYS_GameManager: AudioSource is missing.");

            // Setup AudioSource
            audioSource.loop = true;
            audioSource.playOnAwake = false;
        }
    }

    // Play music clip centrally
    public void PlayMusic(AudioClip clip)
    {
        if (audioSource.clip != clip)
        {
            audioSource.Stop();
            audioSource.clip = clip;
            audioSource.Play();
        }
    }

    // Mark specified objects to not be destroyed on scene load
    void MarkPersistentObjects()
    {
        foreach (var obj in persistentObjects)
        {
            if (obj)
            {
                DontDestroyOnLoad(obj);
            }
        }
    }

    // Clean up persistent objects and destroy this instance
    void CleanUpAndDestroy()
    {
        foreach (GameObject obj in persistentObjects)
        {
            Destroy(obj);
        }
        Destroy(gameObject);
    }
}

// ----- File: SYS_MusicTrigger.cs -----
using UnityEngine;

public class SYS_MusicTrigger : MonoBehaviour
{
    [SerializeField] private AudioClip audioClip;

    private void OnTriggerEnter2D(Collider2D other)
    {
        if (other.CompareTag("Player"))
        {
            SYS_GameManager.Instance.PlayMusic(audioClip);
        }
    }
}

// ----- File: SYS_SceneTeleport.cs -----
// <summary>
// Teleports the player to a different scene and spawn point when they enter the trigger.
// </summary>

using UnityEngine;

public class SYS_SceneTeleport : MonoBehaviour
{
    [Header("References")]
    public string sceneToLoad = "The Name of the Scene to Load";
    public static string nextSpawnId;
    public string destinationSpawnId = "DoorA";

    void OnTriggerEnter2D(Collider2D other)
    {
        if (!other.CompareTag("Player")) return;
        nextSpawnId = destinationSpawnId;
        SYS_GameManager.Instance.sys_Fader.FadeToScene(sceneToLoad);
    }
}

// ----- File: SYS_SpawnPoint.cs -----
// <summary>
// Spawns the player at the correct spawn point based on the last teleporter used.
// </summary>

using UnityEngine;

public class SYS_SpawnPoint : MonoBehaviour
{
    [Header("Must match the teleporter's Destination Spawn Id")]
    public string spawnId = "DoorA";

    void Start()
    {
        // Only move the player if this has the correct spawn ID
        if (SYS_SceneTeleport.nextSpawnId != spawnId) return;

        // Find the player and move them here
        var player = GameObject.FindGameObjectWithTag("Player")?.transform;
        player.position = transform.position;
    }
}

