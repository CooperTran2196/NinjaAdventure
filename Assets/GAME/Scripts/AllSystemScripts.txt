// ----- File: ItemRegistry.cs -----
using System.Collections.Generic;
using UnityEngine;

public static class ItemRegistry
{
    private static Dictionary<string, INV_ItemSO> byId;

    public static void Init()
    {
        if (byId != null) return;

        byId = new Dictionary<string, INV_ItemSO>();
        var all = Resources.LoadAll<INV_ItemSO>("Items"); // Assets/Resources/Items/**
        foreach (var so in all)
        {
            if (!so) continue;
            if (string.IsNullOrEmpty(so.id))
            {
                Debug.LogWarning($"[ItemRegistry] Item '{so.name}' has empty id. Set it for save/load.");
                continue;
            }
            if (byId.ContainsKey(so.id))
            {
                Debug.LogWarning($"[ItemRegistry] Duplicate item id '{so.id}'. First wins.");
                continue;
            }
            byId[so.id] = so;
        }
    }

    public static INV_ItemSO Get(string id)
    {
        if (byId == null) Init();
        if (string.IsNullOrEmpty(id)) return null;
        byId.TryGetValue(id, out var so);
        return so;
    }
}

// ----- File: SkillRegistry.cs -----
using System.Collections.Generic;
using UnityEngine;

public static class SkillRegistry
{
    private static Dictionary<string, ST_SkillSO> byId;

    public static void Init()
    {
        if (byId != null) return;

        byId = new Dictionary<string, ST_SkillSO>();
        var all = Resources.LoadAll<ST_SkillSO>("Skills"); // Assets/Resources/Skills/**
        foreach (var so in all)
        {
            if (!so) continue;
            if (string.IsNullOrEmpty(so.id))
            {
                Debug.LogWarning($"[SkillRegistry] Skill '{so.name}' has empty id. Set it for save/load.");
                continue;
            }
            if (byId.ContainsKey(so.id))
            {
                Debug.LogWarning($"[SkillRegistry] Duplicate skill id '{so.id}'. First wins.");
                continue;
            }
            byId[so.id] = so;
        }
    }

    public static ST_SkillSO Get(string id)
    {
        if (byId == null) Init();
        if (string.IsNullOrEmpty(id)) return null;
        byId.TryGetValue(id, out var so);
        return so;
    }
}

// ----- File: SYS_Checkpoint.cs -----
using UnityEngine;

[DisallowMultipleComponent]
public class SYS_Checkpoint : MonoBehaviour
{
    [SerializeField] private string spawnId = "Checkpoint"; // unique per checkpoint

    // Assumes a 2D trigger collider is on this GameObject.
    // Tag your Player as "Player" (already in your project).
    void OnTriggerEnter2D(Collider2D other)
    {
        if (!other.CompareTag("Player")) return;

        // Mark this as the latest checkpoint and quick autosave
        SYS_SaveSystem.Instance.NotifyCheckpointReached(spawnId, transform.position);
    }

    // Optional helper if you ever want to set it from code:
    public void SetSpawnId(string id) => spawnId = id;
}

// ----- File: SYS_ConfinerFinder.cs -----
// </summary>
// Automatically finds and assigns the confiner collider for CinemachineConfiner2D on scene load.
// </summary>

using Unity.Cinemachine;
using UnityEngine;
using UnityEngine.SceneManagement;
public class SYS_ConfinerFinder : MonoBehaviour
{
    void OnEnable() => SceneManager.sceneLoaded += OnSceneLoaded;
    void OnDisable() => SceneManager.sceneLoaded -= OnSceneLoaded;

    // Update the confiner when a new scene is loaded
    void OnSceneLoaded(Scene scene, LoadSceneMode mode)
    {
        CinemachineConfiner2D confiner = GetComponent<CinemachineConfiner2D>();
        confiner.BoundingShape2D = GameObject.FindWithTag("Confiner").GetComponent<PolygonCollider2D>();
    }
}

// ----- File: SYS_Fader.cs -----
// <summary>
// Manages screen fade in/out transitions using an Animator.
// </summary>

using System.Collections;
using UnityEngine;
using UnityEngine.SceneManagement;
public class SYS_Fader : MonoBehaviour
{
    public Animator animator;
    public float fadeTime = 0.5f;

    void Awake()
    {
        animator ??= GetComponentInChildren<Animator>(true);
        if (!animator) Debug.LogError("SYS_Fader: Animator is missing.");
    }

    public void FadeToScene(string sceneName)
    {
        StartCoroutine(DoFadeToScene(sceneName));
    }

    IEnumerator DoFadeToScene(string sceneName)
    {
        animator.Play("FadeOut");
        yield return new WaitForSeconds(fadeTime);
        // Load the scene
        SceneManager.LoadScene(sceneName, LoadSceneMode.Single);
        yield return new WaitForSeconds(fadeTime);
        animator.Play("FadeIn");      // reveal
    }
}

// ----- File: SYS_GameManager.cs -----
using UnityEngine;

public class SYS_GameManager : MonoBehaviour
{
    public static SYS_GameManager Instance;

    [Header("References")]
    public D_Manager d_Manager;
    public D_HistoryTracker d_HistoryTracker;
    public SYS_Fader sys_Fader; // Centralized reference to Fader
    public SHOP_Manager shop_Manager;

    [Header("Audio")]
    [SerializeField] private AudioSource audioSource;

    [Header("Persistent Objects")]
    public GameObject[] persistentObjects; // Objects to persist across scenes

    // Ensure only one instance of the GameManager exists
    void Awake()
    {
        // If an instance already exists, destroy this one
        if (Instance != null)
        {
            CleanUpAndDestroy();
            return;
        }
        else
        {
            // Set the instance and mark this object to not be destroyed on load
            Instance = this;
            DontDestroyOnLoad(gameObject);
            MarkPersistentObjects();

            // Fallback
            d_Manager ??= FindFirstObjectByType<D_Manager>();
            sys_Fader ??= FindFirstObjectByType<SYS_Fader>();
            shop_Manager ??= FindFirstObjectByType<SHOP_Manager>();
            audioSource ??= GetComponent<AudioSource>();

            if (!sys_Fader) Debug.LogWarning("SYS_GameManager: Fader is missing.");
            if (!audioSource) Debug.LogWarning("SYS_GameManager: AudioSource is missing.");

            // Setup AudioSource
            audioSource.loop = true;
            audioSource.playOnAwake = false;
        }
    }

    // Play music clip centrally
    public void PlayMusic(AudioClip clip)
    {
        if (audioSource.clip != clip)
        {
            audioSource.Stop();
            audioSource.clip = clip;
            audioSource.Play();
        }
    }

    // Mark specified objects to not be destroyed on scene load
    void MarkPersistentObjects()
    {
        foreach (var obj in persistentObjects)
        {
            if (obj)
            {
                DontDestroyOnLoad(obj);
            }
        }
    }

    // Clean up persistent objects and destroy this instance
    void CleanUpAndDestroy()
    {
        foreach (GameObject obj in persistentObjects)
        {
            Destroy(obj);
        }
        Destroy(gameObject);
    }
}

// ----- File: SYS_MusicTrigger.cs -----
using UnityEngine;

public class SYS_MusicTrigger : MonoBehaviour
{
    [SerializeField] private AudioClip audioClip;

    private void OnTriggerEnter2D(Collider2D other)
    {
        if (other.CompareTag("Player"))
        {
            SYS_GameManager.Instance.PlayMusic(audioClip);
        }
    }
}

// ----- File: SYS_SaveLoadUI.cs -----
using UnityEngine;
using TMPro;

[DisallowMultipleComponent]
public class SYS_SaveLoadUI : MonoBehaviour
{
    [Header("Optional")]
    [SerializeField] private TMP_InputField slotNameInput; // e.g., "slot1.json"
    [SerializeField] private TMP_Text feedback;            // small status label

    [Header("Defaults")]
    [SerializeField] private string defaultSlot = "slot1.json";

    private string SlotOrDefault()
    {
        var s = slotNameInput ? slotNameInput.text : null;
        return string.IsNullOrWhiteSpace(s) ? defaultSlot : s.Trim();
    }

    // Wire these to your buttons:
    public void OnClickSave()
    {
        var fn = SlotOrDefault();
        SYS_SaveSystem.Instance.SaveGame(fn);
        if (feedback) feedback.SetText($"Saved {fn}");
    }

    public void OnClickLoad()
    {
        var fn = SlotOrDefault();
        bool ok = SYS_SaveSystem.Instance.LoadGameAndTravel(fn);
        if (feedback) feedback.SetText(ok ? $"Loading {fn}" : $"Load failed: {fn}");
    }

    public void OnClickLoadAutosave()
    {
        bool ok = SYS_SaveSystem.Instance.ReplayFromAutosave();
        if (feedback) feedback.SetText(ok ? "Loading autosave" : "Autosave not found");
    }

    public void OnClickRestartInitial()
    {
        bool ok = SYS_SaveSystem.Instance.RestartFromInitial();
        if (feedback) feedback.SetText(ok ? "Restarting…" : "Initial save missing");
    }
}

// ----- File: SYS_SaveSystem.cs -----
// ===============================
// File: SYS_SaveSystem.cs
// Place on a persistent (DontDestroyOnLoad) object.
// ===============================
using System;
using System.IO;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

/// <summary>
/// Central JSON Saving/Loading orchestrator.
/// - Reconstructive Loading (Inventory → Skills → Progress → Recalc → exact HP with safe clamp)
/// - Autosave after spawn commit + after checkpoints
/// - Simple API for EndingUI and future Save/Load buttons
/// - Uses manager-provided "Saving/Loading" snapshots; this class stays dumb about math.
/// </summary>
[DisallowMultipleComponent]
public class SYS_SaveSystem : MonoBehaviour
{
    public static SYS_SaveSystem Instance;

    [Header("Files")]
    [SerializeField] private string autoSaveFile   = "autosave.json";
    [SerializeField] private string initialSaveFile= "initial.json";

    [Header("Runtime (view)")]
    [SerializeField] private string lastSavedScene = "";
    [SerializeField] private string lastSpawnId    = "";
    [SerializeField] private Vector3 lastSpawnPos  = Vector3.zero;
    [SerializeField] private string bossDeathReturnSpawnId = ""; // non-empty during boss fights

    private GameObject playerRef;
    private bool initialWritten;

    void Awake()
    {
        if (Instance != null) { Destroy(gameObject); return; }
        Instance = this;
        DontDestroyOnLoad(gameObject);
        ItemRegistry.Init();
        SkillRegistry.Init();
    }

    // --- Public API: called by spawners/checkpoints (we will add one-liners later) ---

    /// <summary>Call this AFTER a SYS_SpawnPoint actually moved the player.</summary>
    public void NotifySpawnCommitted(string spawnId, Vector3 position)
    {
        lastSavedScene = SceneManager.GetActiveScene().name;
        lastSpawnId    = spawnId;
        lastSpawnPos   = position;

        if (!playerRef) playerRef = GameObject.FindGameObjectWithTag("Player");

        // Write autosave and initial (once).
        AutoSaveNow();
        if (!initialWritten)
        {
            SaveGame(initialSaveFile);
            initialWritten = true;
        }
    }

    /// <summary>Call this from a checkpoint trigger whenever the player crosses it.</summary>
    public void NotifyCheckpointReached(string spawnId, Vector3 position)
    {
        lastSavedScene = SceneManager.GetActiveScene().name;
        lastSpawnId    = spawnId;
        lastSpawnPos   = position;

        if (!playerRef) playerRef = GameObject.FindGameObjectWithTag("Player");

        // Quick autosave so Replay returns here.
        AutoSaveNow();
    }

    // --- Boss respawn selection (set when fight starts; clear on victory) ---
    public void SetBossDeathReturnSpawn(string spawnId) => bossDeathReturnSpawnId = spawnId;
    public void ClearBossDeathReturnSpawn()             => bossDeathReturnSpawnId = "";

    // --- Buttons / UI (manual saves) ---

    /// <summary>Manual save to a named slot (e.g., "slot1.json").</summary>
    public void SaveGame(string fileName)
    {
        var data = BuildSaveData();
        WriteJsonAtomic(GetPath(fileName), JsonUtility.ToJson(data, prettyPrint: true));
    }

    /// <summary>Manual load from a named slot and travel there (EndingUI can call this later).</summary>
    public bool LoadGameAndTravel(string fileName, string overrideSpawnId = null)
    {
        var json = ReadJsonOrNull(GetPath(fileName));
        if (string.IsNullOrEmpty(json)) return false;

        var data = JsonUtility.FromJson<SaveData>(json);
        if (data == null) return false;

        // Rebuild game state in current scene so UI etc. stay consistent pre-travel
        ApplyLoadedData(data, preferExactHP: true);

        // Decide spawn
        var spawnToUse = !string.IsNullOrEmpty(overrideSpawnId) ? overrideSpawnId : data.lastSpawnId;
        SYS_SceneTeleport.nextSpawnId = spawnToUse;

        // Travel
        var gm = SYS_GameManager.Instance;
        if (gm && gm.sys_Fader) gm.sys_Fader.FadeToScene(data.sceneName);
        else SceneManager.LoadScene(data.sceneName);

        return true;
    }

    // --- EndingUI helpers (hook now; UI buttons can reuse) ---

    /// <summary>Replay from autosave (Game Over). Uses bossDeathReturnSpawnId if set, else last autosave spawn.</summary>
    public bool ReplayFromAutosave()
    {
        var json = ReadJsonOrNull(GetPath(autoSaveFile));
        if (string.IsNullOrEmpty(json)) return false;

        var data = JsonUtility.FromJson<SaveData>(json);
        if (data == null) return false;

        ApplyLoadedData(data, preferExactHP: true);

        // Spawn selection: boss-return takes priority
        var spawnToUse = !string.IsNullOrEmpty(bossDeathReturnSpawnId) ? bossDeathReturnSpawnId : data.lastSpawnId;
        SYS_SceneTeleport.nextSpawnId = spawnToUse;

        var gm = SYS_GameManager.Instance;
        if (gm && gm.sys_Fader) gm.sys_Fader.FadeToScene(data.sceneName);
        else SceneManager.LoadScene(data.sceneName);

        return true;
    }

    /// <summary>Advance to next scene, keep progress. Next scene will autosave after spawn.</summary>
    public void AdvanceToNextScene(string nextSceneName, string nextSpawnId = "Start")
    {
        SYS_SceneTeleport.nextSpawnId = nextSpawnId;

        var gm = SYS_GameManager.Instance;
        if (gm && gm.sys_Fader) gm.sys_Fader.FadeToScene(nextSceneName);
        else SceneManager.LoadScene(nextSceneName);
    }

    /// <summary>Restart from very beginning (first initial save written this session).</summary>
    public bool RestartFromInitial()
    {
        return LoadGameAndTravel(initialSaveFile);
    }

    /// <summary>Write the current world to autosave.json without traveling.</summary>
    public void AutoSaveNow()
    {
        var data = BuildSaveData();
        WriteJsonAtomic(GetPath(autoSaveFile), JsonUtility.ToJson(data, prettyPrint: true));
    }

    // ================== Core build/apply ==================

    private SaveData BuildSaveData()
    {
        if (!playerRef) playerRef = GameObject.FindGameObjectWithTag("Player");

        var scene = SceneManager.GetActiveScene().name;

        // Managers we orchestrate (they will implement these methods next)
        var inv = INV_Manager.Instance;
        var st  = FindFirstObjectByType<ST_Manager>();
        var pxp = playerRef ? playerRef.GetComponent<P_Exp>() : null;
        var cs  = playerRef ? playerRef.GetComponent<C_Stats>() : null;

        // Gather snapshots from managers (Saving)
        var invSnap  = inv  ? inv.SavingInventory()  : new InventorySave();
        var skillSnap= st   ? st.SavingSkills()      : new SkillsSave();
        var progSnap = pxp  ? pxp.SavingProgress()   : new ProgressSave();

        // Health exact + percent
        int hpAbs = cs != null ? Mathf.Clamp(cs.currentHP, 0, cs.maxHP) : 0;
        float hpPct = (cs != null && cs.maxHP > 0) ? Mathf.Clamp01(cs.currentHP / (float)cs.maxHP) : 0f;

        var data = new SaveData
        {
            schema      = 1,
            timestamp   = DateTime.UtcNow.ToString("o"),
            sceneName   = lastSavedScene == "" ? scene : lastSavedScene,
            lastSpawnId = lastSpawnId,
            lastSpawnPos= lastSpawnPos,
            bossReturnSpawnId = bossDeathReturnSpawnId,

            player = new PlayerSave
            {
                position   = playerRef ? playerRef.transform.position : Vector3.zero, // informational
                hpAbsolute = hpAbs,
                hpPercent  = hpPct,
                progress   = progSnap,
                inventory  = invSnap,
                skills     = skillSnap
            }
        };

        return data;
    }

    private void ApplyLoadedData(SaveData data, bool preferExactHP)
    {
        if (!playerRef) playerRef = GameObject.FindGameObjectWithTag("Player");

        var inv = INV_Manager.Instance;
        var st  = FindFirstObjectByType<ST_Manager>();
        var pxp = playerRef ? playerRef.GetComponent<P_Exp>()     : null;
        var cs  = playerRef ? playerRef.GetComponent<C_Stats>()   : null;
        var sm  = FindFirstObjectByType<P_StatsManager>();

        // Loading: Inventory → Skills → Progress
        if (inv != null) inv.LoadingInventory(data.player.inventory);
        if (st  != null) st.LoadingSkills(data.player.skills);
        if (pxp != null) pxp.LoadingProgress(data.player.progress);

        // Rebuild derived stats once
        if (sm != null) sm.RecalculateAllStats();

        // Restore currentHP exactly when possible, with safe clamp
        if (cs != null)
        {
            if (preferExactHP)
            {
                int target = data.player.hpAbsolute;
                if (target > cs.maxHP) target = cs.maxHP;
                if (target < 0)        target = 0;
                cs.currentHP = target;
            }
            else
            {
                cs.currentHP = Mathf.RoundToInt(data.player.hpPercent * cs.maxHP);
            }
        }

        // Update runtime mirrors
        lastSavedScene = data.sceneName;
        lastSpawnId    = string.IsNullOrEmpty(bossDeathReturnSpawnId) ? data.lastSpawnId : bossDeathReturnSpawnId;
        lastSpawnPos   = data.lastSpawnPos;
    }

    // ================== JSON utils ==================

    private string GetPath(string fileName) => Path.Combine(Application.persistentDataPath, fileName);

    private void WriteJsonAtomic(string path, string json)
    {
        try
        {
            var tmp = path + ".tmp";
            File.WriteAllText(tmp, json);
            if (File.Exists(path)) File.Delete(path);
            File.Move(tmp, path);
        }
        catch (Exception e)
        {
            Debug.LogError($"[SYS_SaveSystem] Failed to write save '{path}': {e.Message}");
        }
    }

    private string ReadJsonOrNull(string path)
    {
        try { return File.Exists(path) ? File.ReadAllText(path) : null; }
        catch (Exception e)
        {
            Debug.LogError($"[SYS_SaveSystem] Failed to read save '{path}': {e.Message}");
            return null;
        }
    }

    // ================== Serializable DTOs ==================
    // NOTE: Managers will use these types in their Saving/Loading methods.

    [Serializable]
    public class SaveData
    {
        public int schema;
        public string timestamp;

        public string sceneName;
        public string lastSpawnId;
        public Vector3 lastSpawnPos;
        public string bossReturnSpawnId;

        public PlayerSave player;
    }

    [Serializable]
    public class PlayerSave
    {
        public Vector3 position;     // informational; spawn uses spawnId
        public int     hpAbsolute;   // prefer exact on load
        public float   hpPercent;    // fallback

        public ProgressSave  progress;
        public InventorySave inventory;
        public SkillsSave    skills;
    }

    // --- Provided by INV_Manager.Saving/Loading ---
    [Serializable]
    public class InventorySave
    {
        public int gold;
        public List<InvItem> items = new List<InvItem>();
        [Serializable] public class InvItem { public string id; public int qty; }
    }

    // --- Provided by ST_Manager.Saving/Loading ---
    [Serializable]
    public class SkillsSave
    {
        public List<SkillEntry> skills = new List<SkillEntry>();
        [Serializable] public class SkillEntry { public string id; public int level; }
    }

    // --- Provided by P_Exp.Saving/Loading ---
    [Serializable]
    public class ProgressSave
    {
        public int level;
        public int currentExp;
        public int skillPoints;
        public int totalKills;
        public float playTime;
        public int goldMirror; // optional: if you keep gold here too (inv is canonical)
    }
}

// ----- File: SYS_SceneTeleport.cs -----
// <summary>
// Teleports the player to a different scene and spawn point when they enter the trigger.
// </summary>

using UnityEngine;

public class SYS_SceneTeleport : MonoBehaviour
{
    [Header("References")]
    public string sceneToLoad = "The Name of the Scene to Load";
    public static string nextSpawnId;
    public string destinationSpawnId = "DoorA";

    void OnTriggerEnter2D(Collider2D other)
    {
        if (!other.CompareTag("Player")) return;
        nextSpawnId = destinationSpawnId;
        SYS_GameManager.Instance.sys_Fader.FadeToScene(sceneToLoad);
    }
}

// ----- File: SYS_SetDefaultSpawnOnLoad.cs -----
using UnityEngine;

[DisallowMultipleComponent]
public class SYS_SetDefaultSpawnOnLoad : MonoBehaviour
{
    [SerializeField] private string defaultSpawnId = "Start";
    [SerializeField] private bool onlyIfEmpty = true;

    void Awake()
    {
        if (!onlyIfEmpty || string.IsNullOrEmpty(SYS_SceneTeleport.nextSpawnId))
            SYS_SceneTeleport.nextSpawnId = defaultSpawnId;
    }
}

// ----- File: SYS_SpawnPoint.cs -----
// <summary>
// Spawns the player at the correct spawn point based on the last teleporter used.
// </summary>

using UnityEngine;

public class SYS_SpawnPoint : MonoBehaviour
{
    [Header("Must match the teleporter's Destination Spawn Id")]
    public string spawnId = "DoorA";
    

    void Start()
    {
        // Only move the player if this has the correct spawn ID
        if (SYS_SceneTeleport.nextSpawnId != spawnId) return;

        // Find the player and move them here
        var player = GameObject.FindGameObjectWithTag("Player")?.transform;
        player.position = transform.position;
        SYS_SaveSystem.Instance.NotifySpawnCommitted(spawnId, transform.position);

    }
}

