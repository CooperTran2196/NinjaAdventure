// ----- File: ExpUI.cs -----
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class ExpUI : MonoBehaviour
{
    [Header("XP")]
    public int level;
    public int currentExp;
    public int expToLevel = 10;
    public float expGrowMultiplier = 1.2f;

    [Header("UI")]
    public Slider expSlider;
    public TMP_Text currentLevelText;

    private P_InputActions input;

    void OnEnable()
    {
        input ??= new P_InputActions();
        input.Debug.Enable();
    }

    void OnDisable()
    {
        input.Debug.Disable();
    }

    void Start()
    {
        UpdateUI();
    }

    void Update()
    {
        if (input.Debug.GainExp.WasPressedThisFrame())
        {
            GainExperience(2);
        }
    }

    public void GainExperience(int amount)
    {
        currentExp += amount;
        if (currentExp >= expToLevel) LevelUp();
        UpdateUI();
    }

    private void LevelUp()
    {
        level++;
        currentExp -= expToLevel;
        expToLevel = Mathf.RoundToInt(expToLevel * expGrowMultiplier);
    }

    public void UpdateUI()
    {
        expSlider.maxValue = expToLevel;
        expSlider.value = currentExp;
        currentLevelText.text = "Level: " + level;
    }
}

// ----- File: HealthUI.cs -----
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class HealthUI : MonoBehaviour
{
    [Header("References")]
    public C_Stats p_Stats;
    public C_Health p_Health;
    public P_StatsChanged p_StatsChanged; // Add reference to listen for stat changes
    public Slider healthSlider;
    public TMP_Text healthText;

    void Awake()
    {
        // Find references if not assigned
        p_Stats ??= FindFirstObjectByType<C_Stats>();
        p_Health ??= FindFirstObjectByType<C_Health>();
        p_StatsChanged ??= FindFirstObjectByType<P_StatsChanged>();

        if (!p_Stats) Debug.LogError($"{name}: C_Stats in HealthUI missing.", this);
        if (!p_Health) Debug.LogError($"{name}: C_Health in HealthUI missing.", this);
        if (!p_StatsChanged) Debug.LogError($"{name}: P_StatsChanged in HealthUI missing.", this);
        if (!healthSlider) Debug.LogError($"{name}: healthSlider in HealthUI missing.", this);

        // Initialize slider
        healthSlider.maxValue = p_Stats.maxHP;
        healthSlider.value = p_Stats.currentHP;
    }

    void OnEnable()
    {
        // Subscribe to health and stat change events
        p_Health.OnDamaged += HandleHealthChanged;
        p_Health.OnHealed += HandleHealthChanged;
        p_Health.OnDied += UpdateUI;

        p_StatsChanged.OnStatsRecalculated += UpdateUI;

        UpdateUI();
    }

    void OnDisable()
    {
        p_Health.OnDamaged -= HandleHealthChanged;
        p_Health.OnHealed -= HandleHealthChanged;
        p_Health.OnDied -= UpdateUI;

        p_StatsChanged.OnStatsRecalculated -= UpdateUI;

    }

    // A helper method to match the signature of OnDamaged and OnHealed events
    void HandleHealthChanged(int amount)
    {
        UpdateUI();
    }

    public void UpdateUI()
    {
        // Update the slider's max value and current value
        healthSlider.maxValue = p_Stats.maxHP;
        healthSlider.value = p_Stats.currentHP;

        healthText.text = $"{p_Stats.currentHP} / {p_Stats.maxHP}";
    }
}

// ----- File: StatsUI.cs -----
using UnityEngine;
using TMPro;

public class StatsUI : MonoBehaviour
{
    [Header("References")]
    public C_Stats p_Stats;
    public P_StatsChanged p_StatsChanged;
    public CanvasGroup statsCanvas;
    public GameObject[] statsSlots;

    private P_InputActions input;
    private bool statsOpen = false;

    void Awake()
    {
        input = new P_InputActions();
        input.UI.ToggleStats.Enable();

        p_Stats ??= FindFirstObjectByType<C_Stats>();
        p_StatsChanged ??= FindFirstObjectByType<P_StatsChanged>();

        // start closed
        statsCanvas.alpha = 0;
    }
    
    void OnEnable()
    {
        if (p_StatsChanged != null)
            p_StatsChanged.OnStatsRecalculated += UpdateAllStats;  // <-- add
    }

    void OnDisable()
    {
        if (p_StatsChanged != null)
            p_StatsChanged.OnStatsRecalculated -= UpdateAllStats;  // <-- add
    }

    void Start()
    {
        UpdateAllStats();
    }

    void Update()
    {
        if (!input.UI.ToggleStats.WasPressedThisFrame()) return;

        if (statsOpen) // Close
        {
            Time.timeScale  = 1;
            statsCanvas.alpha = 0;
            statsOpen = false;
        }
        else // Open
        {
            UpdateAllStats();
            Time.timeScale  = 0;
            statsCanvas.alpha = 1;
            statsOpen = true;
        }
    }

    public void UpdateAD()
    {
        statsSlots[0].GetComponentInChildren<TMP_Text>().text =
            "AD: " + p_Stats.AD;
    }
    public void UpdateAP()
    {
        statsSlots[1].GetComponentInChildren<TMP_Text>().text =
            "AP: " + p_Stats.AP;
    }
    public void UpdateMS()
    {
        statsSlots[2].GetComponentInChildren<TMP_Text>().text =
            "MS: " + p_Stats.MS;
    }

    public void UpdateMaxHealth()
    {
        statsSlots[3].GetComponentInChildren<TMP_Text>().text =
            "HP: " + p_Stats.maxHP;
    }
    public void UpdateAR()
    {
        statsSlots[4].GetComponentInChildren<TMP_Text>().text =
            "AR: " + p_Stats.AR;
    }
    public void UpdateMR()
    {
        statsSlots[5].GetComponentInChildren<TMP_Text>().text =
            "MR: " + p_Stats.MR;
    }
        public void UpdateKR()
    {
        statsSlots[6].GetComponentInChildren<TMP_Text>().text =
            "KR: " + p_Stats.KR;
    }

    public void UpdateAllStats()
    {
        UpdateAD();
        UpdateAP();
        UpdateMS();

        UpdateMaxHealth();
        UpdateAR();
        UpdateMR();
        UpdateKR();
    }
}

