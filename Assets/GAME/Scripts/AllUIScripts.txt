 
// ----- File: ExpUI.cs ----- 
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class ExpUI : MonoBehaviour
{
    [Header("XP")]
    public int level;
    public int currentExp;
    public int expToLevel = 10;
    public float expGrowMultiplier = 1.2f;

    [Header("UI")]
    public Slider expSlider;
    public TMP_Text currentLevelText;

    private P_InputActions input;

    void OnEnable()
    {
        input ??= new P_InputActions();
        input.Debug.Enable();
    }

    void OnDisable()
    {
        input.Debug.Disable();
    }

    void Start()
    {
        UpdateUI();
    }

    void Update()
    {
        if (input.Debug.GainExp.WasPressedThisFrame())
        {
            GainExperience(2);
        }
    }

    public void GainExperience(int amount)
    {
        currentExp += amount;
        if (currentExp >= expToLevel)
        {
            LevelUp();
        }
        UpdateUI();
    }

    private void LevelUp()
    {
        level++;
        currentExp -= expToLevel;
        expToLevel = Mathf.RoundToInt(expToLevel * expGrowMultiplier);
    }

    public void UpdateUI()
    {
        expSlider.maxValue = expToLevel;
        expSlider.value = currentExp;
        currentLevelText.text = "Level: " + level;
    }
}
 
// ----- File: HealthUI.cs ----- 
using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;

public class HealthUI : MonoBehaviour
{
    [Header("References")]
    public P_Combat combat; // Reads currentHP/maxHP + raises events
    public RectTransform root;
    public Image healthPointPrefab;

    [Header("Sprites (index = HP in this slot)")]
    public Sprite[] healthPoint = new Sprite[4]; // 0 -> full

    readonly List<Image> health = new List<Image>(); // Instantiated icons
    int lastMaxHP = -1;

    // Events
    System.Action<int> onDamaged, onHealed;
    System.Action onDied;

    void OnEnable()
    {
        // Assign delegates
        onDamaged = _ => { chooseHealthSprite(); };
        onHealed  = _ => { chooseHealthSprite(); };
        onDied    = () => { chooseHealthSprite(); };

        combat.OnDamaged += onDamaged;
        combat.OnHealed  += onHealed;
        combat.OnDied    += onDied;

        UpdateUI();
        chooseHealthSprite();
    }

    void OnDisable()
    {
        combat.OnDamaged -= onDamaged;
        combat.OnHealed  -= onHealed;
        combat.OnDied    -= onDied;
    }

    // Build the correct number of icons from maxHP
    public void UpdateUI()
    {
        int maxHP = combat.stats.maxHP;
        if (maxHP == lastMaxHP) return;

        lastMaxHP = maxHP;
        int needed = Mathf.CeilToInt(maxHP / 3f);

        // Clear old children and list when increase maxHealth
        for (int i = root.childCount - 1; i >= 0; i--)
            Destroy(root.GetChild(i).gameObject);
        health.Clear();

        // Spawn health sprites
        for (int i = 0; i < needed; i++)
        {
            var img = Instantiate(healthPointPrefab, root);
            img.enabled = true;
            health.Add(img);
        }
    }

    // Pick which sprite to use based on remaining HP for that slot
    public void chooseHealthSprite()
    {
        int hp = combat.stats.currentHP;
        for (int i = 0; i < health.Count; i++)
        {
            int theHealthSpriteWanted = Mathf.Clamp(hp - i * 3, 0, 3);
            health[i].sprite = healthPoint[theHealthSpriteWanted];
        }
    }
}
 
// ----- File: StatsUI.cs ----- 
using UnityEngine;
using TMPro;

public class StatsUI : MonoBehaviour
{
    [Header("References")]
    public P_Stats p_Stats;
    public CanvasGroup statsCanvas;
    public GameObject[] statsSlots;

    private P_InputActions input;
    private bool statsOpen = false;

    void Awake()
    {
        input = new P_InputActions();
        input.UI.ToggleStats.Enable();

        // start closed
        statsCanvas.alpha = 0;
    }

    void Start()
    {
        UpdateAllStats();
    }

    void Update()
    {
        if (input.UI.ToggleStats.WasPressedThisFrame())
        {
            if (statsOpen) // To close
            {
                Time.timeScale = 1;
                statsCanvas.alpha = 0;
                statsOpen = false;

            }
            
            else // to Open
            {
                UpdateAllStats();
                Time.timeScale = 0;
                statsCanvas.alpha = 1;
                statsOpen = true;
            }
        }
    }

    public void UpdateAD()
    {
        statsSlots[0].GetComponentInChildren<TMP_Text>().text =
            "Damage: " + p_Stats.AD;
    }
    public void UpdateAP()
    {
        statsSlots[1].GetComponentInChildren<TMP_Text>().text =
            "Ability Power: " + p_Stats.AP;
    }
    public void UpdateMS()
    {
        statsSlots[2].GetComponentInChildren<TMP_Text>().text =
            "Move Speed: " + p_Stats.MS;
    }

    public void UpdateMaxHealth()
    {
        statsSlots[3].GetComponentInChildren<TMP_Text>().text =
            "Max Health: " + p_Stats.maxHP;
    }
    public void UpdateAR()
    {
        statsSlots[4].GetComponentInChildren<TMP_Text>().text =
            "Armor: " + p_Stats.AR;
    }
    public void UpdateMR()
    {
        statsSlots[5].GetComponentInChildren<TMP_Text>().text =
            "Magic Res: " + p_Stats.MR;
    }
        public void UpdateKR()
    {
        statsSlots[6].GetComponentInChildren<TMP_Text>().text =
            "Knockback Res: " + p_Stats.KR;
    }

    public void UpdateAllStats()
    {
        UpdateAD();
        UpdateAP();
        UpdateMS();

        UpdateMaxHealth();
        UpdateAR();
        UpdateMR();
        UpdateKR();
    }
}
 
