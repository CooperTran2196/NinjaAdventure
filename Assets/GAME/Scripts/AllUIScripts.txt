// ----- File: EndingUI.cs -----
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using TMPro;

[DisallowMultipleComponent]
public class EndingUI : MonoBehaviour
{
    [Header("Wiring")]
    [SerializeField] private CanvasGroup cg;
    [SerializeField] private Button replayButton;
    [SerializeField] private TMP_Text titleText;     // "Victory!" / "Game Over"
    [SerializeField] private GameObject statsPanel;  // now shown on BOTH win/lose
    [SerializeField] private TMP_Text levelText;
    [SerializeField] private TMP_Text expText;
    [SerializeField] private TMP_Text killsText;
    [SerializeField] private TMP_Text timeText;

    [Header("End Triggers (optional)")]
    [SerializeField] private C_Health playerHealth;     // show Game Over on player death (with delay)
    [SerializeField] private C_Health finalBossHealth;  // show Victory on boss death (no delay)

    [Header("Next Scene (optional)")]
    [Tooltip("If empty, reloads current scene; otherwise loads this scene (e.g., \"Level2\").")]
    [SerializeField] private string nextSceneName = "";

    [Header("Timing")]
    [Tooltip("Delay after player death before the Ending UI appears (realtime seconds).")]
    [SerializeField] private float gameOverDelay = 2f;  // realtime seconds

    [Header("Data")]
    [SerializeField] private P_Exp playerExp;   // provides level/currentExp/totalKills/playTime
    private bool isWin;

    private bool shown;

    void Awake()
    {
        cg ??= GetComponent<CanvasGroup>();
        replayButton ??= GetComponentInChildren<Button>(true);
        playerExp ??= FindObjectOfType<P_Exp>(true);
        var label = replayButton?.GetComponentInChildren<TMP_Text>(true);
        if (label) label.text = "Restart";
        if (!cg) Debug.LogError("[EndingUI] Missing CanvasGroup.");
        if (!replayButton) Debug.LogError("[EndingUI] Missing Replay Button.");
        if (!titleText) Debug.LogError("[EndingUI] Missing titleText.");
        if (!statsPanel) Debug.LogError("[EndingUI] Missing statsPanel.");
        if (!levelText) Debug.LogError("[EndingUI] Missing levelText.");
        if (!expText) Debug.LogError("[EndingUI] Missing expText.");
        if (!killsText) Debug.LogError("[EndingUI] Missing killsText.");
        if (!timeText) Debug.LogError("[EndingUI] Missing timeText.");
        if (!playerExp) Debug.LogWarning("[EndingUI] P_Exp not found; stats will be blank.");
    }

    void OnEnable()
    {
        // start hidden & non-interactive
        cg.alpha = 0f;
        cg.interactable = false;
        cg.blocksRaycasts = false;

        if (playerHealth) playerHealth.OnDied += OnPlayerDied;
        if (finalBossHealth) finalBossHealth.OnDied += OnBossDied;
        // Button OnClick -> OnClickReplay() should be wired in Inspector (mouse only; no keyboard handling)
    }

    void OnDisable()
    {
        if (playerHealth) playerHealth.OnDied -= OnPlayerDied;
        if (finalBossHealth) finalBossHealth.OnDied -= OnBossDied;
    }

    // Optional public triggers (e.g., from a portal)
    public void ShowVictory() => Show(true);
    public void ShowGameOver() => Show(false);

    private void OnBossDied() => Show(true);

    private void OnPlayerDied()
    {
        if (shown) return;
        StartCoroutine(ShowGameOverAfterDelay());
    }

    private System.Collections.IEnumerator ShowGameOverAfterDelay()
    {
        yield return new WaitForSecondsRealtime(gameOverDelay);
        Show(false);
    }

    private void Show(bool win)
    {
        if (shown) return;
        shown = true;
        isWin = win;
        // Pause world while the ending screen is visible
        Time.timeScale = 0f;

        titleText.text = win ? "Victory!" : "Game Over";

        // Stats now show regardless of outcome
        statsPanel.SetActive(true);
        if (playerExp)
        {
            levelText.text = $"Level {playerExp.level}";
            expText.text = $"{playerExp.currentExp} XP";
            killsText.text = playerExp.totalKills.ToString();
            timeText.text = FormatTime(playerExp.playTime);
        }

        // Reveal modal
        cg.alpha = 1f;
        cg.interactable = true;
        cg.blocksRaycasts = true;
    }

    private string FormatTime(float seconds)
    {
        if (seconds < 0f) seconds = 0f;
        int h = Mathf.FloorToInt(seconds / 3600f);
        int m = Mathf.FloorToInt((seconds % 3600f) / 60f);
        int s = Mathf.FloorToInt(seconds % 60f);
        return h > 0 ? $"{h:D2}:{m:D2}:{s:D2}" : $"{m:D2}:{s:D2}";
    }

    public void OnClickReplay()
    {
        if (!shown) return;
        cg.interactable = false;
        cg.blocksRaycasts = false;
        Time.timeScale = 1f;

        SYS_GameManager.Instance.FreshBoot();  // <- simplest, no special cases
    }


}

// ----- File: ExpUI.cs -----
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class ExpUI : MonoBehaviour
{
    [Header("References")]
    public P_Exp p_Exp;

    [Header("UI")]
    public Slider expSlider;
    public TMP_Text currentLevelText;

    P_InputActions input;

    void Awake()
    {
        input = new P_InputActions();
        // p_Exp ??= FindFirstObjectByType<P_Exp>();
        expSlider ??= GetComponentInChildren<Slider>();
        currentLevelText ??= GetComponentInChildren<TMP_Text>();

        if (!p_Exp) Debug.LogError($"{name}: P_Exp is missing in ExpUI");
        if (!expSlider) Debug.LogError($"{name}: expSlider is missing in ExpUI");
        if (!currentLevelText) Debug.LogError($"{name}: currentLevelText is missing in ExpUI");
    }

    void OnEnable()
    {
        input.Debug.Enable();

        p_Exp.OnLevelUp += HandleLevelUp;
        p_Exp.OnXPChanged += HandleXPChanged;

        UpdateUI();
    }

    void OnDisable()
    {
        input.Debug.Disable();

        p_Exp.OnLevelUp -= HandleLevelUp;
        p_Exp.OnXPChanged -= HandleXPChanged;
    }

    // Debug: Gain XP with input
    void Update()
    {
        if (input.Debug.GainExp.WasPressedThisFrame())
            p_Exp.AddDebugXP();
    }

    void HandleLevelUp(int newLevel) => UpdateUI();
    void HandleXPChanged(int cur, int req) => UpdateUI();

    // Update the XP bar and level text
    void UpdateUI()
    {
        int cur = p_Exp.currentExp;
        int req = p_Exp.GetXPRequiredForNext();
        expSlider.maxValue = req;
        expSlider.value = cur;
        currentLevelText.text = "Level: " + p_Exp.level;
    }
}

// ----- File: HealthUI.cs -----
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class HealthUI : MonoBehaviour
{
    [Header("References")]
    public C_Stats p_Stats;
    public C_Health p_Health;
    public P_StatsManager p_StatsManager;
    public Slider healthSlider;
    public TMP_Text healthText;

    void Awake()
    {
        // Find references if not assigned
        p_Stats ??= FindFirstObjectByType<C_Stats>();
        p_Health ??= FindFirstObjectByType<C_Health>();
        p_StatsManager ??= FindFirstObjectByType<P_StatsManager>();

        if (!p_Stats) Debug.LogError($"{name}: C_Stats is missing in HealthUI");
        if (!p_Health) Debug.LogError($"{name}: C_Health is missing in HealthUI");
        if (!p_StatsManager) Debug.LogError($"{name}: P_StatsManager is missing in HealthUI");
        if (!healthSlider) Debug.LogError($"{name}: healthSlider is missing in HealthUI");

        // Initialize slider
        healthSlider.maxValue = p_Stats.maxHP;
        healthSlider.value = p_Stats.currentHP;
    }

    void OnEnable()
    {
        // Subscribe to health and stat change events
        p_Health.OnDamaged += HandleHealthChanged;
        p_Health.OnHealed += HandleHealthChanged;
        p_Health.OnDied += UpdateUI;

        p_StatsManager.OnStatsChanged += UpdateUI;

        UpdateUI();
    }

    void OnDisable()
    {
        p_Health.OnDamaged -= HandleHealthChanged;
        p_Health.OnHealed -= HandleHealthChanged;
        p_Health.OnDied -= UpdateUI;

        p_StatsManager.OnStatsChanged -= UpdateUI;

    }

    // A helper method to match the signature of OnDamaged and OnHealed events
    void HandleHealthChanged(int amount)
    {
        UpdateUI();
    }

    // Update the health UI elements
    public void UpdateUI()
    {
        // Update the slider's max value and current value
        healthSlider.maxValue = p_Stats.maxHP;
        healthSlider.value = p_Stats.currentHP;

        healthText.text = $"{p_Stats.currentHP} / {p_Stats.maxHP}";
    }
}

// ----- File: IntroUI.cs -----
using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;

public class IntroUI : MonoBehaviour
{
    [Header("Wiring")]
    [SerializeField] private CanvasGroup cg;
    [SerializeField] private Button startButton;

    [Header("Timing (realtime seconds)")]
    [SerializeField] private float showDelay = 2f;

    void Awake()
    {
        cg ??= GetComponent<CanvasGroup>();
        startButton ??= GetComponentInChildren<Button>();
    }

    void OnEnable()
    {
        // hidden + non-interactive at start
        cg.alpha = 0f;
        cg.interactable = false;
        cg.blocksRaycasts = false;

        StartCoroutine(ShowAfterDelay());
    }

    private IEnumerator ShowAfterDelay()
    {
        // Wait for showDelay seconds in real time
        yield return new WaitForSecondsRealtime(showDelay);
        // pause world + show + take input
        Time.timeScale = 0f; 
        cg.alpha = 1f;
        cg.interactable = true;
        cg.blocksRaycasts = true;
    }

    // Hook to Start Button OnClick
    public void StartClicked()
    {
        Time.timeScale = 1f; // unpause world
        cg.interactable = false;
        cg.blocksRaycasts = false;
        Destroy(gameObject); // one time use
    }
}

// ----- File: StatsUI.cs -----
using UnityEngine;
using TMPro;

public class StatsUI : MonoBehaviour
{
    [Header("References")]
    public C_Stats p_Stats;
    public P_StatsManager p_StatsManager;
    public CanvasGroup statsCanvas;
    public GameObject[] statsSlots;

    P_InputActions input;
    bool statsOpen = false;

    void Awake()
    {
        input = new P_InputActions();
        input.UI.ToggleStats.Enable();

        p_Stats ??= FindFirstObjectByType<C_Stats>();
        p_StatsManager ??= FindFirstObjectByType<P_StatsManager>();

        // start closed
        statsCanvas.alpha = 0;
    }
    
    void OnEnable()
    {
        if (p_StatsManager != null)
            p_StatsManager.OnStatsChanged += UpdateAllStats;
    }

    void OnDisable()
    {
        input?.UI.Disable();
        input?.Dispose();

        if (p_StatsManager != null)
            p_StatsManager.OnStatsChanged -= UpdateAllStats;
    }

    // Initialize all stats display
    void Start()
    {
        UpdateAllStats();
    }

    // Toggle stats UI with input
    void Update()
    {
        if (input.UI.ToggleStats.WasPressedThisFrame())
            SetOpen(!statsOpen);
    }

    //  Open/close the stats UI
    void SetOpen(bool open)
    {
        statsOpen = open;

        Time.timeScale = open ? 0f : 1f;
        statsCanvas.alpha = open ? 1f : 0f;
    }

    // Update individual stat displays
    public void UpdateAD()
    {
        statsSlots[0].GetComponentInChildren<TMP_Text>().text =
            "AD: " + p_Stats.AD;
    }
    public void UpdateAP()
    {
        statsSlots[1].GetComponentInChildren<TMP_Text>().text =
            "AP: " + p_Stats.AP;
    }
    public void UpdateMS()
    {
        statsSlots[2].GetComponentInChildren<TMP_Text>().text =
            "MS: " + p_Stats.MS;
    }

    public void UpdateMaxHealth()
    {
        statsSlots[3].GetComponentInChildren<TMP_Text>().text =
            "HP: " + p_Stats.maxHP;
    }
    public void UpdateAR()
    {
        statsSlots[4].GetComponentInChildren<TMP_Text>().text =
            "AR: " + p_Stats.AR;
    }
    public void UpdateMR()
    {
        statsSlots[5].GetComponentInChildren<TMP_Text>().text =
            "MR: " + p_Stats.MR;
    }
        public void UpdateKR()
    {
        statsSlots[6].GetComponentInChildren<TMP_Text>().text =
            "KR: " + p_Stats.KR;
    }

    public void UpdateAllStats()
    {
        UpdateAD();
        UpdateAP();
        UpdateMS();

        UpdateMaxHealth();
        UpdateAR();
        UpdateMR();
        UpdateKR();
    }
}

