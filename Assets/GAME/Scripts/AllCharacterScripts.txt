 
// ----- File: C_Anim.cs ----- 
using UnityEngine;

public static class C_Anim
{
    // Shared for Player + Enemy
    public static void ApplyMoveIdle(
        Animator animator,
        bool isAttacking,
        Vector2 moveAxis,
        Vector2 lastMove,
        float MIN_DISTANCE)
    {
        if (isAttacking)
        {
            animator.SetBool("isMoving", false);
            animator.SetFloat("idleX", lastMove.x);
            animator.SetFloat("idleY", lastMove.y);
            return;
        }

        bool moving = moveAxis.sqrMagnitude > MIN_DISTANCE;
        animator.SetBool("isMoving", moving);

        if (moving)
        {
            animator.SetFloat("moveX", moveAxis.x);
            animator.SetFloat("moveY", moveAxis.y);
        }

        animator.SetFloat("idleX", lastMove.x);
        animator.SetFloat("idleY", lastMove.y);
    }
}
 
// ----- File: C_FX.cs ----- 
using System.Collections;
using UnityEngine;

public class C_FX : MonoBehaviour
{
    [Header("References")]
    SpriteRenderer sprite;

    [Header("Flash")]
    public float flashDuration = 0.1f;
    public Color healTint   = new Color(0.3f, 1f, 0.3f, 1f);
    public Color damageTint = new Color(1f, 0.3f, 0.3f, 1f);

    [Header("Death")]
    public float deathFadeTime = 1.5f;

    Color baseRGB;

    void Awake()
    {
        sprite ??= GetComponent<SpriteRenderer>();
        if (sprite == null) Debug.LogError($"{name}: SpriteRenderer missing.", this);

        baseRGB = sprite ? sprite.color : Color.white;
    }

    public void FlashOnDamaged() => StartCoroutine(Flash(damageTint));
    public void FlashOnHealed()  => StartCoroutine(Flash(healTint));

    IEnumerator Flash(Color tint)
    {
        float a = sprite.color.a;
        sprite.color = new Color(tint.r, tint.g, tint.b, a);
        yield return new WaitForSeconds(flashDuration);
        sprite.color = new Color(baseRGB.r, baseRGB.g, baseRGB.b, a);
    }

    public IEnumerator FadeAndDestroy(GameObject go)
    {
        float t = 0f;
        var c = sprite.color;
        while (t < deathFadeTime)
        {
            t += Time.deltaTime;
            float k = 1f - Mathf.Clamp01(t / deathFadeTime);
            sprite.color = new Color(c.r, c.g, c.b, k);
            yield return null;
        }
        Destroy(go);
    }
} 
// ----- File: C_Health.cs ----- 
using System;
using UnityEngine;

[DisallowMultipleComponent]
public class C_Health : MonoBehaviour
{
    [Header("References (Only P or E _Stats)")]
    P_InputActions input;
    public P_Stats pStats;
    public E_Stats eStats;
    public C_FX fx;

    [Header("Debug Keys (N/B)")]
    public int takingDamageAmount = 1;
    public int healingAmount = 1;

    // Events
    public event Action<int> OnDamaged;
    public event Action<int> OnHealed;
    public event Action OnDied;

    // Accessors
    int MaxHP => pStats ? pStats.maxHP : eStats.maxHP;
    int CurrentHP { get => pStats ? pStats.currentHP : eStats.currentHP;
                    set { if (pStats) pStats.currentHP = value; else eStats.currentHP = value; } }
    public int AR => pStats ? pStats.AR : eStats.AR;
    public int MR => pStats ? pStats.MR : eStats.MR;
    public bool IsAlive => CurrentHP > 0;

    // cached delegates so we can unsubscribe
    Action<int> fxDamagedHandler;
    Action<int> fxHealedHandler;
    Action      fxDiedHandler;

    void Awake()
    {
        pStats  ??= GetComponent<P_Stats>();
        eStats  ??= GetComponent<E_Stats>();
        fx      ??= GetComponent<C_FX>();

        if (!pStats && !eStats) Debug.LogError($"{name}: C_Health needs P_Stats or E_Stats.", this);
        if (!fx) Debug.LogWarning($"{name}: C_FX not assigned; no flashes / death fade.", this);
    }

    void OnEnable()
    {
        input ??= new P_InputActions();
        input.Debug.Enable();

        if (fx != null)
        {
            fxDamagedHandler ??= _ => fx.FlashOnDamaged();
            fxHealedHandler  ??= _ => fx.FlashOnHealed();
            fxDiedHandler    ??= () => StartCoroutine(fx.FadeAndDestroy(gameObject));

            OnDamaged += fxDamagedHandler;
            OnHealed  += fxHealedHandler;
            OnDied    += fxDiedHandler;
        }
    }

    void OnDisable()
    {
        input?.Debug.Disable();

        if (fx != null)
        {
            OnDamaged -= fxDamagedHandler;
            OnHealed  -= fxHealedHandler;
            OnDied    -= fxDiedHandler;
        }
    }

    void Update()
    {
        if (input.Debug.OnDamaged.WasPressedThisFrame())
            ChangeHealth(-Mathf.Abs(takingDamageAmount));

        if (input.Debug.OnHealed.WasPressedThisFrame())
            ChangeHealth(Mathf.Abs(healingAmount));
    }

    // AD+AP combined calculation (armor/mres as % 0â€“100)
    public void ApplyDamage(int attackerAD, int attackerAP, int weaponAD, int weaponAP)
    {
        if (!IsAlive) return;

        int reqPhysical = Mathf.Max(0, attackerAD + weaponAD);
        int reqAbility  = Mathf.Max(0, attackerAP + weaponAP);

        float physRed = Mathf.Clamp01(AR / 100f);
        float abilRed = Mathf.Clamp01(MR / 100f);

        int phys  = Mathf.RoundToInt(reqPhysical * (1f - physRed));
        int abil  = Mathf.RoundToInt(reqAbility  * (1f - abilRed));
        int total = phys + abil;

        if (total > 0) ChangeHealth(-total);
    }
    
    // Single entrypoint for damage/heal
    public void ChangeHealth(int amount)
    {
        if (!IsAlive) return;

        int before    = CurrentHP;
        int after     = Mathf.Clamp(before + amount, 0, MaxHP);
        int actual    = after - before;
            CurrentHP = after;

        if (actual < 0) OnDamaged?.Invoke(-actual);
        else if (actual > 0) OnHealed?.Invoke(actual);

        if (after == 0) OnDied?.Invoke();
    }

    public void Kill() => ChangeHealth(-MaxHP);
}
 
