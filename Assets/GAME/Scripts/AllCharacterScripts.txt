// ----- File: C_AfterimageSpawner.cs -----
using UnityEngine;
using System.Collections;

[RequireComponent(typeof(SpriteRenderer))]
[DisallowMultipleComponent]

public class C_AfterimageSpawner : MonoBehaviour
{
    [Header("Trail")]
    public float spawnInterval = 0.035f;
    public float ghostLifetime = 0.20f;
    public Color ghostTint = new Color(0.7f, 0.7f, 0.7f, 0.7f);
    public int sortingOrderOffset = -1; // draw behind player

    // Cached
    SpriteRenderer sr;

    void Awake()
    {
        sr ??= GetComponent<SpriteRenderer>();
        if (!sr) Debug.LogWarning("C_AfterimageSpawner: SpriteRenderer missing on this GameObject.");
    }

    // Burst where every ghost uses the SAME locked sprite & flips (captured at dodge start)
    public void StartBurst(float duration, Sprite lockedSprite, bool lockedFlipX, bool lockedFlipY)
    {
        StartCoroutine(BurstRoutine(duration, lockedSprite, lockedFlipX, lockedFlipY));
    }

    IEnumerator BurstRoutine(float duration, Sprite lockedSprite, bool lockedFlipX, bool lockedFlipY)
    {
        // Spawn one immediately so the trail starts right away
        SpawnGhost(lockedSprite, lockedFlipX, lockedFlipY);

        float t = 0f;
        while (t < duration)
        {
            yield return new WaitForSeconds(spawnInterval);
            t += spawnInterval;
            SpawnGhost(lockedSprite, lockedFlipX, lockedFlipY);
        }
    }

    void SpawnGhost(Sprite sprite, bool flipX, bool flipY)
    {
        // Assumes sr exists & sprite provided (per your style: Inspector preconditions are correct)
        var g = new GameObject("Afterimage");
        g.transform.SetPositionAndRotation(transform.position, transform.rotation);
        g.transform.localScale = transform.localScale;

        var gsr = g.AddComponent<SpriteRenderer>();
        gsr.sprite = sprite;
        gsr.flipX = flipX;
        gsr.flipY = flipY;
        gsr.sortingLayerID = sr.sortingLayerID;
        gsr.sortingOrder = sr.sortingOrder + sortingOrderOffset;
        gsr.color = ghostTint;

        StartCoroutine(FadeAndDestroy(gsr));
    }

    IEnumerator FadeAndDestroy(SpriteRenderer gsr)
    {
        float t = 0f;
        Color start = gsr.color;
        while (t < ghostLifetime)
        {
            float a = Mathf.Lerp(start.a, 0f, t / ghostLifetime);
            gsr.color = new Color(start.r, start.g, start.b, a);
            t += Time.deltaTime;
            yield return null;
        }
        Destroy(gsr.gameObject);
    }
}

// ----- File: C_Dodge.cs -----
using UnityEngine;
using System.Collections;

[RequireComponent(typeof(Animator))]

[DisallowMultipleComponent]

public class C_Dodge : MonoBehaviour
{
    [Header("References")]
    C_Stats c_Stats;
    C_State c_State;

    Animator animator;
    P_InputActions input;

    [Header("Only choose one")]
    public P_Movement p_Movement;
    public E_Movement e_Movement;
    C_AfterimageSpawner afterimage;

    [Header("Player = true, Enemy = false")]
    public bool usePlayerInput = true;

    [Header("State (read-only)")]
    public bool IsDodging { get; private set; }
    public Vector2 ForcedVelocity => IsDodging ? forcedVelocity : Vector2.zero;

    float cooldownTimer;
    Vector2 forcedVelocity;

    void Awake()
    {
        animator    ??= GetComponent<Animator>();
        c_Stats     ??= GetComponent<C_Stats>();
        c_State     ??= GetComponent<C_State>();
        p_Movement  ??= GetComponent<P_Movement>();
        e_Movement  ??= GetComponent<E_Movement>();
        afterimage  ??= GetComponent<C_AfterimageSpawner>();

        input ??= new P_InputActions();

        if (!animator)                   Debug.LogError($"{name}: Animator in C_Dodge is missing.");
        if (!c_Stats)                    Debug.LogError($"{name}: C_Stats in C_Dodge is missing.");
        if (!p_Movement && !e_Movement)  Debug.LogError($"{name}: *_Movement in C_Dodge is missing.");
        if (!afterimage)                 Debug.LogError($"{name}: C_AfterimageSpawner in C_Dodge is missing.");
    }

    void OnEnable()
    {
        if (usePlayerInput) input.Player.Dodge.Enable();
    }

    void OnDisable()
    {
        if (usePlayerInput) input.Player.Dodge.Disable();
    }

    void Update()
    {
        if (cooldownTimer > 0f) cooldownTimer -= Time.deltaTime;
        if (!usePlayerInput) return;

        if (input.Player.Dodge.WasPressedThisFrame())
        {
            // Read facing from movement; fallback down if zero
            Vector2 dir = (p_Movement && p_Movement.lastMove != Vector2.zero) ? p_Movement.lastMove.normalized : Vector2.down;
            RequestDodge(dir);
        }
    }

    // External API for AI/other scripts
    public void RequestDodge(Vector2 dir)
    {
        if (c_State.lockDodge && c_State.Is(C_State.ActorState.Attack)) return;
        if (IsDodging) return;
        if (cooldownTimer > 0f) return;

        // Lock the CURRENT sprite BEFORE we switch to the Dodge state
        var sr = GetComponent<SpriteRenderer>();
        var lockedSprite = sr ? sr.sprite : null;
        bool lockedFlipX = sr ? sr.flipX : false;
        bool lockedFlipY = sr ? sr.flipY : false;

        // Animation-cancel on purpose

        // Duration is derived from distance & speed
        float duration = (c_Stats.dodgeSpeed > 0f) ? (c_Stats.dodgeDistance / c_Stats.dodgeSpeed) : 0f;

        // Enter dodge
        IsDodging = true;

        forcedVelocity = dir.normalized * c_Stats.dodgeSpeed;

        // Spawn trail using the locked sprite for the whole dodge
        afterimage?.StartBurst(duration, lockedSprite, lockedFlipX, lockedFlipY);

        StartCoroutine(DodgeRoutine(duration));
    }

    public IEnumerator DodgeRoutine(float duration)
    {
        yield return new WaitForSeconds(duration);

        forcedVelocity = Vector2.zero;
        IsDodging = false;
        cooldownTimer = c_Stats.dodgeCooldown;
    }
}

// ----- File: C_FX.cs -----
using System.Collections;
using UnityEngine;

[RequireComponent(typeof(SpriteRenderer))]

public class C_FX : MonoBehaviour
{
    [Header("References")]
    SpriteRenderer sr;

    [Header("Flash")]
    public float flashDuration = 0.1f;
    public Color healTint   = new Color(0.3f, 1f, 0.3f, 1f);
    public Color damageTint = new Color(1f, 0.3f, 0.3f, 1f);

    [Header("Death")]
    public float deathFadeTime = 1.5f;

    Color baseRGB;

    void Awake()
    {
        sr ??= GetComponent<SpriteRenderer>();
        if (!sr) Debug.LogError($"{name}: SpriteRenderer in C_FX missing.", this);

        baseRGB = sr.color;
    }

    public void FlashOnDamaged() => StartCoroutine(Flash(damageTint));
    public void FlashOnHealed()  => StartCoroutine(Flash(healTint));

    IEnumerator Flash(Color tint)
    {
        float a = sr.color.a;
        sr.color = new Color(tint.r, tint.g, tint.b, a);
        yield return new WaitForSeconds(flashDuration);
        sr.color = new Color(baseRGB.r, baseRGB.g, baseRGB.b, a);
    }

    public IEnumerator FadeAndDestroy(GameObject go)
    {
        float t = 0f;
        var c = sr.color;
        while (t < deathFadeTime)
        {
            t += Time.deltaTime;
            float k = 1f - Mathf.Clamp01(t / deathFadeTime);
            sr.color = new Color(c.r, c.g, c.b, k);
            yield return null;
        }
        Destroy(go);
    }
}

// ----- File: C_Health.cs -----
using System;
using UnityEngine;


[DisallowMultipleComponent]
public class C_Health : MonoBehaviour
{
    [Header("References")]
    public C_Stats c_Stats;
    public C_Dodge c_Dodge;
    C_FX fx;

    P_InputActions input;
    [Header("Allow Dodge/IFrames? (Only for Player)")]
    public bool useDodgeIFrames = true;

    [Header("Debug Keys (N/B)")]
    public int takingDamageAmount = 1;
    public int healingAmount = 1;

    // Events
    public event Action<int> OnDamaged;
    public event Action<int> OnHealed;
    public event Action OnDied;

    // Accessors
    int CurrentHP { get => c_Stats.currentHP; set => c_Stats.currentHP = value; }
    public bool IsAlive => CurrentHP > 0;

    // cached delegates so we can unsubscribe
    Action<int> fxDamagedHandler;
    Action<int> fxHealedHandler;
    Action      fxDiedHandler;

    void Awake()
    {
        c_Stats ??= GetComponent<C_Stats>();
        c_Dodge ??= GetComponent<C_Dodge>();
        fx      ??= GetComponent<C_FX>();

        if (!c_Stats)                    Debug.LogError($"{name}: C_Stats in C_Health missing.", this);
        if (!c_Dodge && useDodgeIFrames) Debug.LogError($"{name}: C_Dodge in C_Health missing.", this);
        if (!fx)                         Debug.LogWarning($"{name}: C_FX not assigned; no flashes / death fade.", this);
    }

    void OnEnable()
    {
        input ??= new P_InputActions();
        input.Debug.Enable();
        
        // subscribe to FX events
        fxDamagedHandler ??= _ => fx.FlashOnDamaged();
        fxHealedHandler  ??= _ => fx.FlashOnHealed();
        fxDiedHandler    ??= () => StartCoroutine(fx.FadeAndDestroy(gameObject));

        OnDamaged += fxDamagedHandler;
        OnHealed  += fxHealedHandler;
        OnDied    += fxDiedHandler;
    }

    void OnDisable()
    {
        input?.Debug.Disable();

        OnDamaged -= fxDamagedHandler;
        OnHealed  -= fxHealedHandler;
        OnDied    -= fxDiedHandler;
    }

    void Update()
    {
        // Debug keys
        if (input.Debug.OnDamaged.WasPressedThisFrame())
            ChangeHealth(-Mathf.Abs(takingDamageAmount));

        if (input.Debug.OnHealed.WasPressedThisFrame())
            ChangeHealth(Mathf.Abs(healingAmount));
    }

    // AD+AP combined calculation (armor/mres as % 0â€“100)
    public int ApplyDamage(int attackerAD, int attackerAP, int weaponAD, int weaponAP, float attackerArmorPen, float attackerMagicPen)
    {
        // Ignore if dead or dodging with IFrames
        if (!IsAlive) return 0;
        if (useDodgeIFrames && c_Dodge.IsDodging) return 0;

        // Calculate effective armor and magic resist after penetration
        float effectiveAR = c_Stats.AR * (1f - Mathf.Clamp01(attackerArmorPen / 100f));
        float effectiveMR = c_Stats.MR * (1f - Mathf.Clamp01(attackerMagicPen / 100f));

        // Calculate damage reduction from effective armor and magic resist
        float damageReductionAR = 1f - Mathf.Clamp01(effectiveAR / 100f);
        float damageReductionMR = 1f - Mathf.Clamp01(effectiveMR / 100f);

        // Final damage calculation
        int total =
            Mathf.RoundToInt((attackerAD + weaponAD) * damageReductionAR) +
            Mathf.RoundToInt((attackerAP + weaponAP) * damageReductionMR);

        // Clamp to valid range and apply
        int before = CurrentHP;
        int dealt = Mathf.Clamp(total, 0, before);
        if (dealt > 0) ChangeHealth(-dealt);
        return dealt;
    }

    // Single entrypoint for damage/heal
    public void ChangeHealth(int amount)
    {
        // Ignore if dead, healing 0, or dodging with IFrames
        if (!IsAlive || (amount < 0 && useDodgeIFrames && c_Dodge.IsDodging)) return;

        // Clamp to valid range and apply
        int before    = CurrentHP;
        int after     = Mathf.Clamp(before + amount, 0, c_Stats.maxHP);
        int actual    = after - before;
            CurrentHP = after;

        // Invoke events
        if      (actual < 0) OnDamaged?.Invoke(-actual);
        else if (actual > 0) OnHealed?.Invoke(actual);
        if      (after == 0) OnDied?.Invoke();
    }

    // Kill instantly
    public void Kill() => ChangeHealth(-c_Stats.maxHP);
}

// ----- File: C_State.cs -----
using UnityEngine;

[RequireComponent(typeof(Animator))]
[RequireComponent(typeof(Rigidbody2D))]

[DisallowMultipleComponent]

public class C_State : MonoBehaviour
{   
    // Finite State Machine
    public enum ActorState { Idle, Move, Attack, Dodge, Wander, Dead }

    [Header("References(Only Player/Enemy/NPC)")]
    Animator animator;
    Rigidbody2D rb;

    public P_Movement p_Movement;
    public P_Combat   p_Combat;
    public E_Movement e_Movement;
    public E_Combat   e_Combat;

    public C_Dodge    c_Dodge;
    C_Health   c_Health;

    [Header("Locks Certain Actions")]
    public bool lockMoveWhileAttacking = true;
    public bool lockDodge = true;

    [Header("Wandering Ability")]
    public bool canWander;

    // Current finite state
    public ActorState CurrentState = ActorState.Idle;

    const float MIN_DISTANCE = 0.0001f;

    void Awake()
    {
        rb          ??= GetComponent<Rigidbody2D>();
        animator    ??= GetComponent<Animator>();

        p_Movement  ??= GetComponent<P_Movement>();
        p_Combat    ??= GetComponent<P_Combat>();
        e_Movement  ??= GetComponent<E_Movement>();
        e_Combat    ??= GetComponent<E_Combat>();

        c_Dodge     ??= GetComponent<C_Dodge>();
        c_Health    ??= GetComponent<C_Health>();

        if (!rb)                                     Debug.LogError($"{name}: Rigidbody2D in C_State missing.");
        if (!animator)                               Debug.LogError($"{name}: Animator in C_State missing.");
        if (!p_Movement && !e_Movement) Debug.LogError($"{name}: *_Movement/C_Wander is missing.");
        if (!p_Combat && !e_Combat)     Debug.LogError($"{name}: *_Combat/C_Wander is missing.");
    }

    void OnEnable()
    {
        c_Health.OnDied += OnDiedHandler;
    }

    void OnDisable()
    {
        c_Health.OnDied -= OnDiedHandler;
    }

    // Handle death
    void OnDiedHandler()
    {
        // lock movement
        p_Movement?.SetDisabled(true);
        e_Movement?.SetDisabled(true);

        // play death animation
        animator.SetTrigger("Die");

        // stop wandering and freeze state at Dead (not for player)

        rb.linearVelocity = Vector2.zero;
        CurrentState = ActorState.Dead;
    }

    // Update is called once per frame
    void Update()
    {
        // Pick next state
        var next = PickState();
        if (next != CurrentState) CurrentState = next;
        ApplyAnimator(CurrentState);
    }

    // Public API for Enum
    public bool Is(ActorState s)   => CurrentState == s;

    //  Public API for Bool
    public bool CheckIsBusy()
    {
        // busy if dodging, or attacking and movement is locked
        if (Is(ActorState.Dodge)) return true;
        if (Is(ActorState.Attack) && lockMoveWhileAttacking) return true;
        return false;
    }
    
    // Pick the correct state
    ActorState PickState()
    {
        // If dead, remain dead (no further transitions)
        if (CurrentState == ActorState.Dead || !c_Health.IsAlive)
            return ActorState.Dead;

        // Dodge is optional
        if (c_Dodge && c_Dodge.IsDodging) return ActorState.Dodge;

        // Attack
        if ((p_Combat && p_Combat.isAttacking) || (e_Combat && e_Combat.isAttacking))
            return ActorState.Attack;

        // Wander (must have wander component active & allowed) takes precedence over plain Move


        // Movement inferred from body velocity (respects ForcedVelocity/knockback) for non-wander movement
        if (rb.linearVelocity.sqrMagnitude > MIN_DISTANCE) return ActorState.Move;

        return ActorState.Idle;
    }

    // Single source of truth for animator bools
    void ApplyAnimator(ActorState s)
    {
        animator.SetBool("isDodging", s == ActorState.Dodge);
        animator.SetBool("isAttacking", s == ActorState.Attack);
        animator.SetBool("isMoving", s == ActorState.Move);
        animator.SetBool("isWandering", s == ActorState.Wander);
    }

    // Public API for Floats
    public void UpdateAnimDirections(Vector2 moveAxis, Vector2 lastMove)
    {
        bool busy = CheckIsBusy();
        if (!busy && moveAxis.sqrMagnitude > MIN_DISTANCE)
        {
            animator.SetFloat("moveX", moveAxis.x);
            animator.SetFloat("moveY", moveAxis.y);
        }
        animator.SetFloat("idleX", lastMove.x);
        animator.SetFloat("idleY", lastMove.y);
    }

    // Public API for Attack direction
    public void SetAttackDirection(Vector2 dir)
    {
        animator.SetFloat("atkX", dir.x);
        animator.SetFloat("atkY", dir.y);
    }

    // Get current attack/idle direction from animator
    public Vector2 GetAttackDirection()
    {
        return new Vector2(animator.GetFloat("atkX"), animator.GetFloat("atkY"));
    }
    public Vector2 GetIdleDirection()
    {
        return new Vector2(animator.GetFloat("idleX"), animator.GetFloat("idleY"));
    }
}

// ----- File: C_Stats.cs -----
using UnityEngine;

[DisallowMultipleComponent]
public class C_Stats : MonoBehaviour
{
    [Header("Core Stats")]
    public int AD = 1; // Attack Damage
    public int AP = 0; // Ability Power
    public float MS = 5f; // Move Speed

    public int maxHP = 10;
    public int currentHP = 10;
    public int AR = 0; // Armor
    public int MR = 0; // Magic Resist
    public float KR = 10f; // knockback Resist

    [Header("Special Stats")]
    public float lifesteal = 0f;
    public float armorPen = 0f;
    public float magicPen = 0f;

    [Header("Combat")]
    public float attackCooldown = 1.2f;
    public int   collisionDamage = 1;   // per-enemy
    public float collisionTick   = 0.5f; // seconds between ticks while touching

    [Header("Dodge (used by Player; Enemy can ignore)")]
    public float dodgeSpeed = 11f;
    public float dodgeDistance = 2.0f;
    public float dodgeCooldown = 0.45f;

    [Header("Placeholders")]
    public float knockbackForce = 0f;
    public float stunTime = 0f;
}

// ----- File: State_Attack.cs -----
using System.Collections;
using UnityEngine;

[RequireComponent(typeof(Rigidbody2D))]
[RequireComponent(typeof(Animator))]
[DisallowMultipleComponent]

public class State_Attack : MonoBehaviour
{
    [Header("Animation States")]
    public LayerMask playerLayer;

    [Header("Timing")]
    public float attackCooldown = 0.80f;
    public float attackDuration = 0.45f;
    public float hitDelay       = 0.15f;

    // Ranges are injected by controller
    float attackRange    = 1.2f;

    [Header("Weapon")]
    public W_Base activeWeapon;

    [Header("Knockback")]
    public float knockbackRecovery = 30f;

    // Cache
    Rigidbody2D rb;
    Animator anim;

    // Runtime variables
    Transform target;
    Vector2 knockback, lastFace = Vector2.down;
    float cooldownTimer;
    bool isAttacking;

    public bool IsAttacking => isAttacking;

    void Awake()
    {
        rb           = GetComponent<Rigidbody2D>();
        anim         = GetComponent<Animator>();
        activeWeapon = GetComponentInChildren<W_Base>();

        if (!rb) Debug.LogError($"{name}: Rigidbody2D missing on State_Attack.");
        if (!anim) Debug.LogError($"{name}: Animator missing on State_Attack.");
    }

    void OnEnable()
    {
        // anim.SetBool("isAttacking", false);
    }

    void OnDisable()
    {
        // anim.SetBool("isAttacking", false);
        isAttacking = false;
        rb.linearVelocity = Vector2.zero;
    }

    void Update()
    {
        if (cooldownTimer > 0f) cooldownTimer -= Time.deltaTime;
        
        // Process attack logic only when we have a target
        if (target)
        {
            // Inner ring test (collider-based so edge contact counts)
            bool inInner = Physics2D.OverlapCircle((Vector2)transform.position, attackRange, playerLayer);

            Vector2 to = (Vector2)target.position - (Vector2)transform.position;
            float d = to.magnitude;
            Vector2 dir = d > 0.0001f ? to.normalized : lastFace;

            // Continuously update idle facing (even during attack so idle pose rotates, atkX/atkY stay locked)
            UpdateIdleFacing(isAttacking ? lastFace : dir);

            // Start attack immediately upon entering inner ring and off cooldown
            if (!isAttacking && inInner && cooldownTimer <= 0f)
                StartCoroutine(AttackRoutine(dir));
        }
    }

    void FixedUpdate()
    {
        if (knockback.sqrMagnitude > 0f)
        {
            float step = knockbackRecovery * Time.fixedDeltaTime;
            knockback = Vector2.MoveTowards(knockback, Vector2.zero, step);
            rb.linearVelocity = knockback;
        }
        else
        {
            rb.linearVelocity = Vector2.zero;
        }
    }

    public void SetTarget(Transform t) => target = t;
    public void SetRanges(float attackRange) => this.attackRange = attackRange;

    // NON-INTERUPTIBLE ATTACK ROUTINE
    // lock facing, play clip, wait for hit, wait for end, cooldown
    IEnumerator AttackRoutine(Vector2 dirAtStart)
    {
        isAttacking = true;
        anim.SetBool("isAttacking", true);

        // Lock attack facing into atkX/atkY once at the start
        if (dirAtStart.sqrMagnitude > 0f) lastFace = dirAtStart.normalized;
        anim.SetFloat("atkX", lastFace.x);
        anim.SetFloat("atkY", lastFace.y);

        // Movement stays zero while striking; just update idle facing
        UpdateIdleFacing(lastFace);

        // Wait for hitDelay then start the hit
        yield return new WaitForSeconds(hitDelay);
        activeWeapon?.Attack(lastFace);
        yield return new WaitForSeconds(Mathf.Max(0f, attackDuration - hitDelay));

        // Reset the attack cooldown
        cooldownTimer = attackCooldown;
        isAttacking = false;
        anim.SetBool("isAttacking", false);
    }

    void UpdateIdleFacing(Vector2 faceDir)
    {
        // moveX/moveY are zero in attack state; idleX/idleY carry facing
        anim.SetFloat("moveX", 0f);
        anim.SetFloat("moveY", 0f);

        Vector2 f = faceDir.sqrMagnitude > 0f ? faceDir.normalized : lastFace;
        anim.SetFloat("idleX", f.x);
        anim.SetFloat("idleY", f.y);
    }

    public void ReceiveKnockback(Vector2 impulse) => knockback += impulse;

}

// ----- File: State_Chase.cs -----
using UnityEngine;

[RequireComponent(typeof(Rigidbody2D))]
[RequireComponent(typeof(Animator))]
[RequireComponent(typeof(C_Stats))]
[DisallowMultipleComponent]

public class State_Chase : MonoBehaviour
{
    [Header("Tuning")]
    public float stopBuffer = 0.10f;

    // Ranges are injected by controller
    float attackRange    = 1.2f;

    // Cache
    Rigidbody2D rb;
    Animator anim;
    C_Stats stats;

    // Runtime
    Transform target;
    Vector2 velocity, knockback, lastMove = Vector2.down;

    void Awake()
    {
        rb    ??= GetComponent<Rigidbody2D>();
        anim  ??= GetComponent<Animator>();
        stats ??= GetComponent<C_Stats>();

        if (!stats) Debug.LogError($"{name}: C_Stats missing on State_Chase.");
    }

    void OnEnable()
    {
        anim.SetBool("isMoving", false);
    }

    void OnDisable()
    {
        velocity = Vector2.zero;
        rb.linearVelocity = Vector2.zero;
        anim.SetBool("isMoving", false);
    }

    public void SetTarget(Transform t) => target = t;
    public void SetRanges(float attackRange) => this.attackRange = attackRange;

    void Update()
    {
        // No target = no movement
        if (!target)
        {
            velocity = Vector2.zero;
            UpdateFloats(Vector2.zero);
            anim.SetBool("isMoving", false);
            return;
        }

        Vector2 toTarget  = (Vector2)target.position - (Vector2)transform.position;
        float   distance  = toTarget.magnitude;
        Vector2 direction = distance > 0.0001f ? toTarget.normalized : lastMove;

        // Move toward target while outside inner ring
        velocity = (distance > (attackRange + stopBuffer)) ? direction * stats.MS : Vector2.zero;
        bool moving = velocity.sqrMagnitude > 0f;
        anim.SetBool("isMoving", moving);

        // Update animator direction floats
        UpdateFloats(velocity);
    }

    void FixedUpdate()
    {
        Vector2 final = velocity + knockback;
        rb.linearVelocity = final;

        if (knockback.sqrMagnitude > 0f)
        {
            float step = stats.KR * Time.fixedDeltaTime;
            knockback = Vector2.MoveTowards(knockback, Vector2.zero, step);
        }
    }

    void UpdateFloats(Vector2 move)
    {
        if (move.sqrMagnitude > 0f) lastMove = move.normalized;
        anim.SetFloat("moveX", move.x);
        anim.SetFloat("moveY", move.y);
        anim.SetFloat("idleX", lastMove.x);
        anim.SetFloat("idleY", lastMove.y);
    }

    public void ReceiveKnockback(Vector2 impulse) => knockback += impulse;
}

// ----- File: State_Idle.cs -----
using UnityEngine;

public class State_Idle : MonoBehaviour
{
    [Header("References")]
    public Rigidbody2D rb;
    public Animator characterAnimator;

    void Awake()
    {
        rb                ??= GetComponent<Rigidbody2D>();
        characterAnimator ??= GetComponentInChildren<Animator>();
        if (!rb) Debug.LogError($"{name}: Rigidbody2D missing in NPC_State_Idle.");
    }

    void OnEnable()
    {
        rb.linearVelocity = Vector2.zero;
        var a = characterAnimator;
        if (!a) return;
        a.SetBool("isMoving", false);
        a.SetBool("isWandering", false);
        a.SetBool("isAttacking", false);
        // Optionally set idleX/idleY to keep the last facing if you want
    }

}

// ----- File: State_Talk.cs -----
using UnityEngine;

public class State_Talk : MonoBehaviour
{
    [Header("References")]
    public Rigidbody2D rb;
    public Animator characterAnim;   // NPC sprite animator (Idle/Walk graph)
    public Animator interactAnim;    // icon animator with states: Idle (default), WantToTalk

    // Facing direction set by the controller
    Vector2 facingDir; 

    void Awake()
    {
        rb                ??= GetComponent<Rigidbody2D>();
        characterAnim      ??= GetComponentInChildren<Animator>();

        if (!rb) Debug.LogError($"{name}: Rigidbody2D missing in NPC_State_Talk.");
    }

    void OnEnable()
    {
        // Stop movement and swallow any external forces
        rb.linearVelocity = Vector2.zero;
        rb.bodyType = RigidbodyType2D.Kinematic;

        // Face a direction
        characterAnim?.SetFloat("idleX", facingDir.x);
        characterAnim?.SetFloat("idleY", facingDir.y);

        // Play animations
        characterAnim?.Play("Idle");       // idle while talking
        interactAnim?.Play("WantToTalk");  // open talk icon
    }

    void OnDisable()
    {
        rb.bodyType = RigidbodyType2D.Dynamic;  // restore normal physics
        interactAnim?.Play("Idle");        // close talk icon
        facingDir = Vector2.zero;           // clear after use
    }

    // API for controller
    public void FaceTarget(Transform target)
    {
        facingDir = ((Vector2)target.position - (Vector2)transform.position).normalized;
    }
}

// ----- File: State_Wander.cs -----
// NPC_State_Wander.cs
using UnityEngine;
using System.Collections;

[RequireComponent(typeof(Rigidbody2D))]
[RequireComponent(typeof(Animator))]
[RequireComponent(typeof(C_Stats))]
[DisallowMultipleComponent]

// Exclusive wander state for NPCs (tutorial-style).
// Does NOT depend on C_State. Single writer of rb.linearVelocity while enabled.
public class State_Wander : MonoBehaviour
{
    [Header("References")]
    Rigidbody2D rb;
    Animator anim;  // NPC sprite animator (Idle/Walk graph)
    C_Stats c_Stats;

    [Header("Wander Area")]
    public Vector2 startCenter;
    public float width = 6f;
    public float height = 4f;

    [Header("Movement")]
    public float pauseDuration = 1f; // idle time at edges / on bump

    [Header("Animation")]
    public string idleState = "Idle";
    public string walkState = "Walk";

    // runtime
    Vector2 destination;
    Vector2 dir;
    Vector2 lastMove;
    bool isWandering;
    const float MIN_DISTANCE = 0.1f;

    void Awake()
    {
        rb = GetComponent<Rigidbody2D>();
        anim = GetComponentInChildren<Animator>();
        c_Stats = GetComponent<C_Stats>();

        if (!rb) Debug.LogError($"{name}: Rigidbody2D missing in NPC_State_Wander.");
        if (!c_Stats) Debug.LogError($"{name}: C_Stats missing in NPC_State_Wander.");
        if (!anim) Debug.LogError($"{name}: Animator (in children) missing in NPC_State_Wander.");

        // Use current spawn as center by default
        if (startCenter == Vector2.zero) startCenter = (Vector2)transform.position;
    }

    void OnEnable()
    {
        isWandering = true;
        anim.SetBool("isWandering", true);
        rb.bodyType = RigidbodyType2D.Dynamic;
        StopAllCoroutines();
        StartCoroutine(PauseAndPickNewDestination());
    }

    void OnDisable()
    {
        anim.SetBool("isWandering", false);
        StopAllCoroutines();
        isWandering = false;
        if (rb) rb.linearVelocity = Vector2.zero;
    }

    void Update()
    {
        if (!isWandering) return;

        if (Vector2.Distance(transform.position, destination) < MIN_DISTANCE)
        {
            StopAllCoroutines();
            StartCoroutine(PauseAndPickNewDestination());
            return;
        }

        dir = (destination - (Vector2)transform.position).normalized;

        if (dir.sqrMagnitude > 0f) lastMove = dir;

        // Update animator floats to keep facing consistent
        anim.SetFloat("moveX", dir.x);
        anim.SetFloat("moveY", dir.y);
        anim.SetFloat("idleX", lastMove.x);
        anim.SetFloat("idleY", lastMove.y);
    }

    void FixedUpdate()
    {
        if (!isWandering)
        {
            if (rb.linearVelocity != Vector2.zero) rb.linearVelocity = Vector2.zero;
            return;
        }

        rb.linearVelocity = dir * c_Stats.MS; // speed from stats directly
    }

    IEnumerator PauseAndPickNewDestination()
    {
        // pause
        isWandering = false;
        rb.linearVelocity = Vector2.zero;
        anim?.Play(idleState);

        yield return new WaitForSeconds(pauseDuration);

        // new target + resume
        destination = GetRandomEdgePoint();
        isWandering = true;
        anim?.Play(walkState);
    }

    Vector2 GetRandomEdgePoint()
    {
        float halfW = width * 0.5f;
        float halfH = height * 0.5f;

        int edge = Random.Range(0, 4); // 0=Left, 1=Right, 2=Bottom, 3=Top
        switch (edge)
        {
            case 0: // Left
                return new Vector2(startCenter.x - halfW,
                    Random.Range(startCenter.y - halfH, startCenter.y + halfH));
            case 1: // Right
                return new Vector2(startCenter.x + halfW,
                    Random.Range(startCenter.y - halfH, startCenter.y + halfH));
            case 2: // Bottom
                return new Vector2(
                    Random.Range(startCenter.x - halfW, startCenter.x + halfW),
                    startCenter.y - halfH);
            case 3: // Top
                return new Vector2(
                    Random.Range(startCenter.x - halfW, startCenter.x + halfW),
                    startCenter.y + halfH);
        }
        return startCenter;
    }

    void OnCollisionEnter2D(Collision2D _)
    {
        if (isWandering) StartCoroutine(PauseAndPickNewDestination());
    }

    void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.blue;
        var size = new Vector3(width, height, 0f);
        var center = Application.isPlaying ? (Vector3)startCenter : transform.position;
        Gizmos.DrawWireCube(center, size);
    }
}

