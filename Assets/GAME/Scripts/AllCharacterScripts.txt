// ----- File: B_Controller.cs -----
using UnityEngine;

[DisallowMultipleComponent]
[RequireComponent(typeof(Rigidbody2D))]
public class B_Controller : MonoBehaviour, I_Controller
{
    public enum BState { Idle, Wander, Chase, Attack }

    [Header("States")]
    public BState defaultState = BState.Idle;
    public State_Idle        idle;
    public State_Wander      wander;
    public State_Chase_Boss  chase;
    public State_Attack_Boss attack;

    [Header("Detection")]
    [Min(0.1f)] public float detectionRange = 5f;
    [Min(0.1f)] public float attackRange    = 1.6f;
    public LayerMask playerLayer;
    public float attackStartBuffer = 0.20f;

    Rigidbody2D rb;
    Vector2 desiredVelocity;

    Transform target;
    float inRangeTimer;
    BState current;

    void Awake()
    {
        idle   ??= GetComponent<State_Idle>();
        wander ??= GetComponent<State_Wander>();
        chase  ??= GetComponent<State_Chase_Boss>();
        attack ??= GetComponent<State_Attack_Boss>();
        rb     ??= GetComponent<Rigidbody2D>();
    }

    void OnEnable()
    {
        desiredVelocity = Vector2.zero;
        if (rb) rb.linearVelocity = Vector2.zero;

        chase?.SetRanges(attackRange);
        attack?.SetRanges(attackRange);
        SwitchState(defaultState);
    }

    void OnDisable()
    {
        if (idle)   idle.enabled   = false;
        if (wander) wander.enabled = false;
        if (chase)  chase.enabled  = false;
        if (attack) attack.enabled = false;

        desiredVelocity = Vector2.zero;
        if (rb) rb.linearVelocity = Vector2.zero;
    }

    // -------- I_Controller --------
    public void SetDesiredVelocity(Vector2 v) => desiredVelocity = v;

    void FixedUpdate()
    {
        if (!rb) return;
        rb.linearVelocity = desiredVelocity;
    }

    void Update()
    {
        Vector2 pos = transform.position;

        var cAtk = Physics2D.OverlapCircle(pos, attackRange,    playerLayer);
        var cDet = cAtk ?? Physics2D.OverlapCircle(pos, detectionRange, playerLayer);

        bool inAttack = cAtk;
        bool inDetect = cDet;

        if (inDetect) target = cDet.transform;

        inRangeTimer = inAttack ? inRangeTimer + Time.deltaTime : 0f;
        bool readyMelee = inAttack && inRangeTimer >= attackStartBuffer;

        // ask the boss state if special is available now (uses timing reach, stop-short, y gate)
        bool readySpecial = false;
        if (attack && target)
            readySpecial = attack.CanSpecialNow(transform.position, target.position);

        bool attackingNow = attack && attack.IsAttacking;

        var desired =
            attackingNow   ? BState.Attack :
            readySpecial   ? BState.Attack :
            readyMelee     ? BState.Attack :
            inDetect       ? BState.Chase  :
                             defaultState;

        if (desired != current) SwitchState(desired);
    }

    public void SwitchState(BState s)
    {
        current = s;

        if (idle)   idle.enabled   = (s == BState.Idle);
        if (wander) wander.enabled = (s == BState.Wander);
        if (chase)  chase.enabled  = (s == BState.Chase);
        if (attack) attack.enabled = (s == BState.Attack);

        if (s == BState.Chase)
        {
            chase?.SetTarget(target);
            chase?.SetRanges(attackRange);
            desiredVelocity = Vector2.zero;
        }
        else if (s == BState.Attack)
        {
            attack?.SetTarget(target);
            attack?.SetRanges(attackRange);
            desiredVelocity = Vector2.zero;
        }
        else desiredVelocity = Vector2.zero;
    }

    void OnDrawGizmosSelected()
    {
        Gizmos.color = new Color(1f, 0.65f, 0f);
        Gizmos.DrawWireSphere(transform.position, detectionRange);

        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(transform.position, attackRange);
    }
}

// ----- File: C_AfterimageSpawner.cs -----
using UnityEngine;
using System.Collections;

[RequireComponent(typeof(SpriteRenderer))]
[DisallowMultipleComponent]

public class C_AfterimageSpawner : MonoBehaviour
{
    [Header("Trail")]
    public float spawnInterval = 0.035f;
    public float ghostLifetime = 0.20f;
    public Color ghostTint = new Color(0.7f, 0.7f, 0.7f, 0.7f);
    public int sortingOrderOffset = -1; // draw behind player

    // Cached
    SpriteRenderer sr;

    void Awake()
    {
        sr ??= GetComponent<SpriteRenderer>();
        if (!sr) Debug.LogWarning("C_AfterimageSpawner: SpriteRenderer missing on this GameObject.");
    }

    // Burst where every ghost uses the SAME locked sprite & flips (captured at dodge start)
    public void StartBurst(float duration, Sprite lockedSprite, bool lockedFlipX, bool lockedFlipY)
    {
        StartCoroutine(BurstRoutine(duration, lockedSprite, lockedFlipX, lockedFlipY));
    }

    IEnumerator BurstRoutine(float duration, Sprite lockedSprite, bool lockedFlipX, bool lockedFlipY)
    {
        // Spawn one immediately so the trail starts right away
        SpawnGhost(lockedSprite, lockedFlipX, lockedFlipY);

        float t = 0f;
        while (t < duration)
        {
            yield return new WaitForSeconds(spawnInterval);
            t += spawnInterval;
            SpawnGhost(lockedSprite, lockedFlipX, lockedFlipY);
        }
    }

    void SpawnGhost(Sprite sprite, bool flipX, bool flipY)
    {
        // Assumes sr exists & sprite provided (per your style: Inspector preconditions are correct)
        var g = new GameObject("Afterimage");
        g.transform.SetPositionAndRotation(transform.position, transform.rotation);
        g.transform.localScale = transform.localScale;

        var gsr = g.AddComponent<SpriteRenderer>();
        gsr.sprite = sprite;
        gsr.flipX = flipX;
        gsr.flipY = flipY;
        gsr.sortingLayerID = sr.sortingLayerID;
        gsr.sortingOrder = sr.sortingOrder + sortingOrderOffset;
        gsr.color = ghostTint;

        StartCoroutine(FadeAndDestroy(gsr));
    }

    IEnumerator FadeAndDestroy(SpriteRenderer gsr)
    {
        float t = 0f;
        Color start = gsr.color;
        while (t < ghostLifetime)
        {
            float a = Mathf.Lerp(start.a, 0f, t / ghostLifetime);
            gsr.color = new Color(start.r, start.g, start.b, a);
            t += Time.deltaTime;
            yield return null;
        }
        Destroy(gsr.gameObject);
    }
}

// ----- File: C_Dodge.cs -----
using UnityEngine;
using System.Collections;

[RequireComponent(typeof(Animator))]

[DisallowMultipleComponent]

public class C_Dodge : MonoBehaviour
{
    [Header("References")]
    C_Stats c_Stats;
    C_State c_State;

    Animator animator;
    P_InputActions input;

    [Header("Only choose one")]
    public P_Movement p_Movement;
    public E_Movement e_Movement;
    C_AfterimageSpawner afterimage;

    [Header("Player = true, Enemy = false")]
    public bool usePlayerInput = true;

    [Header("State (read-only)")]
    public bool IsDodging { get; private set; }
    public Vector2 ForcedVelocity => IsDodging ? forcedVelocity : Vector2.zero;

    float cooldownTimer;
    Vector2 forcedVelocity;

    void Awake()
    {
        animator    ??= GetComponent<Animator>();
        c_Stats     ??= GetComponent<C_Stats>();
        c_State     ??= GetComponent<C_State>();
        p_Movement  ??= GetComponent<P_Movement>();
        e_Movement  ??= GetComponent<E_Movement>();
        afterimage  ??= GetComponent<C_AfterimageSpawner>();

        input ??= new P_InputActions();

        if (!animator)                   Debug.LogError($"{name}: Animator is missing in C_Dodge");
        if (!c_Stats)                    Debug.LogError($"{name}: C_Stats is missing in C_Dodge");
        if (!p_Movement && !e_Movement)  Debug.LogError($"{name}: *_Movement is missing in C_Dodge");
        if (!afterimage)                 Debug.LogError($"{name}: C_AfterimageSpawner is missing in C_Dodge");
    }

    void OnEnable()
    {
        if (usePlayerInput) input.Player.Dodge.Enable();
    }

    void OnDisable()
    {
        if (usePlayerInput) input.Player.Dodge.Disable();
    }

    void Update()
    {
        if (cooldownTimer > 0f) cooldownTimer -= Time.deltaTime;
        if (!usePlayerInput) return;

        if (input.Player.Dodge.WasPressedThisFrame())
        {
            // Read facing from movement; fallback down if zero
            Vector2 dir = (p_Movement && p_Movement.lastMove != Vector2.zero) ? p_Movement.lastMove.normalized : Vector2.down;
            RequestDodge(dir);
        }
    }

    // External API for AI/other scripts
    public void RequestDodge(Vector2 dir)
    {
        if (c_State.lockDodge && c_State.Is(C_State.ActorState.Attack)) return;
        if (IsDodging) return;
        if (cooldownTimer > 0f) return;

        // Lock the CURRENT sprite BEFORE we switch to the Dodge state
        var sr = GetComponent<SpriteRenderer>();
        var lockedSprite = sr ? sr.sprite : null;
        bool lockedFlipX = sr ? sr.flipX : false;
        bool lockedFlipY = sr ? sr.flipY : false;

        // Animation-cancel on purpose

        // Duration is derived from distance & speed
        float duration = (c_Stats.dodgeSpeed > 0f) ? (c_Stats.dodgeDistance / c_Stats.dodgeSpeed) : 0f;

        // Enter dodge
        IsDodging = true;

        forcedVelocity = dir.normalized * c_Stats.dodgeSpeed;

        // Spawn trail using the locked sprite for the whole dodge
        afterimage?.StartBurst(duration, lockedSprite, lockedFlipX, lockedFlipY);

        StartCoroutine(DodgeRoutine(duration));
    }

    public IEnumerator DodgeRoutine(float duration)
    {
        yield return new WaitForSeconds(duration);

        forcedVelocity = Vector2.zero;
        IsDodging = false;
        cooldownTimer = c_Stats.dodgeCooldown;
    }
}

// ----- File: C_FX.cs -----
using System.Collections;
using UnityEngine;

[RequireComponent(typeof(SpriteRenderer))]

public class C_FX : MonoBehaviour
{
    [Header("References")]
    SpriteRenderer sr;

    [Header("Flash")]
    public float flashDuration = 0.1f;
    public Color healTint   = new Color(0.3f, 1f, 0.3f, 1f);
    public Color damageTint = new Color(1f, 0.3f, 0.3f, 1f);

    [Header("Death")]
    public float deathFadeTime = 1.5f;

    Color baseRGB;

    void Awake()
    {
        sr ??= GetComponent<SpriteRenderer>();
        if (!sr) Debug.LogError($"{name}: SpriteRenderer is missing in C_FX");

        baseRGB = sr.color;
    }

    public void FlashOnDamaged() => StartCoroutine(Flash(damageTint));
    public void FlashOnHealed()  => StartCoroutine(Flash(healTint));

    IEnumerator Flash(Color tint)
    {
        float a = sr.color.a;
        sr.color = new Color(tint.r, tint.g, tint.b, a);
        yield return new WaitForSeconds(flashDuration);
        sr.color = new Color(baseRGB.r, baseRGB.g, baseRGB.b, a);
    }

    public IEnumerator FadeAndDestroy(GameObject go)
    {
        float t = 0f;
        var c = sr.color;
        while (t < deathFadeTime)
        {
            t += Time.deltaTime;
            float k = 1f - Mathf.Clamp01(t / deathFadeTime);
            sr.color = new Color(c.r, c.g, c.b, k);
            yield return null;
        }
        Destroy(go);
    }
}

// ----- File: C_Health.cs -----
using System;
using UnityEngine;


[DisallowMultipleComponent]
public class C_Health : MonoBehaviour
{
    [Header("References")]
    public C_Stats c_Stats;
    public C_Dodge c_Dodge;
    C_FX fx;

    P_InputActions input;
    [Header("Allow Dodge/IFrames? (Only for Player)")]
    public bool useDodgeIFrames = true;

    [Header("Debug Keys (N/B)")]
    public int takingDamageAmount = 1;
    public int healingAmount = 1;

    // Events
    public event Action<int> OnDamaged;
    public event Action<int> OnHealed;
    public event Action OnDied;

    // Accessors
    int CurrentHP { get => c_Stats.currentHP; set => c_Stats.currentHP = value; }
    public bool IsAlive => CurrentHP > 0;

    // cached delegates so we can unsubscribe
    Action<int> fxDamagedHandler;
    Action<int> fxHealedHandler;
    Action      fxDiedHandler;

    void Awake()
    {
        c_Stats ??= GetComponent<C_Stats>();
        c_Dodge ??= GetComponent<C_Dodge>();
        fx      ??= GetComponent<C_FX>();

        if (!c_Stats)                    Debug.LogError($"{name}: C_Stats is missing in C_Health");
        if (!c_Dodge && useDodgeIFrames) Debug.LogError($"{name}: C_Dodge is missing in C_Health");
        if (!fx)                         Debug.LogWarning($"{name}: C_FX not assigned; no flashes / death fade.", this);
    }

    void OnEnable()
    {
        input ??= new P_InputActions();
        input.Debug.Enable();
        
        // subscribe to FX events
        fxDamagedHandler ??= _ => fx.FlashOnDamaged();
        fxHealedHandler  ??= _ => fx.FlashOnHealed();
        fxDiedHandler    ??= () => StartCoroutine(fx.FadeAndDestroy(gameObject));

        OnDamaged += fxDamagedHandler;
        OnHealed  += fxHealedHandler;
        OnDied    += fxDiedHandler;
    }

    void OnDisable()
    {
        input?.Debug.Disable();

        OnDamaged -= fxDamagedHandler;
        OnHealed  -= fxHealedHandler;
        OnDied    -= fxDiedHandler;
    }

    void Update()
    {
        // Debug keys
        if (input.Debug.OnDamaged.WasPressedThisFrame())
            ChangeHealth(-Mathf.Abs(takingDamageAmount));

        if (input.Debug.OnHealed.WasPressedThisFrame())
            ChangeHealth(Mathf.Abs(healingAmount));
    }

    // AD+AP combined calculation (armor/mres as % 0–100)
    public int ApplyDamage(int attackerAD, int attackerAP, int weaponAD, int weaponAP, float attackerArmorPen, float attackerMagicPen)
    {
        // Ignore if dead or dodging with IFrames
        if (!IsAlive) return 0;
        if (useDodgeIFrames && c_Dodge.IsDodging) return 0;

        // Calculate effective armor and magic resist after penetration
        float effectiveAR = c_Stats.AR * (1f - Mathf.Clamp01(attackerArmorPen / 100f));
        float effectiveMR = c_Stats.MR * (1f - Mathf.Clamp01(attackerMagicPen / 100f));

        // Calculate damage reduction from effective armor and magic resist
        float damageReductionAR = 1f - Mathf.Clamp01(effectiveAR / 100f);
        float damageReductionMR = 1f - Mathf.Clamp01(effectiveMR / 100f);

        // Final damage calculation
        int total =
            Mathf.RoundToInt((attackerAD + weaponAD) * damageReductionAR) +
            Mathf.RoundToInt((attackerAP + weaponAP) * damageReductionMR);

        // Clamp to valid range and apply
        int before = CurrentHP;
        int dealt = Mathf.Clamp(total, 0, before);
        if (dealt > 0) ChangeHealth(-dealt);
        return dealt;
    }

    // Single entrypoint for damage/heal
    public void ChangeHealth(int amount)
    {
        // Ignore if dead, healing 0, or dodging with IFrames
        if (!IsAlive || (amount < 0 && useDodgeIFrames && c_Dodge.IsDodging)) return;

        // Clamp to valid range and apply
        int before    = CurrentHP;
        int after     = Mathf.Clamp(before + amount, 0, c_Stats.maxHP);
        int actual    = after - before;
            CurrentHP = after;

        // Invoke events
        if      (actual < 0) OnDamaged?.Invoke(-actual);
        else if (actual > 0) OnHealed?.Invoke(actual);
        if      (after == 0) OnDied?.Invoke();
    }

    // Kill instantly
    public void Kill() => ChangeHealth(-c_Stats.maxHP);
}

// ----- File: C_State.cs -----
using UnityEngine;

[RequireComponent(typeof(Animator))]
[RequireComponent(typeof(Rigidbody2D))]

[DisallowMultipleComponent]

public class C_State : MonoBehaviour
{   
    // Finite State Machine
    public enum ActorState { Idle, Move, Attack, Dodge, Wander, Dead }

    [Header("References(Only Player/Enemy/NPC)")]
    Animator animator;
    Rigidbody2D rb;

    public P_Movement p_Movement;
    public P_Combat   p_Combat;
    public E_Movement e_Movement;
    public E_Combat   e_Combat;

    public C_Dodge    c_Dodge;
    C_Health   c_Health;

    [Header("Locks Certain Actions")]
    public bool lockMoveWhileAttacking = true;
    public bool lockDodge = true;

    [Header("Wandering Ability")]
    public bool canWander;

    // Current finite state
    public ActorState CurrentState = ActorState.Idle;

    const float MIN_DISTANCE = 0.0001f;

    void Awake()
    {
        rb          ??= GetComponent<Rigidbody2D>();
        animator    ??= GetComponent<Animator>();

        p_Movement  ??= GetComponent<P_Movement>();
        p_Combat    ??= GetComponent<P_Combat>();
        e_Movement  ??= GetComponent<E_Movement>();
        e_Combat    ??= GetComponent<E_Combat>();

        c_Dodge     ??= GetComponent<C_Dodge>();
        c_Health    ??= GetComponent<C_Health>();

        if (!rb)                        Debug.LogError($"{name}: Rigidbody2D is missing in C_State");
        if (!animator)                  Debug.LogError($"{name}: Animator is missing in C_State");
        if (!p_Movement && !e_Movement) Debug.LogError($"{name}: *_Movement is missing in C_State");
        if (!p_Combat && !e_Combat)     Debug.LogError($"{name}: *_Combat is missing in C_State");
    }

    void OnEnable()
    {
        c_Health.OnDied += OnDiedHandler;
    }

    void OnDisable()
    {
        c_Health.OnDied -= OnDiedHandler;
    }

    // Handle death
    void OnDiedHandler()
    {
        // lock movement
        p_Movement?.SetDisabled(true);
        e_Movement?.SetDisabled(true);

        // play death animation
        animator.SetTrigger("Die");

        // stop wandering and freeze state at Dead (not for player)

        rb.linearVelocity = Vector2.zero;
        CurrentState = ActorState.Dead;
    }

    // Update is called once per frame
    void Update()
    {
        // Pick next state
        var next = PickState();
        if (next != CurrentState) CurrentState = next;
        ApplyAnimator(CurrentState);
    }

    // Public API for Enum
    public bool Is(ActorState s)   => CurrentState == s;

    //  Public API for Bool
    public bool CheckIsBusy()
    {
        // busy if dodging, or attacking and movement is locked
        if (Is(ActorState.Dodge)) return true;
        if (Is(ActorState.Attack) && lockMoveWhileAttacking) return true;
        return false;
    }
    
    // Pick the correct state
    ActorState PickState()
    {
        // If dead, remain dead (no further transitions)
        if (CurrentState == ActorState.Dead || !c_Health.IsAlive)
            return ActorState.Dead;

        // Dodge is optional
        if (c_Dodge && c_Dodge.IsDodging) return ActorState.Dodge;

        // Attack
        if ((p_Combat && p_Combat.isAttacking) || (e_Combat && e_Combat.isAttacking))
            return ActorState.Attack;

        // Wander (must have wander component active & allowed) takes precedence over plain Move


        // Movement inferred from body velocity (respects ForcedVelocity/knockback) for non-wander movement
        if (rb.linearVelocity.sqrMagnitude > MIN_DISTANCE) return ActorState.Move;

        return ActorState.Idle;
    }

    // Single source of truth for animator bools
    void ApplyAnimator(ActorState s)
    {
        animator.SetBool("isDodging", s == ActorState.Dodge);
        animator.SetBool("isAttacking", s == ActorState.Attack);
        animator.SetBool("isMoving", s == ActorState.Move);
        animator.SetBool("isWandering", s == ActorState.Wander);
    }

    // Public API for Floats
    public void UpdateAnimDirections(Vector2 moveAxis, Vector2 lastMove)
    {
        bool busy = CheckIsBusy();
        if (!busy && moveAxis.sqrMagnitude > MIN_DISTANCE)
        {
            animator.SetFloat("moveX", moveAxis.x);
            animator.SetFloat("moveY", moveAxis.y);
        }
        animator.SetFloat("idleX", lastMove.x);
        animator.SetFloat("idleY", lastMove.y);
    }

    // Public API for Attack direction
    public void SetAttackDirection(Vector2 dir)
    {
        animator.SetFloat("atkX", dir.x);
        animator.SetFloat("atkY", dir.y);
    }

    // Get current attack/idle direction from animator
    public Vector2 GetAttackDirection()
    {
        return new Vector2(animator.GetFloat("atkX"), animator.GetFloat("atkY"));
    }
    public Vector2 GetIdleDirection()
    {
        return new Vector2(animator.GetFloat("idleX"), animator.GetFloat("idleY"));
    }
}

// ----- File: C_Stats.cs -----
using UnityEngine;

[DisallowMultipleComponent]
public class C_Stats : MonoBehaviour
{
    [Header("Core Stats")]
    public int AD = 1; // Attack Damage
    public int AP = 0; // Ability Power
    public float MS = 5f; // Move Speed

    public int maxHP = 10;
    public int currentHP = 10;
    public int AR = 0; // Armor
    public int MR = 0; // Magic Resist
    public float KR = 10f; // knockback Resist

    [Header("Special Stats")]
    public float lifesteal = 0f;
    public float armorPen = 0f;
    public float magicPen = 0f;

    [Header("Combat")]
    public float attackCooldown = 1.2f;
    public int   collisionDamage = 1;   // per-enemy
    public float collisionTick   = 0.5f; // seconds between ticks while touching

    [Header("Dodge (used by Player; Enemy can ignore)")]
    public float dodgeSpeed = 11f;
    public float dodgeDistance = 2.0f;
    public float dodgeCooldown = 0.45f;

    [Header("Placeholders")]
    public float knockbackForce = 0f;
    public float stunTime = 0f;
}

// ----- File: I_Controller.cs -----
using UnityEngine;

public interface I_Controller
{
    void SetDesiredVelocity(Vector2 v);
}

// ----- File: State_Attack.cs -----
using System.Collections;
using UnityEngine;

public class State_Attack : MonoBehaviour
{
    [Header("Target Layer")]
    public LayerMask playerLayer;

    [Header("Attack Cooldown")]
    public float attackCooldown = 0.80f;
    float attackDuration = 0.45f; // Default: 0.45f
    float hitDelay = 0.15f; // Default: 0.15f
    float attackRange;

    [Header("Weapon")]
    public W_Base activeWeapon;

    // Cache
    Rigidbody2D rb;
    Animator anim;
    E_Controller controller;

    // Runtime
    Transform target;
    Vector2 lastFace = Vector2.down;
    bool isAttacking;
    public bool IsAttacking => isAttacking;

    void Awake()
    {
        rb = GetComponent<Rigidbody2D>();
        anim = GetComponent<Animator>();
        controller = GetComponent<E_Controller>();
        activeWeapon = GetComponentInChildren<W_Base>();

        if (!rb)    Debug.LogError($"{name}: Rigidbody2D is missing in State_Attack");
        if (!anim)  Debug.LogError($"{name}: Animator is missing in State_Attack");
    }

    void OnDisable()
    {
        isAttacking = false;
        controller.SetDesiredVelocity(Vector2.zero);
        rb.linearVelocity = Vector2.zero;
        anim.SetBool("isAttacking", false);
    }

    void Update()
    {
        // No movement while in attack state; controller still applies knockback globally
        controller.SetDesiredVelocity(Vector2.zero);

        if (!target) return;

        bool inInner = Physics2D.OverlapCircle((Vector2)transform.position, attackRange, playerLayer);

        Vector2 to = (Vector2)target.position - (Vector2)transform.position;
        float d = to.magnitude;
        Vector2 dir = d > 0.0001f ? to.normalized : lastFace;

        UpdateIdleFacing(isAttacking ? lastFace : dir);

        if (!isAttacking && inInner && controller.GetAttackCooldown <= 0f)
            StartCoroutine(AttackRoutine(dir));
    }

    // Set target + attack range
    public void SetTarget(Transform t) => target = t;
    public void SetRanges(float attackRange) => this.attackRange = attackRange;

    // Attack coroutine
    IEnumerator AttackRoutine(Vector2 dirAtStart)
    {
        isAttacking = true;
        anim.SetBool("isAttacking", true);

        if (dirAtStart.sqrMagnitude > 0f) lastFace = dirAtStart.normalized;
        anim.SetFloat("atkX", lastFace.x);
        anim.SetFloat("atkY", lastFace.y);

        UpdateIdleFacing(lastFace);

        yield return new WaitForSeconds(hitDelay);
        activeWeapon?.Attack(lastFace);
        yield return new WaitForSeconds(Mathf.Max(0f, attackDuration - hitDelay));

        controller.SetAttackCooldown(attackCooldown);
        isAttacking = false;
        anim.SetBool("isAttacking", false);
    }

    // Update facing for idle state
    void UpdateIdleFacing(Vector2 faceDir)
    {
        anim.SetFloat("moveX", 0f);
        anim.SetFloat("moveY", 0f);
        // Compute idle facing from last move/attack direction
        Vector2 f = faceDir.sqrMagnitude > 0f ? faceDir.normalized : lastFace;
        anim.SetFloat("idleX", f.x);
        anim.SetFloat("idleY", f.y);
    }
}

// ----- File: State_Attack_Boss.cs -----
using System.Collections;
using UnityEngine;

public class State_Attack_Boss : MonoBehaviour
{
    [Header("Target Layer")]
    public LayerMask playerLayer;

    [Header("Normal Attack")]
    public float attackCooldown = 1.10f;
    float attackDuration = 0.45f;
    float hitDelay = 0.25f;

    [Header("Special (single clip flow)")]
    public float specialCooldown   = 8.0f;
    public float specialClipLength = 1.50f;
    public float specialHitDelay   = 0.50f;   // charge ends → start dash
    public float hitTime           = 1.05f;   // first contact; follow-up auto

    [Header("Auto Move Window")]
    [Tooltip("Dash ends slightly before the hit for fairness.")]
    public float preHitStopBias = 0.02f;      // 10–30 ms typical

    [Header("Dash")]
    public float dashSpeed       = 9.0f;
    public float stopShortOffset = 0.96f;     // distance kept in front of the player (along X) at the end

    [Header("Alignment Gate")]
    public float yHardCap = 0.55f;            // must be within this to attack

    [Header("Weapon")]
    public W_Base activeWeapon;               // W_Melee, no sprite

    // Animator params
    const string kIsAttacking     = "isAttacking";
    const string kIsSpecialAttack = "isSpecialAttack";

    // Cache
    Rigidbody2D rb;
    Animator anim;
    I_Controller controller;
    SpriteRenderer sr;
    C_AfterimageSpawner afterimage;

    // Runtime
    Transform target;
    Vector2 lastFace = Vector2.right;
    float attackRange = 1.6f;

    // Local cooldowns
    float nextAttackReadyAt;
    float nextSpecialReadyAt;

    // Status
    public bool IsAttacking { get; private set; }
    bool isDashing;

    // follow-up gap for the continuous second swing
    const float kFollowupGap = 0.14f;

    // ---- Computed move window (time & reach) ----
    float ComputedMoveWindow
    {
        get
        {
            float w = hitTime - specialHitDelay - preHitStopBias;
            return (w > 0f) ? w : 0f;
        }
    }
    float TimeReach => dashSpeed * ComputedMoveWindow;

    void Awake()
    {
        rb         ??= GetComponent<Rigidbody2D>();
        anim       ??= GetComponentInChildren<Animator>();
        controller ??= GetComponent<I_Controller>();
        activeWeapon ??= GetComponentInChildren<W_Base>();
        sr         ??= GetComponentInChildren<SpriteRenderer>();
        afterimage ??= sr ? sr.GetComponent<C_AfterimageSpawner>() : null;
    }

    void OnDisable()
    {
        IsAttacking = false;
        isDashing   = false;
        controller?.SetDesiredVelocity(Vector2.zero);
        if (rb) rb.linearVelocity = Vector2.zero;
        anim.SetBool(kIsAttacking, false);
        anim.SetBool(kIsSpecialAttack, false);
    }

    void Update()
    {
        if (!isDashing) controller?.SetDesiredVelocity(Vector2.zero);
        if (!target) return;

        Vector2 to = (Vector2)target.position - (Vector2)transform.position;
        float dx = to.x, dy = to.y;
        float d  = to.magnitude;

        Vector2 dir = d > 0.0001f ? to.normalized : lastFace;
        UpdateIdleFacing(IsAttacking ? lastFace : dir);

        // gates
        bool inInner       = Physics2D.OverlapCircle((Vector2)transform.position, attackRange, playerLayer);
        bool specialReady  = Time.time >= nextSpecialReadyAt;
        // new outer uses timing reach (no magenta cap)
        float inner = attackRange * 1.2f;
        float outer = attackRange + TimeReach;
        bool inSpecialDist = Mathf.Abs(dx) >= inner && Mathf.Abs(dx) <= outer;
        bool alignedY      = Mathf.Abs(dy) <= yHardCap;
        bool canAttackNow  = Time.time >= nextAttackReadyAt;

        if (!IsAttacking && canAttackNow)
        {
            if (specialReady && alignedY && inSpecialDist)
            {
                StartCoroutine(SpecialRoutine(dir));
                return;
            }
            if (alignedY && inInner)
            {
                StartCoroutine(NormalRoutine(dir));
                return;
            }
        }
    }

    // -------- controller hooks ----------
    public void SetTarget(Transform t) => target = t;
    public void SetRanges(float attackRange) => this.attackRange = attackRange;

    // Let B_Controller ask if special is valid right now (uses timing reach + Y gate)
    public bool CanSpecialNow(Vector2 bossPos, Vector2 playerPos)
    {
        if (Time.time < nextSpecialReadyAt || Time.time < nextAttackReadyAt) return false;
        float dx = Mathf.Abs(playerPos.x - bossPos.x);
        float dy = Mathf.Abs(playerPos.y - bossPos.y);
        float inner = attackRange * 1.2f;
        float outer = attackRange + TimeReach;
        return dy <= yHardCap && dx >= inner && dx <= outer;
    }

    // -------- normal attack ----------
    IEnumerator NormalRoutine(Vector2 dirAtStart)
    {
        IsAttacking = true;
        anim.SetBool(kIsSpecialAttack, false);
        anim.SetBool(kIsAttacking, true);

        if (dirAtStart.sqrMagnitude > 0f) lastFace = dirAtStart.normalized;
        anim.SetFloat("atkX", lastFace.x);
        anim.SetFloat("atkY", lastFace.y);
        UpdateIdleFacing(lastFace);

        yield return new WaitForSeconds(hitDelay);

        activeWeapon?.Attack(lastFace);

        yield return new WaitForSeconds(Mathf.Max(0f, attackDuration - hitDelay));

        nextAttackReadyAt = Time.time + attackCooldown;
        IsAttacking = false;
        anim.SetBool(kIsAttacking, false);
    }

    // -------- special (one clip; timers only) ----------
    IEnumerator SpecialRoutine(Vector2 dirAtStart)
    {
        IsAttacking = true;
        anim.SetBool(kIsAttacking, false);
        anim.SetBool(kIsSpecialAttack, true);

        if (dirAtStart.sqrMagnitude > 0f) lastFace = dirAtStart.normalized;
        anim.SetFloat("atkX", lastFace.x);
        anim.SetFloat("atkY", lastFace.y);
        UpdateIdleFacing(lastFace);

        float t = 0f;
        float endMoveTime = specialHitDelay + ComputedMoveWindow;

        // A) Charge
        while (t < specialHitDelay) { t += Time.deltaTime; yield return null; }

        // B) Gap-close along vector to the "face spot"
        BeginDash(); // sets velocity and kicks afterimage
        while (t < endMoveTime)
        {
            t += Time.deltaTime;
            if (ReachedDashDest()) break;
            yield return null;
        }
        StopDash();

        // C) Hit + quick follow-up
        while (t < hitTime) { t += Time.deltaTime; yield return null; }
        activeWeapon?.Attack(lastFace);

        float t2 = 0f;
        while (t2 < kFollowupGap) { t2 += Time.deltaTime; yield return null; }
        activeWeapon?.Attack(lastFace);

        // D) Finish clip
        while (t < specialClipLength) { t += Time.deltaTime; yield return null; }

        nextAttackReadyAt  = Time.time + attackCooldown;   // reuse normal pacing after special
        nextSpecialReadyAt = Time.time + specialCooldown;

        IsAttacking = false;
        anim.SetBool(kIsSpecialAttack, false);
    }

    // -------- dash helpers ----------
    Vector2 dashDest;
    Vector2 dashDir;

    void BeginDash()
    {
        // “Face spot”: X is right in front of player (stop-short), Y is exactly player’s Y.
        Vector2 start = transform.position;
        Vector2 p     = target ? (Vector2)target.position : start;

        int sign = (p.x - start.x) >= 0f ? +1 : -1;
        Vector2 faceSpot = new Vector2(p.x - sign * stopShortOffset, p.y);

        Vector2 toFace   = faceSpot - start;
        float distToFace = toFace.magnitude;

        float travel = Mathf.Min(distToFace, TimeReach); // no magenta cap
        dashDir = (toFace.sqrMagnitude > 0f) ? (toFace / distToFace) : new Vector2(sign, 0f);
        dashDest = start + dashDir * travel;

        // velocity & afterimage
        controller?.SetDesiredVelocity(dashDir * dashSpeed);
        isDashing = true;

        if (afterimage && sr)
            afterimage.StartBurst(ComputedMoveWindow, sr.sprite, sr.flipX, sr.flipY);
    }

    void StopDash()
    {
        isDashing = false;
        controller?.SetDesiredVelocity(Vector2.zero);
        if (rb) rb.linearVelocity = Vector2.zero;
    }

    bool ReachedDashDest()
    {
        Vector2 pos = transform.position;
        // stop when we pass the destination along the dash direction
        Vector2 toDest = dashDest - pos;
        return Vector2.Dot(toDest, dashDir) <= 0f || (toDest.sqrMagnitude <= 0.0004f);
    }

    // -------- anim lattice ----------
    void UpdateIdleFacing(Vector2 faceDir)
    {
        anim.SetFloat("moveX", 0f);
        anim.SetFloat("moveY", 0f);
        Vector2 f = faceDir.sqrMagnitude > 0f ? faceDir.normalized : lastFace;
        anim.SetFloat("idleX", f.x);
        anim.SetFloat("idleY", f.y);
    }

    // -------- gizmos ----------
    void OnDrawGizmosSelected()
    {
        Vector3 p = transform.position;

        // Y hard cap band (cyan)
        Gizmos.color = Color.cyan;
        float band = yHardCap;
        float width = (attackRange + TimeReach + 0.5f) * 2f;
        Vector3 L  = p + Vector3.left  * width * 0.5f;
        Vector3 R  = p + Vector3.right * width * 0.5f;
        Gizmos.DrawLine(L + Vector3.up * band,   R + Vector3.up * band);
        Gizmos.DrawLine(L + Vector3.down * band, R + Vector3.down * band);

        // Time-limited dash reach (blue) along current face vector (from boss toward face spot)
        if (target)
        {
            int sign = ((target.position.x - p.x) >= 0f) ? +1 : -1;
            Vector2 faceSpot = new Vector2(target.position.x - sign * stopShortOffset, target.position.y);
            Vector2 toFace   = faceSpot - (Vector2)p;
            Vector2 dir      = toFace.sqrMagnitude > 0f ? toFace.normalized : new Vector2(sign, 0f);
            float reach      = TimeReach;

            Gizmos.color = Color.blue;
            Gizmos.DrawLine(p, p + (Vector3)(dir * reach));
        }

        // Special distance window (thick “dent dots” on X)
        float inner = attackRange * 1.2f;
        float outer = attackRange + TimeReach;
        float dotR  = 0.18f;

        Gizmos.color = Color.green;
        Gizmos.DrawSphere(p + Vector3.right * inner, dotR);
        Gizmos.DrawSphere(p + Vector3.left  * inner, dotR);

        Gizmos.color = Color.red;
        Gizmos.DrawSphere(p + Vector3.right * outer, dotR);
        Gizmos.DrawSphere(p + Vector3.left  * outer, dotR);

        // Stop-short line relative to the player (yellow)
        if (target)
        {
            int sign = ((target.position.x - p.x) >= 0f) ? +1 : -1;
            float stopX = target.position.x - sign * stopShortOffset;
            Vector3 a = new Vector3(stopX, p.y - 0.6f, p.z);
            Vector3 b = new Vector3(stopX, p.y + 0.6f, p.z);
            Gizmos.color = Color.yellow;
            Gizmos.DrawLine(a, b);
        }
    }
}

// ----- File: State_Chase.cs -----
using UnityEngine;

public class State_Chase : MonoBehaviour
{
    [Header("Tuning")]
    public float stopBuffer = 0.10f;

    float attackRange = 1.2f;

    // Cache
    Rigidbody2D rb;
    Animator anim;
    C_Stats stats;
    E_Controller controller;

    // Runtime
    Transform target;
    Vector2 velocity, lastMove = Vector2.down;

    void Awake()
    {
        rb         = GetComponent<Rigidbody2D>();
        anim       = GetComponent<Animator>();
        stats      = GetComponent<C_Stats>();
        controller = GetComponent<E_Controller>();

        if (!stats) Debug.LogError($"{name}: C_Stats is missing in State_Chase");
    }

    void OnEnable() { anim.SetBool("isMoving", false); }

    void OnDisable()
    {
        velocity = Vector2.zero;
        controller?.SetDesiredVelocity(Vector2.zero);
        rb.linearVelocity = Vector2.zero;
        anim.SetBool("isMoving", false);
    }

    void Update()
    {
        // No movement while stunned/dead; controller still applies knockback globaly
        if (!target)
        {
            velocity = Vector2.zero;
            controller?.SetDesiredVelocity(Vector2.zero);
            UpdateFloats(Vector2.zero);
            anim.SetBool("isMoving", false);
            return;
        }

        // Chase target
        Vector2 toTarget  = (Vector2)target.position - (Vector2)transform.position;
        float   distance  = toTarget.magnitude;
        Vector2 direction = distance > 0.0001f ? toTarget.normalized : lastMove;

        // Move if outside attack range + buffer
        velocity = (distance > (attackRange + stopBuffer)) ? direction * stats.MS : Vector2.zero;
        bool moving = velocity.sqrMagnitude > 0f;
        anim.SetBool("isMoving", moving);

        controller.SetDesiredVelocity(velocity);
        UpdateFloats(velocity);
    }

    // Set target + attack range
    public void SetTarget(Transform t) => target = t;
    public void SetRanges(float attackRange) => this.attackRange = attackRange;

    // Update animator floats
    void UpdateFloats(Vector2 move)
    {
        if (move.sqrMagnitude > 0f) lastMove = move.normalized;
        anim.SetFloat("moveX", move.x);
        anim.SetFloat("moveY", move.y);
        anim.SetFloat("idleX", lastMove.x);
        anim.SetFloat("idleY", lastMove.y);
    }
}

// ----- File: State_Chase_Boss.cs -----
using UnityEngine;

public class State_Chase_Boss : MonoBehaviour
{
    [Header("Tuning")]
    public float stopBuffer = 0.10f;
    public float yAlignBand = 0.35f;   // shrink |dy| toward this during chase

    float attackRange = 1.6f;
    float specialReach;                // ≈ attackRange + dashMaxDistance

    // Cache
    Rigidbody2D rb;
    Animator anim;
    C_Stats stats;
    I_Controller controller;           // <- use interface so it works with B_Controller / NPC / Enemy

    // Runtime
    Transform target;
    Vector2 velocity, lastMove = Vector2.down;

    void Awake()
    {
        rb         ??= GetComponent<Rigidbody2D>();
        anim       ??= GetComponentInChildren<Animator>();
        stats      ??= GetComponent<C_Stats>();
        controller ??= GetComponent<I_Controller>();

        if (!stats) Debug.LogError($"{name}: C_Stats missing in State_Chase_Boss");
        if (!anim)  Debug.LogError($"{name}: Animator missing in State_Chase_Boss");
        if (controller == null) Debug.LogError($"{name}: I_Controller missing on parent for State_Chase_Boss");
    }

    void OnEnable()  { anim.SetBool("isMoving", false); }
    void OnDisable()
    {
        velocity = Vector2.zero;
        controller?.SetDesiredVelocity(Vector2.zero);
        if (rb) rb.linearVelocity = Vector2.zero;
        anim.SetBool("isMoving", false);
    }

    void Update()
    {
        if (!target)
        {
            velocity = Vector2.zero;
            controller?.SetDesiredVelocity(Vector2.zero);
            UpdateFloats(Vector2.zero);
            anim.SetBool("isMoving", false);
            return;
        }

        Vector2 toTarget  = (Vector2)target.position - (Vector2)transform.position;
        float dx = toTarget.x;
        float dy = toTarget.y;
        float distance = toTarget.magnitude;

        // Horizontal-first chase with vertical alignment bias
        Vector2 desired = Vector2.zero;
        if (Mathf.Abs(dy) > yAlignBand)
        {
            desired.y = Mathf.Sign(dy);
            desired.x = Mathf.Sign(dx) * 0.6f;
        }
        else
        {
            desired.x = Mathf.Sign(dx);
            desired.y = Mathf.Sign(dy) * 0.35f;
        }
        desired = desired.sqrMagnitude > 0f ? desired.normalized : lastMove;

        // Move if outside attack range + buffer
        velocity = (distance > (attackRange + stopBuffer)) ? desired * stats.MS : Vector2.zero;
        bool moving = velocity.sqrMagnitude > 0f;
        anim.SetBool("isMoving", moving);

        controller?.SetDesiredVelocity(velocity);
        UpdateFloats(velocity);
    }

    public void SetTarget(Transform t) => target = t;
    public void SetRanges(float attackRange)
    {
        this.attackRange = attackRange;
        specialReach = attackRange + 2.9f; // default dashMaxDistance (boss attack state clamps exactly)
    }

    void UpdateFloats(Vector2 move)
    {
        if (move.sqrMagnitude > 0f) lastMove = move.normalized;
        anim.SetFloat("moveX", move.x);
        anim.SetFloat("moveY", move.y);
        anim.SetFloat("idleX", lastMove.x);
        anim.SetFloat("idleY", lastMove.y);
    }
}

// ----- File: State_Idle.cs -----
using UnityEngine;

public class State_Idle : MonoBehaviour
{
    [Header("References")]
    public Rigidbody2D rb;
    public Animator characterAnimator;

    I_Controller controller;
    C_Stats stats;

    void Awake()
    {
        rb                ??= GetComponent<Rigidbody2D>();
        characterAnimator ??= GetComponentInChildren<Animator>();
        stats             ??= GetComponent<C_Stats>();
        controller = (I_Controller)(GetComponent<E_Controller>() ??
                        (Component)GetComponent<NPC_Controller>());
        if (!rb) Debug.LogError($"{name}: Rigidbody2D is missing in State_Idle");
    }

    void OnEnable()
    {
        rb.linearVelocity = Vector2.zero;
        controller?.SetDesiredVelocity(Vector2.zero);
        var a = characterAnimator;
        if (!a) return;
        a.SetBool("isMoving", false);
        a.SetBool("isWandering", false);
        a.SetBool("isAttacking", false);
    }

    // Idle: no movement intent; controller handles knockback for all states
    void Update() => controller?.SetDesiredVelocity(Vector2.zero);
}

// ----- File: State_Talk.cs -----
using System.Collections.Generic;
using UnityEngine;

public class State_Talk : MonoBehaviour
{
    [Header("References")]
    public Animator interactAnim;    // icon animator with states: Idle (default), WantToTalk
    public D_SO currentConversation;
    public List<D_SO> conversations;

    Rigidbody2D rb;
    Animator characterAnim;   // NPC sprite animator (Idle/Walk graph)
    I_Controller controller;
    P_InputActions input;

    // runtime
    Vector2 facingDir; 
    Transform target;

    void Awake()
    {
        rb            ??= GetComponent<Rigidbody2D>();
        characterAnim ??= GetComponentInChildren<Animator>();
        input         ??= new P_InputActions();

        controller      = (I_Controller)(GetComponent<E_Controller>() ??
                            (Component)GetComponent<NPC_Controller>());

        if (!rb) Debug.LogError($"{name}: Rigidbody2D is missing in State_Talk");
    }

    // When enabled, stop physics and movement, face the player, show talk icon
    void OnEnable()
    {
        input.Enable();
        // Stop movement and swallow any external forces
        rb.linearVelocity = Vector2.zero;
        rb.bodyType = RigidbodyType2D.Kinematic;

        // Face a direction
        characterAnim?.SetFloat("idleX", facingDir.x);
        characterAnim?.SetFloat("idleY", facingDir.y);

        // Play animations
        characterAnim?.Play("Idle");       // idle while talking
        interactAnim?.Play("WantToTalk");  // open talk icon
    }

    // When disabled, restore physics and movement, hide talk icon
    void OnDisable()
    {
        input.Disable();
        target = null;
        rb.bodyType = RigidbodyType2D.Dynamic;  // restore normal physics
        interactAnim?.Play("Idle");        // close talk icon
        facingDir = Vector2.zero;           // clear after use
    }

    void Update()
    {
        // NPCs don’t move while talking; keep intent at zero if you’re using controllers for NPCs too.
        controller?.SetDesiredVelocity(Vector2.zero);

        if (!target) return;

        Vector2 to = (Vector2)target.position - (Vector2)transform.position;

        if (to.sqrMagnitude > 0.0001f)
        {
            facingDir = to.normalized;
            characterAnim?.SetFloat("idleX", facingDir.x);
            characterAnim?.SetFloat("idleY", facingDir.y);
        }

        // Interact with F key
        if (input.Player.Interact.WasPressedThisFrame())
        {
            if (D_Manager.Instance.isDialogueActive)
                D_Manager.Instance.AdvanceDialogue();
            else
            {
                CheckForNewConversation();
                D_Manager.Instance.StartDialogue(currentConversation);
            }
        }
    }

    void CheckForNewConversation()
    {   

        // for (int i = conversations.Count - 1; i >= 0; i--) -> start from the end of the list
        for (int i = 0; i < conversations.Count; i++) // start from the beginning of the list
        {
            var convo = conversations[i];
            if (convo != null && convo.IsConditionMet())
            {
                conversations.RemoveAt(i);
                currentConversation = convo;
            }
        }
    }

    // API for controller
    public void SetTarget(Transform t)
    {
        target = t;
        if (!target) return;
        var to = (Vector2)target.position - (Vector2)transform.position;
        if (to.sqrMagnitude > 0.0001f) facingDir = to.normalized;
    }
}

// ----- File: State_Wander.cs -----
using UnityEngine;
using System.Collections;

[RequireComponent(typeof(Rigidbody2D))]
[RequireComponent(typeof(Animator))]
[DisallowMultipleComponent]
public class State_Wander : MonoBehaviour
{
    [Header("References")]
    Rigidbody2D rb;
    Animator anim;
    I_Controller controller;

    [Header("Wander Area")]
    public Vector2 startCenter;
    public float width = 6f;
    public float height = 4f;

    [Header("Movement")]
    public float pauseDuration = 1f;
    public float wanderSpeed = 1f;

    // runtime
    Vector2 destination;
    Vector2 dir;
    Vector2 lastMove;
    bool isWandering;
    const float MIN_DISTANCE = 0.1f;

    void Awake()
    {
        rb         = GetComponent<Rigidbody2D>();
        anim       = GetComponentInChildren<Animator>();
        controller = (I_Controller)(GetComponent<E_Controller>() ??
                        (Component)GetComponent<NPC_Controller>() ??
                        (Component)GetComponent<B_Controller>());


        if (!rb) Debug.LogError($"{name}: Rigidbody2D is missing in State_Wander");
        if (!anim) Debug.LogError($"{name}: Animator is missing in State_Wander");
        if (controller == null) Debug.LogError($"{name}: I_Controller is missing in State_Wander");

        if (startCenter == Vector2.zero) startCenter = (Vector2)transform.position;
    }

    void OnEnable()
    {
        isWandering = true;
        anim.SetBool("isWandering", true);
        rb.bodyType = RigidbodyType2D.Dynamic;
        StopAllCoroutines();
        StartCoroutine(PauseAndPickNewDestination());
    }

    void OnDisable()
    {
        anim.SetBool("isWandering", false);
        StopAllCoroutines();
        isWandering = false;
        controller?.SetDesiredVelocity(Vector2.zero);
        rb.linearVelocity = Vector2.zero;
    }

    void Update()
    {
        if (!isWandering)
        {
            controller?.SetDesiredVelocity(Vector2.zero);
            return;
        }

        if (Vector2.Distance(transform.position, destination) < MIN_DISTANCE)
        {
            StopAllCoroutines();
            StartCoroutine(PauseAndPickNewDestination());
            controller?.SetDesiredVelocity(Vector2.zero);
            return;
        }

        dir = (destination - (Vector2)transform.position).normalized;
        if (dir.sqrMagnitude > 0f) lastMove = dir;

        // Animator floats
        anim.SetFloat("moveX", dir.x);
        anim.SetFloat("moveY", dir.y);
        anim.SetFloat("idleX", lastMove.x);
        anim.SetFloat("idleY", lastMove.y);

        // Send intent to controller
        controller?.SetDesiredVelocity(dir * wanderSpeed);
    }

    IEnumerator PauseAndPickNewDestination()
    {
        isWandering = false;
        controller?.SetDesiredVelocity(Vector2.zero);
        rb.linearVelocity = Vector2.zero;
        anim.Play("Idle");

        yield return new WaitForSeconds(pauseDuration);

        destination = GetRandomEdgePoint();
        isWandering = true;
        anim.Play("Wander");
    }

    Vector2 GetRandomEdgePoint()
    {
        float halfW = width * 0.5f;
        float halfH = height * 0.5f;

        int edge = Random.Range(0, 4);
        switch (edge)
        {
            case 0: return new Vector2(startCenter.x - halfW, Random.Range(startCenter.y - halfH, startCenter.y + halfH));
            case 1: return new Vector2(startCenter.x + halfW, Random.Range(startCenter.y - halfH, startCenter.y + halfH));
            case 2: return new Vector2(Random.Range(startCenter.x - halfW, startCenter.x + halfW), startCenter.y - halfH);
            case 3: return new Vector2(Random.Range(startCenter.x - halfW, startCenter.x + halfW), startCenter.y + halfH);
        }
        return startCenter;
    }

    void OnCollisionEnter2D(Collision2D _) { if (isWandering) StartCoroutine(PauseAndPickNewDestination()); }

    void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.blue;
        var size = new Vector3(width, height, 0f);
        var center = Application.isPlaying ? (Vector3)startCenter : transform.position;
        Gizmos.DrawWireCube(center, size);
    }
}

