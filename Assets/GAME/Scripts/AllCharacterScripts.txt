// ----- File: C_AfterimageSpawner.cs -----
using UnityEngine;
using System.Collections;

[RequireComponent(typeof(SpriteRenderer))]
[DisallowMultipleComponent]

public class C_AfterimageSpawner : MonoBehaviour
{
    [Header("Trail")]
    public float spawnInterval = 0.035f;
    public float ghostLifetime = 0.20f;
    public Color ghostTint = new Color(0.7f, 0.7f, 0.7f, 0.7f);
    public int sortingOrderOffset = -1; // draw behind player

    // Cached
    SpriteRenderer sr;

    void Awake()
    {
        sr ??= GetComponent<SpriteRenderer>();
        if (!sr) Debug.LogWarning("C_AfterimageSpawner: SpriteRenderer missing on this GameObject.");
    }

    // Burst where every ghost uses the SAME locked sprite & flips (captured at dodge start)
    public void StartBurst(float duration, Sprite lockedSprite, bool lockedFlipX, bool lockedFlipY)
    {
        StartCoroutine(BurstRoutine(duration, lockedSprite, lockedFlipX, lockedFlipY));
    }

    IEnumerator BurstRoutine(float duration, Sprite lockedSprite, bool lockedFlipX, bool lockedFlipY)
    {
        // Spawn one immediately so the trail starts right away
        SpawnGhost(lockedSprite, lockedFlipX, lockedFlipY);

        float t = 0f;
        while (t < duration)
        {
            yield return new WaitForSeconds(spawnInterval);
            t += spawnInterval;
            SpawnGhost(lockedSprite, lockedFlipX, lockedFlipY);
        }
    }

    void SpawnGhost(Sprite sprite, bool flipX, bool flipY)
    {
        // Assumes sr exists & sprite provided (per your style: Inspector preconditions are correct)
        var g = new GameObject("Afterimage");
        g.transform.SetPositionAndRotation(transform.position, transform.rotation);
        g.transform.localScale = transform.localScale;

        var gsr = g.AddComponent<SpriteRenderer>();
        gsr.sprite = sprite;
        gsr.flipX = flipX;
        gsr.flipY = flipY;
        gsr.sortingLayerID = sr.sortingLayerID;
        gsr.sortingOrder = sr.sortingOrder + sortingOrderOffset;
        gsr.color = ghostTint;

        StartCoroutine(FadeAndDestroy(gsr));
    }

    IEnumerator FadeAndDestroy(SpriteRenderer gsr)
    {
        float t = 0f;
        Color start = gsr.color;
        while (t < ghostLifetime)
        {
            float a = Mathf.Lerp(start.a, 0f, t / ghostLifetime);
            gsr.color = new Color(start.r, start.g, start.b, a);
            t += Time.deltaTime;
            yield return null;
        }
        Destroy(gsr.gameObject);
    }
}

// ----- File: C_FX.cs -----
using System.Collections;
using UnityEngine;

[RequireComponent(typeof(SpriteRenderer))]

public class C_FX : MonoBehaviour
{
    [Header("References")]
    SpriteRenderer sr;

    [Header("Flash")]
    public float flashDuration = 0.1f;
    public Color healTint   = new Color(0.3f, 1f, 0.3f, 1f);
    public Color damageTint = new Color(1f, 0.3f, 0.3f, 1f);

    [Header("Death")]
    public float deathFadeTime = 1.5f;
    public bool destroySelfOnDeath = true;
    Color baseRGB;

    void Awake()
    {
        sr ??= GetComponent<SpriteRenderer>();
        if (!sr) Debug.LogError($"{name}: SpriteRenderer is missing in C_FX");

        baseRGB = sr.color;
    }

    public void FlashOnDamaged() => StartCoroutine(Flash(damageTint));
    public void FlashOnHealed()  => StartCoroutine(Flash(healTint));

    IEnumerator Flash(Color tint)
    {
        float a = sr.color.a;
        sr.color = new Color(tint.r, tint.g, tint.b, a);
        yield return new WaitForSeconds(flashDuration);
        sr.color = new Color(baseRGB.r, baseRGB.g, baseRGB.b, a);
    }

    public IEnumerator FadeAndDestroy(GameObject go)
    {
        float t = 0f;
        var c = sr.color;
        while (t < deathFadeTime)
        {
            t += Time.deltaTime;
            float k = 1f - Mathf.Clamp01(t / deathFadeTime);
            sr.color = new Color(c.r, c.g, c.b, k);
            yield return null;
        }
        if (destroySelfOnDeath) Destroy(go);
        else
        {
            // Player path: restore full alpha so it's ready when re-enabled on restart
            sr.color = new Color(c.r, c.g, c.b, 1f);
            go.SetActive(false);         // keep GO for Ending UI → RestartGame to re-enable
        }
    
    }
}

// ----- File: C_Health.cs -----
using System;
using UnityEngine;

[DisallowMultipleComponent]
public class C_Health : MonoBehaviour
{
    [Header("References")]
    public C_Stats c_Stats;
    P_State_Dodge p_State_Dodge; // Use the new state-based dodge
    C_FX fx;

    P_InputActions input;
    [Header("Allow Dodge/IFrames? (Only for Player)")]
    public bool useDodgeIFrames = true;

    [Header("Debug Keys (N/B)")]
    public int takingDamageAmount = 1;
    public int healingAmount = 1;

    // Events
    public event Action<int> OnDamaged;
    public event Action<int> OnHealed;
    public event Action OnDied;

    // Accessors
    int CurrentHP { get => c_Stats.currentHP; set => c_Stats.currentHP = value; }
    public bool IsAlive => CurrentHP > 0;
    bool IsDodging => useDodgeIFrames && p_State_Dodge != null && p_State_Dodge.enabled;

    // cached delegates so we can unsubscribe
    Action<int> fxDamagedHandler;
    Action<int> fxHealedHandler;
    Action      fxDiedHandler;

    void Awake()
    {
        c_Stats       ??= GetComponent<C_Stats>();
        p_State_Dodge ??= GetComponent<P_State_Dodge>();
        fx            ??= GetComponent<C_FX>();

        if (!c_Stats) Debug.LogError($"{name}: C_Stats is missing in C_Health");
        // P_State_Dodge is optional (only for player)
        if (!fx)      Debug.LogWarning($"{name}: C_FX not assigned; no flashes / death fade.", this);
    }

    void OnEnable()
    {
        input ??= new P_InputActions();
        input.Debug.Enable();
        
        // subscribe to FX events
        fxDamagedHandler ??= _ => fx.FlashOnDamaged();
        fxHealedHandler  ??= _ => fx.FlashOnHealed();
        fxDiedHandler    ??= () => StartCoroutine(fx.FadeAndDestroy(gameObject));

        OnDamaged += fxDamagedHandler;
        OnHealed  += fxHealedHandler;
        OnDied    += fxDiedHandler;
    }

    void OnDisable()
    {
        input?.Debug.Disable();

        OnDamaged -= fxDamagedHandler;
        OnHealed  -= fxHealedHandler;
        OnDied    -= fxDiedHandler;
    }

    void Update()
    {
        // Debug keys
        if (input.Debug.OnDamaged.WasPressedThisFrame())
            ChangeHealth(-Mathf.Abs(takingDamageAmount));

        if (input.Debug.OnHealed.WasPressedThisFrame())
            ChangeHealth(Mathf.Abs(healingAmount));
    }

    // AD+AP combined calculation (armor/mres as % 0–100)
    public int ApplyDamage(int attackerAD, int attackerAP, int weaponAD, int weaponAP, float attackerArmorPen, float attackerMagicPen)
    {
        // Ignore if dead or dodging with IFrames
        if (!IsAlive || IsDodging) return 0;

        // Calculate effective armor and magic resist after penetration
        float effectiveAR = c_Stats.AR * (1f - Mathf.Clamp01(attackerArmorPen / 100f));
        float effectiveMR = c_Stats.MR * (1f - Mathf.Clamp01(attackerMagicPen / 100f));

        // Calculate damage reduction from effective armor and magic resist
        float damageReductionAR = 1f - Mathf.Clamp01(effectiveAR / 100f);
        float damageReductionMR = 1f - Mathf.Clamp01(effectiveMR / 100f);

        // Final damage calculation
        int total =
            Mathf.RoundToInt((attackerAD + weaponAD) * damageReductionAR) +
            Mathf.RoundToInt((attackerAP + weaponAP) * damageReductionMR);

        // Clamp to valid range and apply
        int before = CurrentHP;
        int dealt = Mathf.Clamp(total, 0, before);
        if (dealt > 0) ChangeHealth(-dealt);
        return dealt;
    }

    // Single entrypoint for damage/heal
    public void ChangeHealth(int amount)
    {
        // Ignore if dead, healing 0, or dodging with IFrames
        if (!IsAlive || (amount < 0 && IsDodging)) return;

        // Clamp to valid range and apply
        int before    = CurrentHP;
        int after     = Mathf.Clamp(before + amount, 0, c_Stats.maxHP);
        int actual    = after - before;
            CurrentHP = after;

        // Invoke events
        if      (actual < 0) OnDamaged?.Invoke(-actual);
        else if (actual > 0) OnHealed?.Invoke(actual);
        if      (after == 0) OnDied?.Invoke();
    }

    // Kill instantly
    public void Kill() => ChangeHealth(-c_Stats.maxHP);
}

// ----- File: C_Stats.cs -----
using UnityEngine;

[DisallowMultipleComponent]
public class C_Stats : MonoBehaviour
{
    [Header("Core Stats")]
    public int AD = 1; // Attack Damage
    public int AP = 0; // Ability Power
    public float MS = 5f; // Move Speed

    public int maxHP = 10;
    public int currentHP = 10;
    public int AR = 0; // Armor
    public int MR = 0; // Magic Resist
    public float KR = 10f; // knockback Resist

    [Header("Special Stats")]
    public float lifesteal = 0f;
    public float armorPen = 0f;
    public float magicPen = 0f;

    [Header("Combat")]
    public float attackCooldown = 1.2f;
    public int   collisionDamage = 1;   // per-enemy
    public float collisionTick   = 0.5f; // seconds between ticks while touching

    [Header("Dodge (used by Player; Enemy can ignore)")]
    public float dodgeSpeed = 11f;
    public float dodgeDistance = 2.0f;
    public float dodgeCooldown = 0.45f;

    [Header("Placeholders")]
    public float knockbackForce = 0f;
    public float stunTime = 0f;
}

// ----- File: I_Controller.cs -----
using UnityEngine;

public interface I_Controller
{
    void SetDesiredVelocity(Vector2 velocity);
    
}

// ----- File: NPC_Controller.cs -----
using UnityEngine;

[DisallowMultipleComponent]
public class NPC_Controller : MonoBehaviour, I_Controller
{
    public enum NPCState { Idle, Wander, Talk }

    [Header("References")]
    public NPCState defaultState = NPCState.Wander;
    public State_Wander wander;
    public State_Talk talk;
    public State_Idle idle;
    Rigidbody2D rb;
    C_Stats stats;

    NPCState current;
    Vector2 desiredVelocity;

    void Awake()
    {
        wander ??= GetComponent<State_Wander>();
        talk ??= GetComponent<State_Talk>();
        idle ??= GetComponent<State_Idle>();

        rb ??= GetComponent<Rigidbody2D>();
        stats ??= GetComponent<C_Stats>();

        if (!wander) Debug.LogError($"{name}: State_Wander is missing in NPC_Controller");
        if (!talk) Debug.LogError($"{name}: State_Talk is missing in NPC_Controller");
        if (!idle) Debug.LogError($"{name}: State_Idle is missing in NPC_Controller");
        if (!rb) Debug.LogError($"{name}: Rigidbody2D is missing in NPC_Controller");
        if (!stats) Debug.LogError($"{name}: C_Stats is missing in NPC_Controller");
    }

    void OnEnable()
    {
        desiredVelocity = Vector2.zero;
        rb.linearVelocity = Vector2.zero;
        SwitchState(defaultState);
    }

    void OnDisable()
    {
        wander.enabled = false;
        talk.enabled   = false;
        idle.enabled   = false;

        desiredVelocity = Vector2.zero;
        rb.linearVelocity = Vector2.zero;
    }

    // States publish intent, controller applies in FixedUpdate
    public void SetDesiredVelocity(Vector2 desiredVelocity) => this.desiredVelocity = desiredVelocity;

    // Apply movement in FixedUpdate for consistent physics
    void FixedUpdate()
    {
        rb.linearVelocity = desiredVelocity;
    }

    // Switch state and enable/disable relevant components
    public void SwitchState(NPCState newState)
    {
        if (current == newState) return;
        current = newState;

        // Enable exactly one state
        idle.enabled   = newState == NPCState.Idle;
        wander.enabled = newState == NPCState.Wander;
        talk.enabled   = newState == NPCState.Talk;

        // Reset movement intent on enter
        desiredVelocity = Vector2.zero;
    }

    // Triggered Talk state when player enters trigger collider (ONLY if NPC has Talk state)
    void OnTriggerEnter2D(Collider2D other)
    {
        if (!other.CompareTag("Player")) return;

        // Make Talk face the player before switching
        if (talk)
        {
            talk.SetTarget(other.transform);
            SwitchState(NPCState.Talk);
        }
        else return;
    }

    // Revert to default state when player exits trigger collider
    void OnTriggerExit2D(Collider2D other)
    {
        if (!other.CompareTag("Player") || !talk) return;
        // If dialog is active, end it
        if (SYS_GameManager.Instance.d_Manager.isDialogActive)
        {
            SYS_GameManager.Instance.d_Manager.EndDialog();
        }
        SwitchState(defaultState);
    }
}

// ----- File: State_Idle.cs -----
using UnityEngine;

public class State_Idle : MonoBehaviour
{
    [Header("References")]
    Rigidbody2D rb;
    Animator anim;

    I_Controller controller;
    C_Stats stats;

    void Awake()
    {
        rb     = GetComponent<Rigidbody2D>();
        anim   = GetComponent<Animator>();
        stats  = GetComponent<C_Stats>();

        // Make this work for Player, Enemy, or NPC

        controller = (I_Controller)(GetComponent<E_Controller>() ?? (Component)GetComponent<NPC_Controller>());

        if (!rb) Debug.LogError($"{name}: Rigidbody2D is missing in State_Idle");
    }

    void OnEnable()
    {
        rb.linearVelocity = Vector2.zero;
        controller?.SetDesiredVelocity(Vector2.zero);
        anim.SetBool("isMoving", false);
        anim.SetBool("isWandering", false);
        anim.SetBool("isAttacking", false);
    }

    // Idle: no movement intent; controller handles knockback for all states
    void Update()
    {
        // controller?.SetDesiredVelocity(Vector2.zero);
    }
}

// ----- File: State_Talk.cs -----
using System.Collections.Generic;
using UnityEngine;

public class State_Talk : MonoBehaviour
{
    [Header("References")]
    public Animator interactAnim; // Talk icon animator
    public D_SO currentDialog;
    [Header("All possible dialogs for this NPC, order matters")]
    [Header("1 time > Completion > Repeatable > Default")]
    public List<D_SO> dialogs;

    Rigidbody2D rb;
    Animator characterAnim;   // NPC sprite animator
    I_Controller controller;
    P_InputActions input;

    // runtime
    Vector2 facingDir; 
    Transform target;

    void Awake()
    {
        rb            ??= GetComponent<Rigidbody2D>();
        characterAnim ??= GetComponentInChildren<Animator>();
        input         ??= new P_InputActions();

        controller      = (I_Controller)(GetComponent<E_Controller>() ??
                            (Component)GetComponent<NPC_Controller>());

        if (!rb) Debug.LogError($"{name}: Rigidbody2D is missing in State_Talk");
    }

    // When enabled, stop physics and movement, face the player, show talk icon
    void OnEnable()
    {
        input.Enable();
        // Stop movement and swallow any external forces
        rb.linearVelocity = Vector2.zero;
        rb.bodyType = RigidbodyType2D.Kinematic;

        // Face a direction
        characterAnim?.SetFloat("idleX", facingDir.x);
        characterAnim?.SetFloat("idleY", facingDir.y);

        // Play animations
        characterAnim.Play("Idle");       // idle while talking
        interactAnim.Play("WantToTalk");  // open talk icon
    }

    // When disabled, restore physics and movement, hide talk icon
    void OnDisable()
    {
        input.Disable();
        target = null;
        rb.bodyType = RigidbodyType2D.Dynamic;  // restore normal physics
        interactAnim?.Play("Idle");        // close talk icon
        facingDir = Vector2.zero;           // clear after use
    }

    void Update()
    {
        // NPCs don’t move while talking
        controller.SetDesiredVelocity(Vector2.zero);

        if (!target) return;

        Vector2 to = (Vector2)target.position - (Vector2)transform.position;

        if (to.sqrMagnitude > 0.0001f)
        {
            facingDir = to.normalized;
            characterAnim.SetFloat("idleX", facingDir.x);
            characterAnim.SetFloat("idleY", facingDir.y);
        }

        var dm = SYS_GameManager.Instance.d_Manager; // after D below
        if (input.UI.EndConvo.WasPressedThisFrame())
        {
            if (dm.isDialogActive)
                dm.EndDialog();
            return;
        }

        // Interact (F) to advance / start
        if (input.Player.Interact.WasPressedThisFrame())
        {
            if (dm.isDialogActive)
            {
                dm.AdvanceDialog();
            }
            else
            {
                CheckForNewDialog();
                dm.StartDialog(currentDialog);
            }
        }

    }

    void CheckForNewDialog()
    {
        // scanning from start (your current priority order)
        for (int i = 0; i < dialogs.Count; i++)
        {
            var dialog = dialogs[i];
            if (dialog != null && dialog.IsConditionMet())
            {
                // Promote to current
                currentDialog = dialog;

                // Remove stale dialogs this one obsoletes
                if (dialog.removeTheseOnPlay != null && dialog.removeTheseOnPlay.Count > 0)
                {
                    for (int r = dialogs.Count - 1; r >= 0; r--)
                    {
                        if (dialogs[r] != null && dialog.removeTheseOnPlay.Contains(dialogs[r]))
                            dialogs.RemoveAt(r);
                    }
                }

                // Remove this dialog only if one-time
                if (dialog.removeAfterPlay)
                {
                    // find current index again safely (list may have shifted)
                    int idx = dialogs.IndexOf(dialog);
                    if (idx >= 0) dialogs.RemoveAt(idx);
                }

                break; // stop at first valid
            }
        }
    }

    // API for controller
    public void SetTarget(Transform t)
    {
        target = t;
        if (!target) return;
        var to = (Vector2)target.position - (Vector2)transform.position;
        if (to.sqrMagnitude > 0.0001f) facingDir = to.normalized;
    }
}

// ----- File: State_Wander.cs -----
using UnityEngine;
using System.Collections;

[RequireComponent(typeof(Rigidbody2D))]
[RequireComponent(typeof(Animator))]

public class State_Wander : MonoBehaviour
{
    [Header("References")]
    Rigidbody2D rb;
    Animator anim;
    I_Controller controller;

    [Header("Wander Area")]
    public Vector2 startCenter;
    public float width = 6f;
    public float height = 4f;

    [Header("Movement")]
    public float pauseDuration = 1f;
    public float wanderSpeed = 1f;

    // runtime
    Vector2 destination;
    Vector2 dir;
    Vector2 lastMove;
    bool isWandering;
    const float MIN_DISTANCE = 0.1f;

    void Awake()
    {
        rb         = GetComponent<Rigidbody2D>();
        anim       = GetComponentInChildren<Animator>();
        controller = (I_Controller)(GetComponent<E_Controller>() ??
                        (Component)GetComponent<NPC_Controller>() ??
                        (Component)GetComponent<B_Controller>());

        if (startCenter == Vector2.zero) startCenter = (Vector2)transform.position;
    }

    void OnEnable()
    {
        isWandering = true;
        anim.SetBool("isWandering", true);
        rb.bodyType = RigidbodyType2D.Dynamic;
        StopAllCoroutines();
        StartCoroutine(PauseAndPickNewDestination());
    }

    void OnDisable()
    {
        anim.SetBool("isWandering", false);
        StopAllCoroutines();
        isWandering = false;
        // controller?.SetDesiredVelocity(Vector2.zero);
        // rb.linearVelocity = Vector2.zero;
    }

    void Update()
    {
        if (!isWandering)
        {
            controller?.SetDesiredVelocity(Vector2.zero);
            return;
        }

        if (Vector2.Distance(transform.position, destination) < MIN_DISTANCE)
        {
            StopAllCoroutines();
            StartCoroutine(PauseAndPickNewDestination());
            controller?.SetDesiredVelocity(Vector2.zero);
            return;
        }

        dir = (destination - (Vector2)transform.position).normalized;
        if (dir.sqrMagnitude > 0f) lastMove = dir;

        // Animator floats
        anim.SetFloat("moveX", dir.x);
        anim.SetFloat("moveY", dir.y);
        anim.SetFloat("idleX", lastMove.x);
        anim.SetFloat("idleY", lastMove.y);

        // Send intent to controller
        controller?.SetDesiredVelocity(dir * wanderSpeed);
    }

    IEnumerator PauseAndPickNewDestination()
    {
        isWandering = false;
        controller?.SetDesiredVelocity(Vector2.zero);
        //rb.linearVelocity = Vector2.zero;
        anim.Play("Idle");

        yield return new WaitForSeconds(pauseDuration);

        destination = GetRandomEdgePoint();
        isWandering = true;
        anim.Play("Wander");
    }

    Vector2 GetRandomEdgePoint()
    {
        float halfW = width * 0.5f;
        float halfH = height * 0.5f;

        int edge = Random.Range(0, 4);
        switch (edge)
        {
            case 0: return new Vector2(startCenter.x - halfW, Random.Range(startCenter.y - halfH, startCenter.y + halfH));
            case 1: return new Vector2(startCenter.x + halfW, Random.Range(startCenter.y - halfH, startCenter.y + halfH));
            case 2: return new Vector2(Random.Range(startCenter.x - halfW, startCenter.x + halfW), startCenter.y - halfH);
            case 3: return new Vector2(Random.Range(startCenter.x - halfW, startCenter.x + halfW), startCenter.y + halfH);
        }
        return startCenter;
    }

    void OnCollisionEnter2D(Collision2D _) { if (isWandering) StartCoroutine(PauseAndPickNewDestination()); }

    void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.blue;
        var size = new Vector3(width, height, 0f);
        var center = Application.isPlaying ? (Vector3)startCenter : transform.position;
        Gizmos.DrawWireCube(center, size);
    }
}

