// ----- File: C_AfterimageSpawner.cs -----
using UnityEngine;
using System.Collections;

public class C_AfterimageSpawner : MonoBehaviour
{
    [Header("Trail")]
    public float spawnInterval = 0.035f;
    public float ghostLifetime = 0.20f;
    public Color ghostTint = new Color(0.7f, 0.7f, 0.7f, 0.7f);
    public int sortingOrderOffset = -1; // draw behind player

    // Cached
    SpriteRenderer srcSR;

    void Awake()
    {
        srcSR ??= GetComponent<SpriteRenderer>();
        if (!srcSR) Debug.LogWarning("C_AfterimageSpawner: SpriteRenderer missing on this GameObject.");
    }

    // Burst where every ghost uses the SAME locked sprite & flips (captured at dodge start)
    public void StartBurst(float duration, Sprite lockedSprite, bool lockedFlipX, bool lockedFlipY)
    {
        StartCoroutine(BurstRoutine(duration, lockedSprite, lockedFlipX, lockedFlipY));
    }

    IEnumerator BurstRoutine(float duration, Sprite lockedSprite, bool lockedFlipX, bool lockedFlipY)
    {
        // Spawn one immediately so the trail starts right away
        SpawnGhost(lockedSprite, lockedFlipX, lockedFlipY);

        float t = 0f;
        while (t < duration)
        {
            yield return new WaitForSeconds(spawnInterval);
            t += spawnInterval;
            SpawnGhost(lockedSprite, lockedFlipX, lockedFlipY);
        }
    }

    void SpawnGhost(Sprite sprite, bool flipX, bool flipY)
    {
        // Assumes srcSR exists & sprite provided (per your style: Inspector preconditions are correct)
        var g = new GameObject("Afterimage");
        g.transform.SetPositionAndRotation(transform.position, transform.rotation);
        g.transform.localScale = transform.localScale;

        var gsr = g.AddComponent<SpriteRenderer>();
        gsr.sprite = sprite;
        gsr.flipX = flipX;
        gsr.flipY = flipY;
        gsr.sortingLayerID = srcSR.sortingLayerID;
        gsr.sortingOrder = srcSR.sortingOrder + sortingOrderOffset;
        gsr.color = ghostTint;

        StartCoroutine(FadeAndDestroy(gsr));
    }

    IEnumerator FadeAndDestroy(SpriteRenderer gsr)
    {
        float t = 0f;
        Color start = gsr.color;
        while (t < ghostLifetime)
        {
            float a = Mathf.Lerp(start.a, 0f, t / ghostLifetime);
            gsr.color = new Color(start.r, start.g, start.b, a);
            t += Time.deltaTime;
            yield return null;
        }
        Destroy(gsr.gameObject);
    }
}

// ----- File: C_Anim.cs -----
using UnityEngine;

public static class C_Anim
{
    // Writes only the directional floats on the Animator
    public static void UpdateAnimDirections(
        Animator animator,
        bool busy,
        Vector2 moveAxis,
        Vector2 lastMove,
        float MIN_DISTANCE)
    {
        // Only write move floats when not locked by another state
        if (!busy && moveAxis.sqrMagnitude > MIN_DISTANCE)
        {
            animator.SetFloat("moveX", moveAxis.x);
            animator.SetFloat("moveY", moveAxis.y);
        }

        // Always refresh idle facing sso the character remembers direction
        animator.SetFloat("idleX", lastMove.x);
        animator.SetFloat("idleY", lastMove.y);
    }

    // Single place to write attack-facing
    public static void SetAttackDirection(Animator animator, Vector2 dir)
    {
        animator.SetFloat("atkX", dir.x);
        animator.SetFloat("atkY", dir.y);
    }

    // Read back the attack facing used by Movement while attacking
    public static Vector2 GetAttackDirection(Animator animator)
    {
        return new Vector2(animator.GetFloat("atkX"), animator.GetFloat("atkY"));
    }

    // Read idle facing
    public static Vector2 GetIdleDirection(Animator animator)
    {
        return new Vector2(animator.GetFloat("idleX"), animator.GetFloat("idleY"));
    }
}

// ----- File: C_Dodge.cs -----
using UnityEngine;
using System.Collections;

public class C_Dodge : MonoBehaviour
{
    [Header("References")]
    Animator animator;
    P_InputActions input;

    public C_Stats c_Stats;
    public C_State c_State;
    public P_Movement p_Movement; // read lastMove for direction
    public E_Movement e_Movement;
    C_AfterimageSpawner afterimage;

    [Header("Config")]
    public bool useInput = true; // Player = true; Enemy can set false and call RequestDodge(dir) manually

    [Header("State (read-only)")]
    public bool IsDodging { get; private set; }
    public Vector2 ForcedVelocity => IsDodging ? forcedVelocity : Vector2.zero;

    float cooldownTimer;
    Vector2 forcedVelocity;

    void Awake()
    {
        animator ??= GetComponent<Animator>();
        c_Stats ??= GetComponent<C_Stats>();
        c_State ??= GetComponent<C_State>();
        p_Movement ??= GetComponent<P_Movement>();
        afterimage ??= GetComponent<C_AfterimageSpawner>();

        input ??= new P_InputActions();

        if (!animator) Debug.LogError($"{name}: Animator in C_Dodge missing.");
        if (!c_Stats) Debug.LogError($"{name}: C_Stats in C_Dodge missing.");
        if (!p_Movement && !e_Movement) Debug.LogError($"{name}: *_Movement in C_Dodge missing.");
        if (!afterimage)  Debug.LogError($"{name}: C_AfterimageSpawner in C_Dodge missing.");
    }

    void OnEnable()
    {
        if (useInput) input.Player.Dodge.Enable();
    }

    void OnDisable()
    {
        if (useInput) input.Player.Dodge.Disable();
    }

    void Update()
    {
        if (cooldownTimer > 0f) cooldownTimer -= Time.deltaTime;
        if (!useInput) return;

        if (input.Player.Dodge.WasPressedThisFrame())
        {
            // Read facing from movement; fallback down if zero
            Vector2 dir = (p_Movement && p_Movement.lastMove != Vector2.zero) ? p_Movement.lastMove.normalized : Vector2.down;
            RequestDodge(dir);
        }
    }

    // External API for AI/other scripts
    public void RequestDodge(Vector2 dir)
    {
        if (c_State && c_State.lockDodge && c_State.Is(C_State.ActorState.Attack)) return;
        if (IsDodging) return;
        if (cooldownTimer > 0f) return;

        // Lock the CURRENT sprite BEFORE we switch to the Dodge state
        var sr = GetComponent<SpriteRenderer>();
        var lockedSprite = sr ? sr.sprite : null;
        bool lockedFlipX = sr ? sr.flipX : false;
        bool lockedFlipY = sr ? sr.flipY : false;

        // Animation-cancel on purpose

        // Duration is derived from distance & speed
        float duration = (c_Stats.dodgeSpeed > 0f) ? (c_Stats.dodgeDistance / c_Stats.dodgeSpeed) : 0f;

        // Enter dodge
        IsDodging = true;

        forcedVelocity = dir.normalized * c_Stats.dodgeSpeed;

        // Spawn trail using the locked sprite for the whole dodge
        afterimage?.StartBurst(duration, lockedSprite, lockedFlipX, lockedFlipY);

        StartCoroutine(DodgeRoutine(duration));
    }

    public IEnumerator DodgeRoutine(float duration)
    {
        yield return new WaitForSeconds(duration);

        forcedVelocity = Vector2.zero;
        IsDodging = false;
        cooldownTimer = c_Stats.dodgeCooldown;
    }
}

// ----- File: C_FX.cs -----
using System.Collections;
using UnityEngine;

public class C_FX : MonoBehaviour
{
    [Header("References")]
    SpriteRenderer sprite;

    [Header("Flash")]
    public float flashDuration = 0.1f;
    public Color healTint   = new Color(0.3f, 1f, 0.3f, 1f);
    public Color damageTint = new Color(1f, 0.3f, 0.3f, 1f);

    [Header("Death")]
    public float deathFadeTime = 1.5f;

    Color baseRGB;

    void Awake()
    {
        sprite ??= GetComponent<SpriteRenderer>();
        if (!sprite) Debug.LogError($"{name}: SpriteRenderer in C_FX missing.", this);

        baseRGB = sprite.color;
    }

    public void FlashOnDamaged() => StartCoroutine(Flash(damageTint));
    public void FlashOnHealed()  => StartCoroutine(Flash(healTint));

    IEnumerator Flash(Color tint)
    {
        float a = sprite.color.a;
        sprite.color = new Color(tint.r, tint.g, tint.b, a);
        yield return new WaitForSeconds(flashDuration);
        sprite.color = new Color(baseRGB.r, baseRGB.g, baseRGB.b, a);
    }

    public IEnumerator FadeAndDestroy(GameObject go)
    {
        float t = 0f;
        var c = sprite.color;
        while (t < deathFadeTime)
        {
            t += Time.deltaTime;
            float k = 1f - Mathf.Clamp01(t / deathFadeTime);
            sprite.color = new Color(c.r, c.g, c.b, k);
            yield return null;
        }
        Destroy(go);
    }
}

// ----- File: C_Health.cs -----
using System;
using UnityEngine;

[DisallowMultipleComponent]
public class C_Health : MonoBehaviour
{
    [Header("References (Only P or E _Stats)")]
    public C_Stats c_Stats;
    public C_Dodge c_Dodge;
    public C_FX fx;

    P_InputActions input;
    [Header("Allow Dodge/IFrames?")]
    public bool useDodgeIFrames = true;

    [Header("Debug Keys (N/B)")]
    public int takingDamageAmount = 1;
    public int healingAmount = 1;

    // Events
    public event Action<int> OnDamaged;
    public event Action<int> OnHealed;
    public event Action OnDied;

    // Accessors
    int MaxHP    => c_Stats.maxHP;
    int CurrentHP { get => c_Stats.currentHP; set => c_Stats.currentHP = value; }
    public int AR => c_Stats.AR;
    public int MR => c_Stats.MR;
    public bool IsAlive => CurrentHP > 0;

    // cached delegates so we can unsubscribe
    Action<int> fxDamagedHandler;
    Action<int> fxHealedHandler;
    Action      fxDiedHandler;

    void Awake()
    {
        c_Stats ??= GetComponent<C_Stats>();
        c_Dodge ??= GetComponent<C_Dodge>();
        fx      ??= GetComponent<C_FX>();

        if (!c_Stats) Debug.LogError($"{name}: C_Stats in C_Health missing.", this);
        if (!c_Dodge && useDodgeIFrames) Debug.LogError($"{name}: C_Dodge in C_Health missing.", this);
        if (!fx) Debug.LogWarning($"{name}: C_FX not assigned; no flashes / death fade.", this);
    }

    void OnEnable()
    {
        input ??= new P_InputActions();
        input.Debug.Enable();

        if (fx != null)
        {
            fxDamagedHandler ??= _ => fx.FlashOnDamaged();
            fxHealedHandler  ??= _ => fx.FlashOnHealed();
            fxDiedHandler    ??= () => StartCoroutine(fx.FadeAndDestroy(gameObject));

            OnDamaged += fxDamagedHandler;
            OnHealed  += fxHealedHandler;
            OnDied    += fxDiedHandler;
        }
    }

    void OnDisable()
    {
        input?.Debug.Disable();

        if (fx != null)
        {
            OnDamaged -= fxDamagedHandler;
            OnHealed  -= fxHealedHandler;
            OnDied    -= fxDiedHandler;
        }
    }

    void Update()
    {
        if (input.Debug.OnDamaged.WasPressedThisFrame())
            ChangeHealth(-Mathf.Abs(takingDamageAmount));

        if (input.Debug.OnHealed.WasPressedThisFrame())
            ChangeHealth(Mathf.Abs(healingAmount));
    }

    // AD+AP combined calculation (armor/mres as % 0–100)
    public int ApplyDamage(int attackerAD, int attackerAP, int weaponAD, int weaponAP)
    {
        if (!IsAlive) return 0;
        if (useDodgeIFrames && c_Dodge.IsDodging) return 0;

        int total =
            Mathf.RoundToInt((attackerAD + weaponAD) * (1f - Mathf.Clamp01(AR / 100f))) +
            Mathf.RoundToInt((attackerAP + weaponAP) * (1f - Mathf.Clamp01(MR / 100f)));

        int before = CurrentHP;
        int dealt = Mathf.Clamp(total, 0, before);
        if (dealt > 0) ChangeHealth(-dealt);
        return dealt;
    }

    // Single entrypoint for damage/heal
    public void ChangeHealth(int amount)
    {
        if (!IsAlive || (amount < 0 && useDodgeIFrames && c_Dodge.IsDodging)) return;

        int before    = CurrentHP;
        int after     = Mathf.Clamp(before + amount, 0, MaxHP);
        int actual    = after - before;
            CurrentHP = after;

        if (actual < 0) OnDamaged?.Invoke(-actual);
        else if (actual > 0) OnHealed?.Invoke(actual);

        if (after == 0) OnDied?.Invoke();
    }

    public void Kill() => ChangeHealth(-MaxHP);
}

// ----- File: C_State.cs -----
using UnityEngine;

[DisallowMultipleComponent]
public class C_State : MonoBehaviour
{
    public enum ActorState { Idle, Move, Attack, Dodge }

    [Header("References")]
    Animator animator;
    Rigidbody2D rb;

    public P_Movement p_Movement;
    public P_Combat   p_Combat;
    public E_Movement e_Movement;
    public E_Combat   e_Combat;
    public C_Dodge    c_Dodge;
    C_Health   c_Health;

    [Header("Locks")]
    public bool lockMove  = true;
    public bool lockDodge = true;

    // Current finite state
    public ActorState CurrentState = ActorState.Idle;

    const float MIN_DISTANCE = 0.0001f;

    void Awake()
    {
        rb ??= GetComponent<Rigidbody2D>();
        animator ??= GetComponent<Animator>();

        p_Movement ??= GetComponent<P_Movement>();
        p_Combat ??= GetComponent<P_Combat>();
        e_Movement ??= GetComponent<E_Movement>();
        e_Combat ??= GetComponent<E_Combat>();
        c_Dodge ??= GetComponent<C_Dodge>();
        c_Health   ??= GetComponent<C_Health>();

        if (!rb) Debug.LogError($"{name}: Rigidbody2D in C_State missing.");
        if (!animator) Debug.LogError($"{name}: Animator in C_State missing.");
        if (!p_Movement && !e_Movement) Debug.LogError($"{name}: *_Movement in C_State missing.");
        if (!p_Combat   && !e_Combat)   Debug.LogError($"{name}: *_Combat in C_State missing.");
    }

    void OnEnable()
    {
        if (c_Health != null) c_Health.OnDied += OnDiedHandler;
    }

    void OnDisable()
    {
        if (c_Health != null) c_Health.OnDied -= OnDiedHandler;
    }
    void OnDiedHandler()
    {
        // lock movement
        p_Movement?.SetDisabled(true);
        e_Movement?.SetDisabled(true);

        // play death animation
        animator?.SetTrigger("Die");
    }

    void Update()
    {
        var next = PickState();
        if (next != CurrentState) CurrentState = next;
        ApplyAnimator(CurrentState);
    }

    // Public API for Enum
    public bool Is(ActorState s) => CurrentState == s;
    public bool IsAttackingNow     => CurrentState == ActorState.Attack;
    public bool IsDodgingNow       => CurrentState == ActorState.Dodge;
    public bool IsMovingNow        => CurrentState == ActorState.Move;

    //  Public API for Bool
    public bool CheckIsBusy()
    {
        if (Is(ActorState.Dodge)) return true;
        if (Is(ActorState.Attack) && lockMove) return true;
        return false;
    }
    
    // Pick the correct state
    ActorState PickState()
    {
        // Dodge (optional component)
        if (c_Dodge && c_Dodge.IsDodging) return ActorState.Dodge;

        // Attack (player OR enemy driving isAttacking)
        if ((p_Combat && p_Combat.isAttacking) || (e_Combat && e_Combat.isAttacking))
            return ActorState.Attack;

        // Movement inferred from body velocity (respects ForcedVelocity/knockback)
        if (rb.linearVelocity.sqrMagnitude > MIN_DISTANCE) return ActorState.Move;

        return ActorState.Idle;
    }

    void ApplyAnimator(ActorState s)
    {
        // Single source of truth for animator bools
        animator.SetBool("isDodging",   s == ActorState.Dodge);
        animator.SetBool("isAttacking", s == ActorState.Attack);
        animator.SetBool("isMoving",    s == ActorState.Move);
    }

    // Public API for Floats
    public void UpdateAnimDirections(Vector2 moveAxis, Vector2 lastMove)
    {
        bool busy = CheckIsBusy();
        if (!busy && moveAxis.sqrMagnitude > MIN_DISTANCE)
        {
            animator.SetFloat("moveX", moveAxis.x);
            animator.SetFloat("moveY", moveAxis.y);
        }
        animator.SetFloat("idleX", lastMove.x);
        animator.SetFloat("idleY", lastMove.y);
    }

    public void SetAttackDirection(Vector2 dir)
    {
        animator.SetFloat("atkX", dir.x);
        animator.SetFloat("atkY", dir.y);
    }

    public Vector2 GetAttackDirection()
    {
        return new Vector2(animator.GetFloat("atkX"), animator.GetFloat("atkY"));
    }

    public Vector2 GetIdleDirection()
    {
        return new Vector2(animator.GetFloat("idleX"), animator.GetFloat("idleY"));
    }
}

// ----- File: C_StatModifier.cs -----
using System;
using UnityEngine;

// A central enum for all stats that can be modified.
public enum StatType
{
    // Core Stats
    AttackDamage,
    AbilityPower,
    MoveSpeed,
    MaxHealth,
    Armor,
    MagicResist,
    KnockbackResist,

    // Special Stats
    LifestealPercent,

    // Consumable-only Stats
    Heal,
}

// NEW: Defines how a modifier's value is applied.
public enum ModifierType
{
    Flat,       // Adds a fixed value (e.g., +10 Health).
    Percent,    // Adds a percentage of the stat's base value (e.g., +10% Health).
}

// A single, universal definition for any change to a stat.
[Serializable]
public class StatModifier
{
    public StatType Stat;
    public ModifierType Type; // Is this a Flat or Percent modifier?
    public float Value;

    [Header("0=Permanent, 1=Instant, >1=Timed Effect")]
    public float Duration;

    [Header("Tick Effect (for Duration > 1)")]
    public bool IsOverTime; // If true, Value is applied every second for Duration.
}

// ----- File: C_Stats.cs -----
using UnityEngine;

[DisallowMultipleComponent]
public class C_Stats : MonoBehaviour
{
    [Header("Core Stats")]
    public int AD = 1; // Attack Damage
    public int AP = 0; // Ability Power
    public float MS = 5f; // Move Speed

    public int maxHP = 10;
    public int currentHP = 10;
    public int AR = 0; // Armor
    public int MR = 0; // Magic Resist
    public float KR = 10f; // knockback Resist

    [Header("Special Stats")]
    public float lifestealPercent = 0f;

    [Header("Combat")]
    public float attackCooldown = 1.2f;
    public int   collisionDamage = 1;   // per-enemy
    public float collisionTick   = 0.5f; // seconds between ticks while touching

    [Header("Dodge (used by Player; Enemy can ignore)")]
    public float dodgeSpeed = 11f;
    public float dodgeDistance = 2.0f;
    public float dodgeCooldown = 0.45f;

    [Header("Placeholders")]
    public float knockbackForce = 0f;
    public float stunTime = 0f;
}

// ----- File: C_StatsManager.cs -----
// d:\Google Drive\Code\Final project\NinjaAdventure\Assets\GAME\Scripts\Character\C_StatsManager.cs
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

[DisallowMultipleComponent]
public class C_StatsManager : MonoBehaviour
{
    [Header("Component References")]
    public C_Stats c_Stats;
    public C_Health c_Health;

    // Base stats that can be permanently modified.
    private int baseAD, baseAP, baseMaxHP, baseAR, baseMR;
    private float baseMS, baseKR, baseLifestealPercent;

    // List of temporary buffs/debuffs.
    private readonly List<StatModifier> activeModifiers = new List<StatModifier>();

    void Awake()
    {
        c_Stats ??= GetComponent<C_Stats>();
        c_Health ??= GetComponent<C_Health>();

        if (!c_Stats) Debug.LogError($"{name}: C_Stats is missing.", this);
        if (!c_Health) Debug.LogError($"{name}: C_Health is missing.", this);

        // Snapshot the initial stats from the editor into our base stats.
        baseAD = c_Stats.AD;
        baseAP = c_Stats.AP;
        baseMS = c_Stats.MS;
        baseMaxHP = c_Stats.maxHP;
        baseAR = c_Stats.AR;
        baseMR = c_Stats.MR;
        baseKR = c_Stats.KR;
        baseLifestealPercent = c_Stats.lifestealPercent;
    }

    /// <summary>
    /// The main entry point for applying any stat change.
    /// </summary>
    public void ApplyModifier(StatModifier modifier)
    {
        // Rule: Duration == 1 is an INSTANT, one-shot effect.
        if (modifier.Duration == 1)
        {
            ApplySingleStatChange(modifier.Stat, modifier.Value, modifier.Type);
            return; // It's done. Do not store or track it.
        }

        // Rule: Duration == 0 is a PERMANENT upgrade to base stats.
        if (modifier.Duration == 0)
        {
            PromoteModifierToBaseStats(modifier);
            RecalculateAllStats(); // Recalculate to apply the new base stat.
            return;
        }

        // Rule: Duration > 1 is a TIMED effect.
        if (modifier.Duration > 1)
        {
            if (modifier.IsOverTime)
            {
                // This is a ticking effect, like Heal-over-Time.
                StartCoroutine(ApplyOverTimeEffect(modifier));
            }
            else
            {
                // This is a temporary buff, like +10 AD for 10s.
                activeModifiers.Add(modifier);
                RecalculateAllStats();
                StartCoroutine(RevertModifierAfterDelay(modifier));
            }
        }
    }

    /// <summary>
    /// Bakes a permanent modifier directly into the base stats.
    /// </summary>
    private void PromoteModifierToBaseStats(StatModifier modifier)
    {
        // For now, we only support promoting Flat modifiers permanently.
        if (modifier.Type == ModifierType.Percent)
        {
            Debug.LogWarning($"Cannot permanently promote a Percentage modifier for {modifier.Stat}. This is not supported. Ignoring modifier.", this);
            return;
        }

        switch (modifier.Stat)
        {
            case StatType.AttackDamage:     baseAD += (int)modifier.Value; break;
            case StatType.AbilityPower:     baseAP += (int)modifier.Value; break;
            case StatType.MoveSpeed:        baseMS += modifier.Value; break;
            case StatType.MaxHealth:        baseMaxHP += (int)modifier.Value; break;
            case StatType.Armor:            baseAR += (int)modifier.Value; break;
            case StatType.MagicResist:      baseMR += (int)modifier.Value; break;
            case StatType.KnockbackResist:  baseKR += modifier.Value; break;
            case StatType.LifestealPercent: baseLifestealPercent += modifier.Value; break;
            case StatType.Heal:             c_Health.ChangeHealth((int)modifier.Value); break; // Permanent heal is just an instant heal.
        }
    }

    /// <summary>
    /// Recalculates final stats based on: Base Stats + Flat Buffs + Percent Buffs.
    /// </summary>
    private void RecalculateAllStats()
    {
        // 1. Reset stats to their current base values.
        c_Stats.AD = baseAD;
        c_Stats.AP = baseAP;
        c_Stats.MS = baseMS;
        c_Stats.maxHP = baseMaxHP;
        c_Stats.AR = baseAR;
        c_Stats.MR = baseMR;
        c_Stats.KR = baseKR;
        c_Stats.lifestealPercent = baseLifestealPercent;

        // 2. Apply all temporary FLAT modifiers.
        foreach (var mod in activeModifiers.Where(m => m.Type == ModifierType.Flat))
        {
            ApplySingleStatChange(mod.Stat, mod.Value, mod.Type);
        }

        // 3. Apply all temporary PERCENT modifiers.
        // This now scales on top of the (base + flat) values.
        foreach (var mod in activeModifiers.Where(m => m.Type == ModifierType.Percent))
        {
            ApplySingleStatChange(mod.Stat, mod.Value, mod.Type);
        }

        // Ensure current health is clamped after any MaxHP changes.
        c_Stats.currentHP = Mathf.Min(c_Stats.currentHP, c_Stats.maxHP);
    }

    /// <summary>
    /// Applies a single stat change. Handles Flat vs Percent logic.
    /// </summary>
    private void ApplySingleStatChange(StatType stat, float value, ModifierType type)
    {
        if (type == ModifierType.Percent)
        {
            // For percentages, get the stat's current value and multiply.
            float currentValue = GetCurrentStatValue(stat);
            value = currentValue * value; // e.g., 150 * 0.10 = 15
        }

        switch (stat)
        {
            case StatType.Heal:             c_Health.ChangeHealth((int)value); break;
            case StatType.AttackDamage:     c_Stats.AD += (int)value; break;
            case StatType.AbilityPower:     c_Stats.AP += (int)value; break;
            case StatType.MoveSpeed:        c_Stats.MS += value; break;
            case StatType.MaxHealth:        c_Stats.maxHP += (int)value; break;
            case StatType.Armor:            c_Stats.AR += (int)value; break;
            case StatType.MagicResist:      c_Stats.MR += (int)value; break;
            case StatType.KnockbackResist:  c_Stats.KR += value; break;
            case StatType.LifestealPercent: c_Stats.lifestealPercent += value; break;
        }
    }

    // Helper to get the LIVE value of a stat for percentage calculations.
    private float GetCurrentStatValue(StatType stat)
    {
        switch (stat)
        {
            case StatType.AttackDamage: return c_Stats.AD;
            case StatType.AbilityPower: return c_Stats.AP;
            case StatType.MoveSpeed: return c_Stats.MS;
            case StatType.MaxHealth: return c_Stats.maxHP;
            case StatType.Armor: return c_Stats.AR;
            case StatType.MagicResist: return c_Stats.MR;
            case StatType.KnockbackResist: return c_Stats.KR;
            case StatType.LifestealPercent: return c_Stats.lifestealPercent;
            default: return 0;
        }
    }

    private IEnumerator RevertModifierAfterDelay(StatModifier modifier)
    {
        yield return new WaitForSeconds(modifier.Duration);
        activeModifiers.Remove(modifier);
        RecalculateAllStats();
    }

    private IEnumerator ApplyOverTimeEffect(StatModifier modifier)
    {
        // Rule: Only allow ticking effects for Heal.
        if (modifier.Stat != StatType.Heal)
        {
            Debug.LogWarning($"Stat Modifier for {modifier.Stat} has IsOverTime=true, but this is only supported for Heal. Ignoring.", this);
            yield break;
        }

        float timePassed = 0;
        while (timePassed < modifier.Duration)
        {
            yield return new WaitForSeconds(1.0f);
            // Apply one "tick" of the effect. It's always Flat for ticking effects.
            ApplySingleStatChange(modifier.Stat, modifier.Value, ModifierType.Flat);
            timePassed += 1.0f;
        }
    }
}

