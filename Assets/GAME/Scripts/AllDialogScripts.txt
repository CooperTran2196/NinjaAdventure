// ----- File: D_ActorSO.cs -----
// <summary>
// Used to define an actor (NPC) in the dialogue system.
// </summary>

using UnityEngine;

[CreateAssetMenu(fileName = "ActorSO", menuName = "Dialogue/ActorSO")]
public class D_ActorSO : ScriptableObject
{
    public string characterName;
    public Sprite avatar;
}

// ----- File: D_HistoryTracker.cs -----
// <summary>
// Tracks NPCs the player has spoken to in the dialogue system.
// </summary>

using UnityEngine;
using System.Collections.Generic;

public class D_HistoryTracker : MonoBehaviour
{
    // Using HashSet to avoid duplicate entries/ Don't care about order
    public readonly HashSet<D_ActorSO> spokenNPCs = new();
    // Locations visited (merged from former D_LocationHistoryTracker)
    public readonly HashSet<D_LocationSO> locationsVisited = new();

    // Add the NPC to spkenNPCs if not already present
    public void RecordNPC(D_ActorSO actorSO)
    {
        if (spokenNPCs.Add(actorSO))
        {
            Debug.Log($"Spoken with: {actorSO.characterName}");
        }
    }

    // Check if we've spoken to this NPC before
    public bool HasSpokenWith(D_ActorSO actorSO)
    {
        return spokenNPCs.Contains(actorSO);
    }

    // LOCATION API (was D_LocationHistoryTracker)
    public void RecordLocation(D_LocationSO locationSO)
    {
        if (locationsVisited.Add(locationSO))
        {
            Debug.Log($"Visited location: {locationSO.displayName}");
        }
    }

    public bool HasVisited(D_LocationSO locationSO)
    {
        return locationsVisited.Contains(locationSO);
    }
}

// ----- File: D_LocationSO.cs -----
// <summary>
// Used to define a location in the dialogue system.
// </summary>

using UnityEngine;

[CreateAssetMenu(fileName = "LocationSO", menuName = "Dialogue/LocationSO")]
public class D_LocationSO : ScriptableObject
{
    [Header("Unique ID for this location")]
    public string locationID;
    [Header("The name shown in dialogue/UI")]
    public string displayName = "Auto Filled by OnValidate";

    void OnValidate()
    {
        displayName = name;
    }
}

// ----- File: D_LocationVisitedTrigger.cs -----
// <summary>
// Attach this to a trigger collider to mark a location as visited when the player enters it.
// </summary>
 
using UnityEngine;

[RequireComponent(typeof(Collider2D))]

public class D_LocationVisitedTrigger : MonoBehaviour
{
    [SerializeField] D_LocationSO location;
    [Header("SET FALSE on teleporters")]
    [SerializeField] bool destroyOnTouch = true;

    void OnTriggerEnter2D(Collider2D other)
    {
        if (!other.CompareTag("Player")) return;

        SYS_GameManager.Instance.d_HistoryTracker.RecordLocation(location);
        if (destroyOnTouch)
            Destroy(gameObject);
    }
}

// ----- File: D_Manager.cs -----
// <summary>
// Manages dialog flow, UI updates, and player choices.
// </summary>

using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class D_Manager : MonoBehaviour
{
    [Header("UI")]
    public Image avatar;
    public TMP_Text characterNameText;
    public TMP_Text dialogText;
    public CanvasGroup canvasGroup;

    [Header("Option Buttons (max 3)")]
    public Button[] optionButtons;

    D_SO currentDialog;
    int dialogIndex;
    public bool isDialogActive;

    void Awake()
    {
        canvasGroup.alpha = 0f;
        canvasGroup.interactable = false;
        canvasGroup.blocksRaycasts = false;

        // hide all option buttons at boot
        foreach (var b in optionButtons)
            b.gameObject.SetActive(false);
    }

    public void StartDialog(D_SO dialog)
    {
        currentDialog = dialog;
        dialogIndex = 0;
        isDialogActive = true;
        ClearOptions();
        ShowDialog();
    }

    void ShowDialog()
    {
        // Clear previous optionList
        ClearOptions();
        // advancing a line hides old choices, if any
        var line = currentDialog.lines[dialogIndex++]; 
        // Record NPC spoken to
        SYS_GameManager.Instance.d_HistoryTracker.RecordNPC(line.speaker);
        // Update UI
        avatar.sprite           = line.speaker.avatar;
        characterNameText.text  = line.speaker.characterName;
        dialogText.text         = line.text;
        // Show UI
        canvasGroup.alpha = 1f;
        canvasGroup.interactable = true;
        canvasGroup.blocksRaycasts = true;
    }

    // Called to advance dialog or show choices
    public void AdvanceDialog()
    {
        if (dialogIndex < currentDialog.lines.Length)
        {
            ShowDialog();
        }
        else
        {
            ShowChoices();
        }
    }

    void ShowChoices()
    {
        // Clear previous optionList
        ClearOptions();
        var optionList = currentDialog.optionList;

        // Show available option buttons, or a simple End button if none
        if (optionList != null && optionList.Length > 0)
        {   
            // Show as many optionList as we have, up to the max buttons available (3)
            int count = Mathf.Min(optionList.Length, optionButtons.Length);
            for (int i = 0; i < count; i++)
            {
                var button = optionButtons[i];
                var option = optionList[i]; // capture for lambda

                button.GetComponentInChildren<TMP_Text>().text = option.optionButtonText;
                button.onClick.AddListener(() => ChooseOption(option.nextDialog));
                button.gameObject.SetActive(true);
            }
        }
        else
        {
            // No optionList -> show a simple End button on slot 0
            var endButton = optionButtons[0];
            endButton.GetComponentInChildren<TMP_Text>().text = "End";
            endButton.onClick.AddListener(EndDialog_WithRewards);
            endButton.gameObject.SetActive(true);
        }
    }

    // Called when player selects an option button
    void ChooseOption(D_SO nextDialog)
    {
        if (nextDialog == null)
        {
            EndDialog_WithRewards();
            return;
        }
        
        // Start next dialog
        StartDialog(nextDialog);
    }

    // Grant auto rewards if any
    void GrantAutoRewards(D_SO dialog)
    {
        var rewards = dialog.autoRewards;
        if (rewards == null || rewards.Length == 0) return;

        // Grant each reward
        for (int i = 0; i < rewards.Length; i++)
        {
            var reward = rewards[i];
            INV_Manager.Instance.AddItem(reward.itemSO, reward.quantity);
        }
    }

    // Call this when the dialog ends with rewards
    public void EndDialog_WithRewards()
    {
        // first grant rewards if any
        GrantAutoRewards(currentDialog);

        // then end dialog
        EndDialog();
    }

    // Call this for a simple end, no rewards
    public void EndDialog()
    {
        dialogIndex = 0;
        isDialogActive = false;
        ClearOptions();

        canvasGroup.alpha = 0f;
        canvasGroup.interactable = false;
        canvasGroup.blocksRaycasts = false;
    }

    // Clear all option buttons and their listeners
    void ClearOptions()
    {
        foreach (var button in optionButtons)
        {
            button.onClick.RemoveAllListeners();
            button.gameObject.SetActive(false);
        }
    }
}

// ----- File: D_SO.cs -----
// <summary>
// Used to define a dialog node in the dialog system.
// </summary>

using System.Collections.Generic;
using Unity.AppUI.UI;
using UnityEngine;

[CreateAssetMenu(fileName = "DialogSO", menuName = "Dialog/DialogNode")]
public class D_SO : ScriptableObject
{
    [Header("Lines of dialog in this dialog")]
    public D_LineSO[] lines;
    [Header("An option button at the end of a dialog")]
    public D_Option[] optionList;

    [Header("Conditional Requirements (OPTIONAL)")]
    [Header("Must have spoken to these NPCS to see this dialog")]
    public D_ActorSO[] requiredNPCs;

    [Header("Must have visited these LOCATIONS to see this dialog")]
    public D_LocationSO[] requiredLocations;

    [Header("Must have these ITEMS to see this dialog")]
    public INV_ItemSO[] requiredItems;

    [Header("Auto Rewards after this dialog end (OPTIONAL)")]
    public D_AutoReward[] autoRewards;

    [Header("Control Flags")]
    [Header("If TRUE, remove THIS DIALOG from the NPCs list after play")]
    [Header("ex: Quest dialogs, one-time use")]
    public bool removeAfterPlay;
    [Header("Also remove THESE DIALOGS from the NPCs list")]
    [Header("ex: Dialogs before quest")]
    public List<D_SO> removeTheseOnPlay = new();

    // Try to prove FALSE by condition checks, else return true
    public bool IsConditionMet()
    {
        // 1/ NPC gate
        if (requiredNPCs.Length > 0)
        {
            foreach (var npc in requiredNPCs)
            {
                if (!SYS_GameManager.Instance.d_HistoryTracker.HasSpokenWith(npc))
                    return false;
            }
        }

        // 2/ LOCATION gate
        if (requiredLocations.Length > 0)
        {
            foreach (var location in requiredLocations)
            {
                if (!SYS_GameManager.Instance.d_HistoryTracker.HasVisited(location))
                    return false;
            }
        }

        // 3/ Items
        if (requiredItems.Length > 0)
        {
            foreach (var itemSO in requiredItems)
                if (!INV_Manager.Instance.HasItem(itemSO))
                    return false;
        }
        return true;
    }

    // Auto set removeAfterPlay if autoRewards assigned
    void OnValidate()
    {
        if (autoRewards != null && autoRewards.Length > 0)
            removeAfterPlay = true;
        else
            return;
    }
}

// <summary>
// A single line of dialog spoken by an actor.
// Contains a D_ActorSO and the text they speak.
// </summary>
[System.Serializable]
public class D_LineSO
{
    public D_ActorSO speaker;

    [TextArea(3, 5)]
    public string text;
}

// <summary>
// An option presented to the player at the end of a dialog.
// Selecting this option leads to another dialog node (nextDialog).
// </summary>
[System.Serializable]
public class D_Option
{
    public string optionButtonText;
    public D_SO nextDialog;
}

// <summary>
// Automatically grants specified items when a particular dialog node ends.
// </summary>
[System.Serializable]
public class D_AutoReward
{
    public INV_ItemSO itemSO;
    public int quantity = 1;
}

