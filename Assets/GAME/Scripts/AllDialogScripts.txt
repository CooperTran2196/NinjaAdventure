// ----- File: D_ActorSO.cs -----
// <summary>
// Used to define an actor (NPC) in the dialogue system.
// </summary>

using UnityEngine;

[CreateAssetMenu(fileName = "ActorSO", menuName = "Dialogue/ActorSO")]
public class D_ActorSO : ScriptableObject
{
    public string actorName;
    public Sprite portrait;
}

// ----- File: D_HistoryTracker.cs -----
// <summary>
// Tracks NPCs the player has spoken to in the dialogue system.
// </summary>

using UnityEngine;
using System.Collections.Generic;

public class D_HistoryTracker : MonoBehaviour
{
    public static D_HistoryTracker Instance;

    // Using HashSet to avoid duplicate entries/ Don't care about order
    public readonly HashSet<D_ActorSO> spokenNPCs = new();

    // Singleton pattern
    void Awake()
    {
        if (Instance != null)
        {
            Destroy(gameObject);
            return;
        }
        Instance = this;
    }

    // Add the NPC to spkenNPCs if not already present
    public void RecordNPC(D_ActorSO actorSO)
    {
        if (spokenNPCs.Add(actorSO))
        {
            Debug.Log($"Spoken with: {actorSO.actorName}");
        }
    }

    // Check if we've spoken to this NPC before
    public bool HasSpokenWith(D_ActorSO actorSO)
    {
        return spokenNPCs.Contains(actorSO);
    }
}

// ----- File: D_LocationHistoryTracker.cs -----
// <summary>
// Tracks locations visited by the player in the dialogue system.
// </summary>

using UnityEngine;
using System.Collections.Generic;

public class D_LocationHistoryTracker : MonoBehaviour
{
    public static D_LocationHistoryTracker Instance;

    // Using HashSet to avoid duplicate entries/ Don't care about order
    public readonly HashSet<D_LocationSO> locationsVisited = new();

    // Singleton pattern
    void Awake()
    {
        if (Instance != null)
        {
            Destroy(gameObject);
            return;
        }
        Instance = this;
    }

    // Add the location to locationsVisited if not already present
    public void RecordLocation(D_LocationSO locationSO)
    {
        if (locationsVisited.Add(locationSO))
        {
            Debug.Log($"Visited location: {locationSO.displayName}");
        }
    }

    // Check if we've visited this location before
    public bool HasVisited(D_LocationSO locationSO)
    {
        return locationsVisited.Contains(locationSO);
    }
}

// ----- File: D_LocationSO.cs -----
// <summary>
// Used to define a location in the dialogue system.
// </summary>

using UnityEngine;

[CreateAssetMenu(fileName = "LocationSO", menuName = "Dialogue/LocationSO")]
public class D_LocationSO : ScriptableObject
{
    [Header("Unique ID for this location")]
    public string locationID;
    [Header("The name shown in dialogue/UI")]
    public string displayName = "Auto Filled by OnValidate";

    void OnValidate()
    {
        displayName = name;
    }
}

// ----- File: D_LocationVisitedTrigger.cs -----
// <summary>
// Attach this to a trigger collider to mark a location as visited when the player enters it.
// </summary>
 
using UnityEngine;

[RequireComponent(typeof(Collider2D))]

public class D_LocationVisitedTrigger : MonoBehaviour
{
    [SerializeField] D_LocationSO location;
    [Header("SET FALSE on teleporters")]
    [SerializeField] bool destroyOnTouch = true;

    void OnTriggerEnter2D(Collider2D other)
    {
        if (!other.CompareTag("Player")) return;

        D_LocationHistoryTracker.Instance.RecordLocation(location);

        if (destroyOnTouch)
            Destroy(gameObject);
    }
}

// ----- File: D_Manager.cs -----
// <summary>
// Manages dialogue flow, UI updates, and player choices.
// </summary>

using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class D_Manager : MonoBehaviour
{
    public static D_Manager Instance { get; private set; }

    [Header("UI")]
    public Image portrait;
    public TMP_Text actorNameText;
    public TMP_Text dialogueText;
    public CanvasGroup canvasGroup;

    [Header("Choices")]
    public Button[] choiceButtons;

    D_SO currentDialogue;
    int dialogueIndex;
    public bool isDialogueActive { get; private set; }

    void Awake()
    {
        if (Instance == null) Instance = this;
        else { Destroy(gameObject); return; }

        canvasGroup.alpha = 0f;
        canvasGroup.interactable = false;
        canvasGroup.blocksRaycasts = false;

        // hide all option buttons at boot
        foreach (var b in choiceButtons)
            b.gameObject.SetActive(false);
    }

    void ShowDialogue()
    {
        // advancing a line hides old choices, if any
        ClearChoices();

        var line = currentDialogue.lines[dialogueIndex++]; 

        D_HistoryTracker.Instance.RecordNPC(line.speaker);
        portrait.sprite    = line.speaker.portrait;
        actorNameText.text = line.speaker.actorName;
        dialogueText.text  = line.text;

        canvasGroup.alpha = 1f;
        canvasGroup.interactable = true;
        canvasGroup.blocksRaycasts = true;
    }

    public void StartDialogue(D_SO dialogue)
    {
        currentDialogue = dialogue;
        dialogueIndex = 0;
        isDialogueActive = true;
        ClearChoices();
        ShowDialogue();
    }

    public void AdvanceDialogue()
    {
        if (dialogueIndex < currentDialogue.lines.Length)
        {
            ShowDialogue();
        }
        else
        {
            ShowChoices();
        }
    }

    void ShowChoices()
    {
        ClearChoices();
        var opts = currentDialogue.options;

        if (opts != null && opts.Length > 0)
        {
            int count = Mathf.Min(opts.Length, choiceButtons.Length);
            for (int i = 0; i < count; i++)
            {
                var btn = choiceButtons[i];
                var opt = opts[i]; // capture for lambda

                btn.GetComponentInChildren<TMP_Text>(true).text = opt.optionText;
                btn.onClick.RemoveAllListeners();
                btn.onClick.AddListener(() => ChooseOption(opt.nextDialogue));
                btn.gameObject.SetActive(true);
            }
        }
        else
        {
            // no options â†’ show a simple End button on slot 0
            var endBtn = choiceButtons[0];
            endBtn.GetComponentInChildren<TMP_Text>(true).text = "End";
            endBtn.onClick.RemoveAllListeners();
            endBtn.onClick.AddListener(EndDialogue);
            endBtn.gameObject.SetActive(true);
        }
    }

    void ChooseOption(D_SO nextDialogue)
    {
        ClearChoices();

        if (nextDialogue == null)
        {
            EndDialogue();
            return;
        }

        StartDialogue(nextDialogue);
    }

    public void EndDialogue()
    {
        dialogueIndex = 0;
        isDialogueActive = false;
        ClearChoices();

        canvasGroup.alpha = 0f;
        canvasGroup.interactable = false;
        canvasGroup.blocksRaycasts = false;
    }

    void ClearChoices()
    {
        foreach (var b in choiceButtons)
        {
            b.onClick.RemoveAllListeners();
            b.gameObject.SetActive(false);
        }
    }
}

// ----- File: D_SO.cs -----
// <summary>
// Used to define a dialogue node in the dialogue system.
// </summary>

using Unity.AppUI.UI;
using UnityEngine;

[CreateAssetMenu(fileName = "DialogueSO", menuName = "Dialogue/DialogueNode")]
public class D_SO : ScriptableObject
{
    public D_LineSO[] lines;
    public D_Option[] options;

    [Header("Conditional Requirements (OPTIONAL)")]
    [Header("Must have spoken to these NPCs to see this dialogue")]
    public D_ActorSO[] requiredNPCs;

    [Header("Must have visited these locations to see this dialogue")]
    public D_LocationSO[] requiredLocations;

    [Header("Must have these items to see this dialogue")]
    public INV_ItemSO[] requiredItems;

    // Try to prove FALSE by condition checks, else return true
    public bool IsConditionMet()
    {
        // 1/ NPC gate
        if (requiredNPCs.Length > 0)
        {
            foreach (var npc in requiredNPCs)
            {
                if (!D_HistoryTracker.Instance.HasSpokenWith(npc))
                    return false;
            }
        }

        // 2/ LOCATION gate
        if (requiredLocations.Length > 0)
        {
            foreach (var location in requiredLocations)
            {
                if (!D_LocationHistoryTracker.Instance.HasVisited(location))
                    return false;
            }
        }

        // 3/ Items
        if (requiredItems.Length > 0)
        {
            foreach (var itemSO in requiredItems)
                if (!INV_Manager.Instance.HasItem(itemSO))
                    return false;
        }
        return true;
    }
}

[System.Serializable]
public class D_LineSO
{
    public D_ActorSO speaker;

    [TextArea(3, 5)]
    public string text;
}

[System.Serializable]
public class D_Option
{
    public string optionText;
    public D_SO nextDialogue;
}

