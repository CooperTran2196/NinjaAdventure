// ----- File: INV_ItemInfo.cs -----
using UnityEngine;
using TMPro;
using System.Collections.Generic;

public class INV_ItemInfo : MonoBehaviour
{
    [Header("Showing Info of Items")]
    [Header("References")]
    public CanvasGroup canvasGroup;
    public RectTransform rectTransform;
    public TMP_Text itemNameText;
    public TMP_Text itemDescText;
    public Transform statContainer;
    public TMP_Text statLinePrefab;
    public Vector2 offset = new Vector2(12f, -8f);

    void Awake()
    {
        canvasGroup ??= GetComponent<CanvasGroup>();
        rectTransform ??= GetComponent<RectTransform>();

        if (!canvasGroup)    Debug.LogError("INV_ItemInfo: canvasGroup missing.", this);
        if (!rectTransform)  Debug.LogError("INV_ItemInfo: rectTransform missing.", this);
        // if (!itemNameText) Debug.LogError("INV_ItemInfo: itemNameText missing.", this);
        if (!itemDescText)   Debug.LogError("INV_ItemInfo: itemDescText missing.", this);
        if (!statContainer)  Debug.LogError("INV_ItemInfo: statContainer missing.", this);
        if (!statLinePrefab) Debug.LogError("INV_ItemInfo: statLinePrefab missing.", this);
    }

    public void Show(INV_ItemSO inv_ItemSO)
    {
        // make visible
        canvasGroup.alpha = 1f;

        // header texts
        if (itemNameText) itemNameText.text = inv_ItemSO ? inv_ItemSO.itemName : string.Empty;
        if (itemDescText) itemDescText.text = inv_ItemSO ? inv_ItemSO.itemDescription : string.Empty;

        // rebuild stat lines
        ClearStatLines();
        if (inv_ItemSO)
        {
            var lines = BuildStatLines(inv_ItemSO);
            for (int i = 0; i < lines.Count; i++)
            {
                var line = Instantiate(statLinePrefab, statContainer);
                line.text = lines[i];
            }
        }
    }

    // Hide and clear
    public void Hide()
    {
        canvasGroup.alpha = 0f;
        if (itemNameText) itemNameText.text = string.Empty;
        itemDescText.text = string.Empty;
        ClearStatLines();
    }

    public void FollowMouse(Vector2 screenPos)
    {
        rectTransform.position = (Vector3)screenPos + (Vector3)offset;
    }

    // Remove all existing stat lines
    void ClearStatLines()
    {
        for (int i = statContainer.childCount - 1; i >= 0; i--)
            Destroy(statContainer.GetChild(i).gameObject);
    }

    // Build formatted stat description lines for the provided item
    List<string> BuildStatLines(INV_ItemSO inv_ItemSO)
    {
        var outLines = new List<string>();

        if (inv_ItemSO.isGold)
        {
            outLines.Add("A pile of gold coins.");
            return outLines;
        }

        if (inv_ItemSO.modifiers != null)
        {
            for (int i = 0; i < inv_ItemSO.modifiers.Count; i++)
            {
                var fx = inv_ItemSO.modifiers[i];
                string line;
                switch (fx.statName)
                {
                    case StatName.Heal:          line = $"Heals {fx.Value} HP"; break;
                    case StatName.MaxHealth:     line = $"+{fx.Value} Max HP"; break;
                    case StatName.AttackDamage:  line = $"+{fx.Value} Attack Damage"; break;
                    case StatName.AbilityPower:  line = $"+{fx.Value} Ability Power"; break;
                    case StatName.MoveSpeed:     line = $"+{fx.Value} Move Speed"; break;
                    case StatName.Armor:         line = $"+{fx.Value} Armor"; break;
                    case StatName.MagicResist:   line = $"+{fx.Value} Magic Resist"; break;
                    case StatName.Lifesteal:     line = $"+{fx.Value}% Lifesteal"; break;
                    default:                     line = $"+{fx.Value} {fx.statName}"; break;
                }
                if (fx.Duration > 1) line = $"{line} ({fx.Duration}s)";
                outLines.Add(line);
            }
        }
        return outLines;
    }
}

// ----- File: INV_ItemSO.cs -----
using UnityEngine;
using System.Collections.Generic;

[CreateAssetMenu(fileName = "INV_ItemSO", menuName = "Item")]
public class INV_ItemSO : ScriptableObject
{
    [Header("Item Data")]
    public string itemName = "Auto Filled";
    [TextArea] public string itemDescription;
    public Sprite image;
    public int stackSize = 3;

    [Header("Flags")]
    public bool isGold;

    [Header("Item Effects")]
    public List<StatEffect> modifiers;

    // Auto-update name in Editor
    private void OnValidate()
    {
        if (itemName != name)
            itemName = name;
    }
}

// ----- File: INV_Loot.cs -----
using System;
using UnityEngine;

[ExecuteAlways] // lets OnEnable run in Edit Mode so the icon updates in Inspector
public class INV_Loot : MonoBehaviour
{
    [Header("MUST have components for each loot prefab")]
    [Header("References")]
    public INV_ItemSO inv_ItemSO;
    SpriteRenderer sr;
    Animator anim;
    CircleCollider2D trigger;

    [Header("Data")]
    public int quantity = 1;
    public bool canBePickedUp = true; // false when we drop it from inventory

    public static event Action<INV_ItemSO, int> OnItemLooted;

    void Awake()
    {
        sr      ??= GetComponentInChildren<SpriteRenderer>();
        anim    ??= GetComponent<Animator>();
        trigger ??= GetComponent<CircleCollider2D>();

        if (!sr)      Debug.LogError("INV_Loot: SpriteRenderer (sr) missing.", this);
        if (!anim)    Debug.LogError("INV_Loot: Animator (anim) missing.", this);
        if (!trigger) Debug.LogError("INV_Loot: CircleCollider2D (trigger) missing.", this);
    }

    // Run in Edit Mode to update sprite in Inspector
    void OnEnable() => RefreshAppearance();

    // Called by INV_Manager when spawning overflow/right-click drops
    public void Initialize(INV_ItemSO itemSO, int qty)
    {
        inv_ItemSO = itemSO;
        quantity = qty;
        canBePickedUp = false; // avoid instant repick
        RefreshAppearance();
    }

    // update sprite and name
    void RefreshAppearance()
    {
        sr.sprite = inv_ItemSO.image;
        gameObject.name = inv_ItemSO.itemName;
    }

    // pickup when player enters trigger
    void OnTriggerEnter2D(Collider2D other)
    {
        if (!other.CompareTag("Player") || !canBePickedUp) return;

        trigger.enabled = false;
        OnItemLooted?.Invoke(inv_ItemSO, quantity);
        anim.SetTrigger("Pickup");
        Destroy(gameObject, 0.5f); // MUST Match animation length
    }

    // re-enable pickup when player leaves trigger (for drops)
    void OnTriggerExit2D(Collider2D other)
    {
        if (!other.CompareTag("Player")) return;

        canBePickedUp = true;
    }
}

// ----- File: INV_Manager.cs -----
using UnityEngine;
using TMPro;

[DisallowMultipleComponent]
public class INV_Manager : MonoBehaviour
{
    [Header("Central API for the Inventory system, depend on P_StatsManager")]
    [Header("References")]
    public P_StatsManager p_statsManager;

    // MUST wire MANUALLY in Inspector
    public TMP_Text goldText;
    public GameObject lootPrefab;
    public Transform player;
    public int gold;
    public INV_Slots[] inv_Slots;

    void OnEnable()  => INV_Loot.OnItemLooted += AddItem;
    void OnDisable() => INV_Loot.OnItemLooted -= AddItem;

    void Awake()
    {
        p_statsManager ??= FindFirstObjectByType<P_StatsManager>();

        if (!p_statsManager) Debug.LogError("INV_Manager: P_StatsManager missing.", this);
    }

    // Update all slots & gold text at start
    void Start()
    {
        foreach (var slot in inv_Slots) slot.UpdateUI();
        UpdateGoldText();
    }

    // Adds item to inventory, stacking into existing slots first
    public void AddItem(INV_ItemSO inv_ItemSO, int quantity)
    {
        // Gold is special
        if (inv_ItemSO.isGold)
        {
            gold += quantity;
            UpdateGoldText();
            return;
        }

        // Stack into existing slots of the same item
        foreach (var slot in inv_Slots)
        {
            // same item and not full
            if (slot.itemSO == inv_ItemSO && slot.quantity < inv_ItemSO.stackSize)
            {
                int availableSpace = inv_ItemSO.stackSize - slot.quantity;
                int amountToAdd = Mathf.Min(availableSpace, quantity);

                slot.quantity += amountToAdd;
                quantity -= amountToAdd;

                slot.UpdateUI();
                if (quantity <= 0) return;
            }
        }

        // Fill empty slot
        foreach (var slot in inv_Slots)
        {
            if (slot.itemSO == null)
            {
                int amountToAdd = Mathf.Min(inv_ItemSO.stackSize, quantity);

                slot.itemSO = inv_ItemSO;
                slot.quantity = amountToAdd;
                slot.UpdateUI();

                quantity -= amountToAdd;
                if (quantity <= 0) return;
            }
        }

        // No room -> drop overflow at player
        if (quantity > 0) DropLoot(inv_ItemSO, quantity);
    }

    // Update gold text UI
    void UpdateGoldText()
    {
        goldText.text = gold.ToString();
    }

    // Uses the item in the given slot
    public void UseItem(INV_Slots slot)
    {
        // nothing to use
        if (slot.itemSO == null || slot.itemSO.modifiers.Count == 0) return;

        // Apply all modifiers from the item
        foreach (var modifier in slot.itemSO.modifiers)
        {
            p_statsManager.ApplyModifier(modifier);
        }

        // Consume the item
        slot.quantity -= 1;
        if (slot.quantity <= 0) slot.itemSO = null;
        slot.UpdateUI();
    }

    // Drops 1 item from the given slot at player position
    public void DropItemFromSlot(INV_Slots slot)
    {
        DropLoot(slot.itemSO, 1);
        slot.quantity -= 1;
        if (slot.quantity <= 0) slot.itemSO = null;
        slot.UpdateUI();
    }

    // Spawns loot prefab at player position with given item & quantity
    void DropLoot(INV_ItemSO itemSO, int qty)
    {
        var go = Instantiate(lootPrefab, player.position, Quaternion.identity);
        var loot = go.GetComponent<INV_Loot>();
        loot.Initialize(itemSO, qty); // sets sprite/name & canBePickedUp=false
    }
}

// ----- File: INV_Slots.cs -----
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.EventSystems;

public class INV_Slots : MonoBehaviour, IPointerClickHandler
{
    [Header("References")]
    INV_Manager inv_Manager;

    [Header("MUST have for each slot")]
    [Header("Data")]
    public INV_ItemSO itemSO;
    public int quantity;

    [Header("UI")]
    public Image itemImage;
    public TMP_Text amountText;

    static SHOP_Manager activeShop;

    void Awake()
    {
        itemImage ??= transform.Find("Icon")?.GetComponent<Image>();
        amountText ??= transform.Find("QuantityText")?.GetComponent<TMP_Text>();
        inv_Manager ??= GetComponentInParent<INV_Manager>();

        if (!itemImage)     Debug.LogError($"INV_Slots: itemImage missing.", this);
        if (!amountText)    Debug.LogError($"INV_Slots: amountText missing.", this);
        if (!inv_Manager)   Debug.LogError($"INV_Slots: INV_Manager missing in parent.", this);
    }

    void OnEnable()  => SHOP_Manager.OnShopStateChanged += HandleShopStateChanged;
    void OnDisable() => SHOP_Manager.OnShopStateChanged -= HandleShopStateChanged;

    void HandleShopStateChanged(SHOP_Manager shop, bool isOpen)
    {
        activeShop = isOpen ? shop : null;
    }

    // update icon and amount text
    public void UpdateUI()
    {
        if (itemSO)
        {
            itemImage.enabled = true;
            itemImage.sprite = itemSO.image;
            amountText.text = quantity.ToString();
        }
        else
        {
            itemImage.enabled = false;
            amountText.text = "";
        }
    }

    // LEFT = use or sell; RIGHT = drop (ONLY IF shop closed)
    public void OnPointerClick(PointerEventData eventData)
    {
        if (itemSO == null || quantity <= 0) return;

        // Shop open: Right = sell 1; disable use/drop while open
        if (activeShop)
        {
            if (eventData.button == PointerEventData.InputButton.Right)
            {
                activeShop.SellItem(itemSO);
                quantity -= 1;
                if (quantity <= 0) itemSO = null;
                UpdateUI();
            }
            return;
        }
        // Shop closed: normal behavior
        else
        {
            if (eventData.button == PointerEventData.InputButton.Left)
                inv_Manager.UseItem(this);
            else if (eventData.button == PointerEventData.InputButton.Right)
                inv_Manager.DropItemFromSlot(this);
        }
    }
}

// ----- File: SHOP_Manager.cs -----
using System;
using System.Collections.Generic;
using UnityEngine;

public class SHOP_Manager : MonoBehaviour
{
    public static event Action<SHOP_Manager, bool> OnShopStateChanged;

    [Header("Shopping List")]
    [SerializeField] List<ShopItem> shopItems = new();   // per-shopkeeper list

    [Header("Slots")]
    [SerializeField] SHOP_Slot[] shopSlots;

    [Header("Inventory Link (for buy/sell step)")]
    public INV_Manager inv_Manager;

    void Awake()
    {
        inv_Manager ??= FindFirstObjectByType<INV_Manager>();

        if (!inv_Manager)
            Debug.LogError("SHOP_Manager: INV_Manager reference missing.", this);
        if (shopSlots == null || shopSlots.Length == 0)
            Debug.LogWarning($"{name}: No shopSlots assigned.", this);
    }

    void Start()
    {
        PopulateShopItems();
        OnShopStateChanged?.Invoke(this, true); // open by default for now
    }

    void OnDisable() => OnShopStateChanged?.Invoke(this, false);

    public void PopulateShopItems()
    {
        // fill used slots
        int count = Mathf.Min(shopItems.Count, shopSlots.Length);
        for (int i = 0; i < count; i++)
        {
            var data = shopItems[i];
            var slot = shopSlots[i];
            slot.gameObject.SetActive(true);
            slot.Initialize(data.inv_ItemSO, data.price);
        }

        // turn off the rest
        for (int i = count; i < shopSlots.Length; i++)
            shopSlots[i].gameObject.SetActive(false);
    }

    // Attempt to buy item, checking gold and space
    public void TryBuyItem(INV_ItemSO inv_ItemSO, int price)
    {
        if (inv_ItemSO == null) return;
        if (inv_Manager.gold < price) return;
        if (!HasSpace(inv_ItemSO)) return;
        
        inv_Manager.gold -= price;
        inv_Manager.goldText.text = inv_Manager.gold.ToString();
        inv_Manager.AddItem(inv_ItemSO, 1);
    }

    // Sell item from inventory to shop
    public void SellItem(INV_ItemSO inv_ItemSO)
    {
        if (inv_ItemSO == null) return;
        int price = GetPrice(inv_ItemSO);
        if (price <= 0) return;

        inv_Manager.gold += price;
        inv_Manager.goldText.text = inv_Manager.gold.ToString();
        // INV_Slots handles decreasing quantity & UpdateUI on click
    }

    // Check if there's space in inventory for this item
    bool HasSpace(INV_ItemSO inv_ItemSO)
    {
        // same item with room
        foreach (var slot in inv_Manager.inv_Slots)
            if (slot.itemSO == inv_ItemSO && slot.quantity < inv_ItemSO.stackSize)
                return true;
            else if (slot.itemSO == null)
                return true;
        return false;
    }

    // Get price of item from shop list; 0 if not sold here
    int GetPrice(INV_ItemSO inv_ItemSO)
    {
        for (int i = 0; i < shopItems.Count; i++)
            if (shopItems[i].inv_ItemSO == inv_ItemSO)
                return shopItems[i].price;
        return 0;
    }

    // Simple struct for shop item data
    [Serializable]
    public class ShopItem
    {
        public INV_ItemSO inv_ItemSO;
        public int price = 1;
    }
}

// ----- File: SHOP_Slot.cs -----
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.EventSystems;

public class SHOP_Slot : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerMoveHandler
{
    [Header("References")]
    public SHOP_Manager shop_Manager;
    public INV_ItemInfo inv_ItemInfo;

    [Header("UI")]
    public TMP_Text itemNameText;
    public Image itemImage;
    public TMP_Text itemPriceText;

    [Header("Runtime Data")]
    public INV_ItemSO inv_ItemSO;
    public int price;

    void Awake()
    {
        shop_Manager     ??= GetComponentInParent<SHOP_Manager>();

        itemNameText    ??= transform.Find("itemNameText")?.GetComponent<TMP_Text>();
        itemImage       ??= transform.Find("itemImage")?.GetComponent<Image>();
        itemPriceText   ??= transform.Find("itemPriceText")?.GetComponent<TMP_Text>();

        if (!shop_Manager) Debug.LogError("SHOP_Slot: SHOP_Manager missing in parent.", this);

        if (!itemImage)    Debug.LogError("SHOP_Slot: itemImage missing.", this);
        if (!itemNameText) Debug.LogError("SHOP_Slot: itemNameText missing.", this);
        if (!itemPriceText)Debug.LogError("SHOP_Slot: itemPriceText missing.", this);
    }

    // called by SHOP_Manager at startup
    public void Initialize(INV_ItemSO newItemSO, int newPrice)
    {
        inv_ItemSO = newItemSO;
        price = newPrice;

        itemImage.enabled = true;
        itemImage.sprite = inv_ItemSO.image;
        itemNameText.text = inv_ItemSO.itemName;
        itemPriceText.text = price.ToString();
    }

    // called by Buy button
    public void OnBuyButtonClicked()
    {
        shop_Manager.TryBuyItem(inv_ItemSO, price);
    }
    
    // Show item info on hover
    public void OnPointerEnter(PointerEventData eventData)
    {
        if (inv_ItemSO != null) inv_ItemInfo?.Show(inv_ItemSO);
    }

    // Hide item info when not hovering
    public void OnPointerExit(PointerEventData eventData)
    {
        inv_ItemInfo?.Hide();
    }

    // Follow mouse while hovering
    public void OnPointerMove(PointerEventData eventData)
    {
        if (inv_ItemSO != null) inv_ItemInfo?.FollowMouse(eventData.position);
    }
}

