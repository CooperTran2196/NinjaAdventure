// ----- File: INV_ItemSO.cs -----
using UnityEngine;
using System.Collections.Generic;

[CreateAssetMenu(fileName = "INV_ItemSO", menuName = "Item")]
public class INV_ItemSO : ScriptableObject
{
    public string itemName = "Auto Filled";
    [TextArea] public string itemDescription;
    public Sprite icon;
    public int stackSize = 3;

    [Header("Flags")]
    public bool isGold;

    [Header("Item Effects")]
    public List<StatEffect> modifiers;

    private void OnValidate()
    {
        if (itemName != name)
            itemName = name;
    }
}

// ----- File: INV_Loot.cs -----
using System;
using UnityEngine;

[ExecuteAlways] // lets OnEnable run in Edit Mode so the icon updates in Inspector
public class INV_Loot : MonoBehaviour
{
    public static event Action<INV_ItemSO, int> OnItemLooted;

    [Header("References")]
    public INV_ItemSO inv_ItemSO;

    SpriteRenderer sr;
    Animator anim;

    [Header("Data")]
    public int quantity = 1;
    public bool canBePickedUp = true; // false when we drop it from inventory

    CircleCollider2D trigger;

    void Awake()
    {
        sr      ??= GetComponentInChildren<SpriteRenderer>();
        anim    ??= GetComponent<Animator>();
        trigger ??= GetComponent<CircleCollider2D>();

        if (!sr)      Debug.LogError($"{name}: SpriteRenderer missing.", this);
        if (!anim)    Debug.LogError($"{name}: Animator missing.", this);
        if (!trigger) Debug.LogError($"{name}: CircleCollider2D missing.", this);
    }

    void OnEnable() => RefreshAppearance();

    // Called by INV_Manager when spawning overflow/right-click drops
    public void Initialize(INV_ItemSO so, int qty)
    {
        inv_ItemSO = so;
        quantity = qty;
        canBePickedUp = false; // avoid instant repick
        RefreshAppearance();
    }

    void RefreshAppearance()
    {
        if (!sr || !inv_ItemSO) return;

        sr.sprite = inv_ItemSO.icon;
        gameObject.name = inv_ItemSO.itemName;
    }

    void OnTriggerEnter2D(Collider2D other)
    {
        if (!other.CompareTag("Player") || !canBePickedUp) return;

        trigger.enabled = false;
        OnItemLooted?.Invoke(inv_ItemSO, quantity);
        anim?.SetTrigger("Pickup");
        Destroy(gameObject, 0.5f); // Match animation length
    }

    void OnTriggerExit2D(Collider2D other)
    {
        if (!other.CompareTag("Player")) return;

        canBePickedUp = true;
    }
}

// ----- File: INV_Manager.cs -----
// Assets/GAME/Scripts/INV/INV_InventoryManager.cs
using UnityEngine;
using TMPro;

[DisallowMultipleComponent]
public class INV_Manager : MonoBehaviour
{
    [Header("Central API for the Inventory system")]
    [Header("References")]
    public P_StatsManager statsManager;

    public TMP_Text goldText;
    public GameObject lootPrefab;
    public Transform player;
    public int gold;
    public INV_Slots[] inv_Slots;

    void OnEnable()  => INV_Loot.OnItemLooted += AddItem;
    void OnDisable() => INV_Loot.OnItemLooted -= AddItem;

    void Awake()
    {
        statsManager ??= FindFirstObjectByType<P_StatsManager>();
        if (!statsManager) Debug.LogError($"{name}: C_StatsManager missing.", this);
    }

    void Start()
    {
        foreach (var slot in inv_Slots) slot.UpdateUI();
        UpdateGoldText();
    }

    public void AddItem(INV_ItemSO inv_ItemSO, int quantity)
    {
        if (inv_ItemSO.isGold)
        {
            gold += quantity;
            UpdateGoldText();
            return;
        }

        // Stack into existing slots of the same item
        foreach (var slot in inv_Slots)
        {
            if (slot.item == inv_ItemSO && slot.quantity < inv_ItemSO.stackSize)
            {
                int availableSpace = inv_ItemSO.stackSize - slot.quantity;
                int amountToAdd    = Mathf.Min(availableSpace, quantity);

                slot.quantity += amountToAdd;
                quantity      -= amountToAdd;

                slot.UpdateUI();
                if (quantity <= 0) return;
            }
        }

        // Fill empty slots
        foreach (var slot in inv_Slots)
        {
            if (slot.item == null)
            {
                int amountToAdd = Mathf.Min(inv_ItemSO.stackSize, quantity);

                slot.item     = inv_ItemSO;
                slot.quantity = amountToAdd;
                slot.UpdateUI();

                quantity -= amountToAdd;
                if (quantity <= 0) return;
            }
        }

        // No room -> drop overflow at player
        if (quantity > 0) DropLoot(inv_ItemSO, quantity);
    }

    void UpdateGoldText()
    {
        goldText.text = gold.ToString();
    }

    public void UseItem(INV_Slots slot)
    {
        if (slot.item == null || slot.item.modifiers.Count == 0) return;

        // Apply all modifiers from the item
        foreach (var modifier in slot.item.modifiers)
        {
            statsManager.ApplyModifier(modifier);
        }

        // Consume the item
        slot.quantity -= 1;
        if (slot.quantity <= 0) slot.item = null;
        slot.UpdateUI();
    }

    // Drops 1 item from the given slot at player position
    public void DropItemFromSlot(INV_Slots slot)
    {
        DropLoot(slot.item, 1);
        slot.quantity -= 1;
        if (slot.quantity <= 0) slot.item = null;
        slot.UpdateUI();
    }

    // Spawns loot prefab at player position with given item & quantity
    void DropLoot(INV_ItemSO item, int qty)
    {
        var go = Instantiate(lootPrefab, player.position, Quaternion.identity);
        var loot = go.GetComponent<INV_Loot>();
        loot.Initialize(item, qty); // sets sprite/name & canBePickedUp=false
    }
}

// ----- File: INV_Slots.cs -----
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.EventSystems;

public class INV_Slots : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerMoveHandler
{
    [Header("Data")]
    public INV_ItemSO item;
    public int quantity;
    public UI_ItemInfoPanel infoPanel;

    [Header("UI")]
    public Image itemImage;
    public TMP_Text amountText;

    INV_Manager inv;
    static SHOP_Manager activeShop;

    void Awake()
    {

        itemImage ??= transform.Find("Icon")?.GetComponent<Image>();
        amountText ??= transform.Find("QuantityText")?.GetComponent<TMP_Text>();
        inv ??= GetComponentInParent<INV_Manager>();

        if (!itemImage) Debug.LogError($"{name}: Item Image missing.", this);
        if (!amountText) Debug.LogError($"{name}: Amount Text missing.", this);
        if (!inv) Debug.LogError($"{name}: INV_Manager missing in parent.", this);
    }

    void OnEnable() => SHOP_Manager.OnShopStateChanged += HandleShopStateChanged;
    void OnDisable() => SHOP_Manager.OnShopStateChanged -= HandleShopStateChanged;

    void HandleShopStateChanged(SHOP_Manager shop, bool isOpen)
    {
        activeShop = isOpen ? shop : null;
    }

    public void UpdateUI()
    {
        if (item != null)
        {
            itemImage.enabled = true;
            itemImage.sprite = item.icon;
            amountText.text = quantity.ToString();
        }
        else
        {
            itemImage.enabled = false;
            amountText.text = "";
        }
    }

    public void OnPointerClick(PointerEventData e)
    {
        if (item == null || quantity <= 0) return;

        // Shop open: LEFT = sell 1; disable use/drop while open
        if (activeShop != null)
        {
            if (e.button == PointerEventData.InputButton.Left)
            {
                activeShop.SellItem(item);
                quantity -= 1;
                if (quantity <= 0) item = null;
                UpdateUI();
            }
            return;
        }

        // Shop closed: normal behavior
        if (e.button == PointerEventData.InputButton.Left)
            inv.UseItem(this);
        else if (e.button == PointerEventData.InputButton.Right)
            inv.DropItemFromSlot(this);
    }
        public void OnPointerEnter(PointerEventData eventData)
    {
        if (item != null) infoPanel?.Show(item);
    }

    public void OnPointerExit(PointerEventData eventData)
    {
        infoPanel?.Hide();
    }

    public void OnPointerMove(PointerEventData eventData)
    {
        if (item != null) infoPanel?.FollowMouse();
    }
}

// ----- File: SHOP_Manager.cs -----
// Assets/GAME/Scripts/INV/SHOP_Manager.cs
using System;
using System.Collections.Generic;
using UnityEngine;

public class SHOP_Manager : MonoBehaviour
{
    public static event Action<SHOP_Manager, bool> OnShopStateChanged;

    [Header("Shopping List")]
    [SerializeField] List<ShopItem> shopItems = new();   // per-shopkeeper list

    [Header("Slots")]
    [SerializeField] SHOP_Slot[] shopSlots;              // set in Inspector

    [Header("Inventory Link (for buy/sell step)")]
    public INV_Manager inv;                              // drag your Inventory Canvas

    void Awake()
    {
        // Auto-wire inventory if not assigned (optional)
        inv ??= FindFirstObjectByType<INV_Manager>();

        if (!inv)
            Debug.LogError($"{name}: INV_Manager reference missing on SHOP_Manager.", this);
        if (shopSlots == null || shopSlots.Length == 0)
            Debug.LogWarning($"{name}: No shopSlots assigned.", this);
    }

    void Start()
    {
        PopulateShopItems();
        OnShopStateChanged?.Invoke(this, true); // open by default for now
    }

    void OnDisable() => OnShopStateChanged?.Invoke(this, false);

    public void PopulateShopItems()
    {
        // fill used slots
        int count = Mathf.Min(shopItems.Count, shopSlots.Length);
        for (int i = 0; i < count; i++)
        {
            var data = shopItems[i];
            var slot = shopSlots[i];
            slot.gameObject.SetActive(true);
            slot.Initialize(data.inv_ItemSO, data.price);
        }

        // turn off the rest
        for (int i = count; i < shopSlots.Length; i++)
            shopSlots[i].gameObject.SetActive(false);
    }

    // ---- next-video hooks (already here so you don’t refactor later) ----
    public void TryBuyItem(INV_ItemSO inv_ItemSO, int price)
    {
        if (inv_ItemSO == null) return;
        if (!inv) return;
        if (inv.gold < price) return;
        if (!HasSpace(inv_ItemSO)) return;

        inv.gold -= price;
        inv.goldText.text = inv.gold.ToString();
        inv.AddItem(inv_ItemSO, 1);
    }

    public void SellItem(INV_ItemSO inv_ItemSO)
    {
        if (inv_ItemSO == null) return;
        if (!inv) return;
        int price = GetPrice(inv_ItemSO);
        if (price <= 0) return;

        inv.gold += price;
        inv.goldText.text = inv.gold.ToString();
        // INV_Slots handles decreasing quantity & UpdateUI on click
    }

    bool HasSpace(INV_ItemSO inv_ItemSO)
    {
        // same item with room
        foreach (var slot in inv.inv_Slots)
            if (slot.item == inv_ItemSO && slot.quantity < inv_ItemSO.stackSize) return true;

        // empty slot
        foreach (var slot in inv.inv_Slots)
            if (slot.item == null) return true;

        return false;
    }

    int GetPrice(INV_ItemSO inv_ItemSO)
    {
        for (int i = 0; i < shopItems.Count; i++)
            if (shopItems[i].inv_ItemSO == inv_ItemSO) return shopItems[i].price;
        return 0;
    }

    [Serializable]
    public class ShopItem
    {
        public INV_ItemSO inv_ItemSO;
        public int price = 1;
    }
}

// ----- File: SHOP_Slot.cs -----
// Assets/GAME/Scripts/INV/SHOP_Slot.cs
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.EventSystems;

public class SHOP_Slot : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerMoveHandler
{
    [Header("Runtime Data")]
    public INV_ItemSO inv_ItemSO { get; private set; }
    public int price { get; private set; }

    [Header("UI")]
    public Image icon;         // child "Icon"
    public TMP_Text nameText;  // child "NameText"
    public TMP_Text priceText; // child "PriceText"

    [Header("Refs")]
    public SHOP_Manager shop;  // parent manager
    public UI_ItemInfoPanel infoPanel;


    void Awake()
    {
        shop ??= GetComponentInParent<SHOP_Manager>();
        icon ??= transform.Find("Icon")?.GetComponent<Image>();
        nameText ??= transform.Find("NameText")?.GetComponent<TMP_Text>();
        priceText ??= transform.Find("PriceText")?.GetComponent<TMP_Text>();

        if (!shop) Debug.LogError($"{name}: SHOP_Manager missing in parent.", this);
        if (!icon) Debug.LogError($"{name}: Icon Image missing.", this);
        if (!nameText) Debug.LogError($"{name}: NameText TMP missing.", this);
        if (!priceText) Debug.LogError($"{name}: PriceText TMP missing.", this);
    }

    // called by SHOP_Manager at startup
    public void Initialize(INV_ItemSO newItemSO, int newPrice)
    {
        inv_ItemSO = newItemSO;
        price = newPrice;

        icon.enabled = true;
        icon.sprite = inv_ItemSO.icon;
        nameText.text = inv_ItemSO.itemName;
        priceText.text = price.ToString();
    }

    // keep this so the next video (buy) just works
    public void OnBuyButtonClicked()
    {
        shop.TryBuyItem(inv_ItemSO, price);
    }
    
        public void OnPointerEnter(PointerEventData eventData)
    {
        if (inv_ItemSO != null) infoPanel?.Show(inv_ItemSO);
    }

    public void OnPointerExit(PointerEventData eventData)
    {
        infoPanel?.Hide();
    }

    public void OnPointerMove(PointerEventData eventData)
    {
        if (inv_ItemSO != null) infoPanel?.FollowMouse();
    }
}

// ----- File: UI_ItemInfoPanel.cs -----
using UnityEngine;
using TMPro;
using System.Collections.Generic;

public class UI_ItemInfoPanel : MonoBehaviour
{
    [Header("Panel")]
    public CanvasGroup canvasGroup;      // Set in Inspector
    public RectTransform rectTransform;  // Set in Inspector (this panel)
    [Header("Texts")]
    public TextMeshProUGUI nameText;     // Item name
    public TextMeshProUGUI descText;     // Item description
    [Header("Stat Lines")]
    public Transform statContainer;      // Vertical group parent
    public TextMeshProUGUI statLinePrefab; // Simple TMP text prefab

    [Header("Mouse Offset")]
    public Vector2 offset = new Vector2(12f, -8f);

    // Cache
    void Awake()
    {
        canvasGroup ??= GetComponent<CanvasGroup>();
        rectTransform ??= GetComponent<RectTransform>();
        if (!canvasGroup) Debug.LogError("UI_ItemInfoPanel: Missing CanvasGroup.");
        if (!rectTransform) Debug.LogError("UI_ItemInfoPanel: Missing RectTransform.");
    }

    public void Show(INV_ItemSO item)
    {
        // visible
        canvasGroup.alpha = 1f;

        // header fields
        if (nameText) nameText.text = item ? item.itemName : "";
        if (descText) descText.text = item ? item.itemDescription : "";

        // rebuild stat lines
        ClearStatLines();
        if (item)
        {
            var lines = BuildStatLines(item);
            for (int i = 0; i < lines.Count; i++)
            {
                var line = Instantiate(statLinePrefab, statContainer);
                line.text = lines[i];
            }
        }
    }

    public void Hide()
    {
        canvasGroup.alpha = 0f;
        if (nameText) nameText.text = "";
        if (descText) descText.text = "";
        ClearStatLines();
    }

    public void FollowMouse()
    {
        Vector3 mp = Input.mousePosition;
        rectTransform.position = mp + (Vector3)offset;
    }

    void ClearStatLines()
    {
        if (!statContainer) return;
        for (int i = statContainer.childCount - 1; i >= 0; i--)
            Destroy(statContainer.GetChild(i).gameObject);
    }

    // --- Formatting ---

    // Adjust mapping here to match your StatEffect fields exactly.
    List<string> BuildStatLines(INV_ItemSO item)
    {
        var outLines = new List<string>();

        // Currency example (optional display)
        if (item.isGold)
        {
            // Note: gold value is not on the item, it's on the shop or determined otherwise.
            // This info panel just knows it's a gold item.
            outLines.Add("A pile of gold coins.");
            return outLines;
        }

        // From your existing item modifiers list:
        if (item.modifiers != null)
        {
            for (int i = 0; i < item.modifiers.Count; i++)
            {
                var fx = item.modifiers[i];
                string line = "";

                switch (fx.statName)
                {
                    case StatName.Heal:
                        line = $"Heals {fx.Value} HP";
                        break;
                    case StatName.MaxHealth:
                        line = $"+{fx.Value} Max HP";
                        break;
                    case StatName.AttackDamage:
                        line = $"+{fx.Value} Attack Damage";
                        break;
                    case StatName.AbilityPower:
                        line = $"+{fx.Value} Ability Power";
                        break;
                    case StatName.MoveSpeed:
                        line = $"+{fx.Value} Move Speed";
                        break;
                    case StatName.Armor:
                        line = $"+{fx.Value} Armor";
                        break;
                    case StatName.MagicResist:
                        line = $"+{fx.Value} Magic Resist";
                        break;
                    case StatName.Lifesteal:
                        line = $"+{fx.Value}% Lifesteal";
                        break;
                    default:
                        line = $"+{fx.Value} {fx.statName}";
                        break;
                }


                if (fx.Duration > 1)
                {
                    line = $"{line} ({fx.Duration}s)";
                }
                outLines.Add(line);
            }
        }

        return outLines;
    }
}

